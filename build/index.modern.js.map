{"version":3,"file":"index.modern.js","mappings":"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","sources":["webpack://ReactSimpleKeyboard/webpack/universalModuleDefinition","webpack://ReactSimpleKeyboard/external umd {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack://ReactSimpleKeyboard/SimpleKeyboard/webpack/universalModuleDefinition","webpack://ReactSimpleKeyboard/SimpleKeyboard/webpack/bootstrap","webpack://ReactSimpleKeyboard/SimpleKeyboard/webpack/runtime/define property getters","webpack://ReactSimpleKeyboard/SimpleKeyboard/webpack/runtime/hasOwnProperty shorthand","webpack://ReactSimpleKeyboard/SimpleKeyboard/webpack/runtime/make namespace object","webpack://ReactSimpleKeyboard/SimpleKeyboard/src/lib/services/Utilities.ts","webpack://ReactSimpleKeyboard/SimpleKeyboard/src/lib/services/PhysicalKeyboard.ts","webpack://ReactSimpleKeyboard/SimpleKeyboard/src/lib/services/KeyboardLayout.ts","webpack://ReactSimpleKeyboard/SimpleKeyboard/src/lib/components/CandidateBox.ts","webpack://ReactSimpleKeyboard/SimpleKeyboard/src/lib/components/Keyboard.ts","webpack://ReactSimpleKeyboard/SimpleKeyboard/src/lib/index.modern.ts","webpack://ReactSimpleKeyboard/webpack/bootstrap","webpack://ReactSimpleKeyboard/webpack/runtime/compat get default export","webpack://ReactSimpleKeyboard/webpack/runtime/define property getters","webpack://ReactSimpleKeyboard/webpack/runtime/hasOwnProperty shorthand","webpack://ReactSimpleKeyboard/webpack/runtime/make namespace object","webpack://ReactSimpleKeyboard/webpack/runtime/node module decorator","webpack://ReactSimpleKeyboard/./src/lib/services/Utilities.ts","webpack://ReactSimpleKeyboard/./src/lib/components/KeyboardModern.tsx","webpack://ReactSimpleKeyboard/./src/lib/index.modern.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactSimpleKeyboard\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"ReactSimpleKeyboard\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__442__) {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__442__;","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboard\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboard\"] = factory();\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { KeyboardInput } from \"./../interfaces\";\r\nimport { KeyboardOptions, UtilitiesParams } from \"../interfaces\";\r\n\r\n/**\r\n * Utility Service\r\n */\r\nclass Utilities {\r\n  getOptions: () => KeyboardOptions;\r\n  getCaretPosition: () => number | null;\r\n  getCaretPositionEnd: () => number | null;\r\n  dispatch: any;\r\n  maxLengthReached!: boolean;\r\n\r\n  /**\r\n   * Creates an instance of the Utility service\r\n   */\r\n  constructor({ getOptions, getCaretPosition, getCaretPositionEnd, dispatch }: UtilitiesParams) {\r\n    this.getOptions = getOptions;\r\n    this.getCaretPosition = getCaretPosition;\r\n    this.getCaretPositionEnd = getCaretPositionEnd;\r\n    this.dispatch = dispatch;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(Utilities, this);\r\n  }\r\n\r\n  /**\r\n   * Retrieve button type\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The button type\r\n   */\r\n  getButtonType(button: string): string {\r\n    return button.includes(\"{\") && button.includes(\"}\") && button !== \"{//}\" ? \"functionBtn\" : \"standardBtn\";\r\n  }\r\n\r\n  /**\r\n   * Adds default classes to a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The classes to be added to the button\r\n   */\r\n  getButtonClass(button: string): string {\r\n    const buttonTypeClass = this.getButtonType(button);\r\n    const buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    let buttonNormalized = \"\";\r\n\r\n    if (buttonTypeClass !== \"standardBtn\") buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\r\n\r\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\r\n  }\r\n\r\n  /**\r\n   * Default button display labels\r\n   */\r\n  getDefaultDisplay() {\r\n    return {\r\n      \"{bksp}\": \"backspace\",\r\n      \"{backspace}\": \"backspace\",\r\n      \"{enter}\": \"< enter\",\r\n      \"{shift}\": \"shift\",\r\n      \"{shiftleft}\": \"shift\",\r\n      \"{shiftright}\": \"shift\",\r\n      \"{alt}\": \"alt\",\r\n      \"{s}\": \"shift\",\r\n      \"{tab}\": \"tab\",\r\n      \"{lock}\": \"caps\",\r\n      \"{capslock}\": \"caps\",\r\n      \"{accept}\": \"Submit\",\r\n      \"{space}\": \" \",\r\n      \"{//}\": \" \",\r\n      \"{esc}\": \"esc\",\r\n      \"{escape}\": \"esc\",\r\n      \"{f1}\": \"f1\",\r\n      \"{f2}\": \"f2\",\r\n      \"{f3}\": \"f3\",\r\n      \"{f4}\": \"f4\",\r\n      \"{f5}\": \"f5\",\r\n      \"{f6}\": \"f6\",\r\n      \"{f7}\": \"f7\",\r\n      \"{f8}\": \"f8\",\r\n      \"{f9}\": \"f9\",\r\n      \"{f10}\": \"f10\",\r\n      \"{f11}\": \"f11\",\r\n      \"{f12}\": \"f12\",\r\n      \"{numpaddivide}\": \"/\",\r\n      \"{numlock}\": \"lock\",\r\n      \"{arrowup}\": \"↑\",\r\n      \"{arrowleft}\": \"←\",\r\n      \"{arrowdown}\": \"↓\",\r\n      \"{arrowright}\": \"→\",\r\n      \"{prtscr}\": \"print\",\r\n      \"{scrolllock}\": \"scroll\",\r\n      \"{pause}\": \"pause\",\r\n      \"{insert}\": \"ins\",\r\n      \"{home}\": \"home\",\r\n      \"{pageup}\": \"up\",\r\n      \"{delete}\": \"del\",\r\n      \"{forwarddelete}\": \"del\",\r\n      \"{end}\": \"end\",\r\n      \"{pagedown}\": \"down\",\r\n      \"{numpadmultiply}\": \"*\",\r\n      \"{numpadsubtract}\": \"-\",\r\n      \"{numpadadd}\": \"+\",\r\n      \"{numpadenter}\": \"enter\",\r\n      \"{period}\": \".\",\r\n      \"{numpaddecimal}\": \".\",\r\n      \"{numpad0}\": \"0\",\r\n      \"{numpad1}\": \"1\",\r\n      \"{numpad2}\": \"2\",\r\n      \"{numpad3}\": \"3\",\r\n      \"{numpad4}\": \"4\",\r\n      \"{numpad5}\": \"5\",\r\n      \"{numpad6}\": \"6\",\r\n      \"{numpad7}\": \"7\",\r\n      \"{numpad8}\": \"8\",\r\n      \"{numpad9}\": \"9\",\r\n    };\r\n  }\r\n  /**\r\n   * Returns the display (label) name for a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {object} display The provided display option\r\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\r\n   */\r\n  getButtonDisplayName(button: string, display: KeyboardOptions[\"display\"], mergeDisplay = false) {\r\n    if (mergeDisplay) {\r\n      display = Object.assign({}, this.getDefaultDisplay(), display);\r\n    } else {\r\n      display = display || this.getDefaultDisplay();\r\n    }\r\n\r\n    return display[button] || button;\r\n  }\r\n\r\n  /**\r\n   * Returns the updated input resulting from clicking a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {string} input The input string\r\n   * @param  {number} caretPos The cursor's current position\r\n   * @param  {number} caretPosEnd The cursor's current end position\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  getUpdatedInput(button: string, input: string, caretPos: any, caretPosEnd = caretPos, moveCaret = false) {\r\n    const options = this.getOptions();\r\n    const commonParams: [number | undefined, number | undefined, boolean] = [caretPos, caretPosEnd, moveCaret];\r\n\r\n    let output = input;\r\n\r\n    if ((button === \"{bksp}\" || button === \"{backspace}\") && output.length > 0) {\r\n      output = this.removeAt(output, ...commonParams);\r\n    } else if ((button === \"{delete}\" || button === \"{forwarddelete}\") && output.length > 0) {\r\n      output = this.removeForwardsAt(output, ...commonParams);\r\n    } else if (button === \"{space}\") output = this.addStringAt(output, \" \", ...commonParams);\r\n    else if (button === \"{tab}\" && !(typeof options.tabCharOnTab === \"boolean\" && options.tabCharOnTab === false)) {\r\n      output = this.addStringAt(output, \"\\t\", ...commonParams);\r\n    } else if ((button === \"{enter}\" || button === \"{numpadenter}\") && options.newLineOnEnter)\r\n      output = this.addStringAt(output, \"\\n\", ...commonParams);\r\n    else if (button.includes(\"numpad\") && Number.isInteger(Number(button[button.length - 2]))) {\r\n      output = this.addStringAt(output, button[button.length - 2], ...commonParams);\r\n    } else if (button === \"{numpaddivide}\") output = this.addStringAt(output, \"/\", ...commonParams);\r\n    else if (button === \"{numpadmultiply}\") output = this.addStringAt(output, \"*\", ...commonParams);\r\n    else if (button === \"{numpadsubtract}\") output = this.addStringAt(output, \"-\", ...commonParams);\r\n    else if (button === \"{numpadadd}\") output = this.addStringAt(output, \"+\", ...commonParams);\r\n    else if (button === \"{numpaddecimal}\") output = this.addStringAt(output, \".\", ...commonParams);\r\n    else if (button === \"{\" || button === \"}\") output = this.addStringAt(output, button, ...commonParams);\r\n    else if (!button.includes(\"{\") && !button.includes(\"}\")) output = this.addStringAt(output, button, ...commonParams);\r\n\r\n    if (options.debug) {\r\n      console.log(\"Input will be: \" + output);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Moves the cursor position by a given amount\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPos(length: number, minus = false) {\r\n    const newCaretPos = this.updateCaretPosAction(length, minus);\r\n\r\n    this.dispatch((instance: any) => {\r\n      instance.setCaretPosition(newCaretPos);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Action method of updateCaretPos\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPosAction(length: number, minus = false) {\r\n    const options = this.getOptions();\r\n    let caretPosition = this.getCaretPosition();\r\n\r\n    if (caretPosition != null) {\r\n      if (minus) {\r\n        if (caretPosition > 0) caretPosition = caretPosition - length;\r\n      } else {\r\n        caretPosition = caretPosition + length;\r\n      }\r\n    }\r\n\r\n    if (options.debug) {\r\n      console.log(\"Caret at:\", caretPosition);\r\n    }\r\n\r\n    return caretPosition;\r\n  }\r\n\r\n  /**\r\n   * Adds a string to the input at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {string} str The string to add\r\n   * @param  {number} position The (cursor) position where the string should be added\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  addStringAt(source: string, str: string, position = source.length, positionEnd = source.length, moveCaret = false) {\r\n    let output;\r\n\r\n    if (!position && position !== 0) {\r\n      output = source + str;\r\n    } else {\r\n      output = [source.slice(0, position), str, source.slice(positionEnd)].join(\"\");\r\n\r\n      /**\r\n       * Avoid caret position change when maxLength is set\r\n       */\r\n      if (!this.isMaxLengthReached()) {\r\n        if (moveCaret) this.updateCaretPos(str.length);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Check whether the button is a standard button\r\n   */\r\n  isStandardButton = (button: string) => button && !(button[0] === \"{\" && button[button.length - 1] === \"}\");\r\n\r\n  /**\r\n   * Removes an amount of characters before a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  removeAt(source: string, position = source.length, positionEnd = source.length, moveCaret = false) {\r\n    if (position === 0 && positionEnd === 0) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      let prevTwoChars;\r\n      let emojiMatched;\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      if (position && position >= 0) {\r\n        prevTwoChars = source.substring(position - 2, position);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.substr(0, position - 2) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.substr(0, position - 1) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      } else {\r\n        prevTwoChars = source.slice(-2);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.slice(0, -2);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.slice(0, -1);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Removes an amount of characters after a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   */\r\n  removeForwardsAt(\r\n    source: string,\r\n    position: number = source.length,\r\n    positionEnd: number = source.length,\r\n    moveCaret = false\r\n  ) {\r\n    if (!source?.length || position === null) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      const nextTwoChars = source.substring(position, position + 2);\r\n      const emojiMatched = nextTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.substr(0, position) + source.substr(position + 2);\r\n      } else {\r\n        output = source.substr(0, position) + source.substr(position + 1);\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\r\n   *\r\n   * @param  {object} inputObj\r\n   * @param  {string} updatedInput\r\n   */\r\n  handleMaxLength(inputObj: KeyboardInput, updatedInput: string) {\r\n    const options = this.getOptions();\r\n    const maxLength = options.maxLength;\r\n    const currentInput = inputObj[options.inputName || \"default\"];\r\n    const condition = updatedInput.length - 1 >= maxLength;\r\n\r\n    if (\r\n      /**\r\n       * If pressing this button won't add more characters\r\n       * We exit out of this limiter function\r\n       */\r\n      updatedInput.length <= currentInput.length\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (Number.isInteger(maxLength)) {\r\n      if (options.debug) {\r\n        console.log(\"maxLength (num) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        /**\r\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\r\n         */\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (typeof maxLength === \"object\") {\r\n      const condition = updatedInput.length - 1 >= maxLength[options.inputName || \"default\"];\r\n\r\n      if (options.debug) {\r\n        console.log(\"maxLength (obj) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of maxLengthReached\r\n   */\r\n  isMaxLengthReached() {\r\n    return Boolean(this.maxLengthReached);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a touch device is being used\r\n   */\r\n  isTouchDevice() {\r\n    return \"ontouchstart\" in window || navigator.maxTouchPoints;\r\n  }\r\n\r\n  /**\r\n   * Determines whether pointer events are supported\r\n   */\r\n  pointerEventsSupported() {\r\n    return !!window.PointerEvent;\r\n  }\r\n\r\n  /**\r\n   * Bind all methods in a given class\r\n   */\r\n\r\n  static bindMethods(myClass: any, instance: any) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (const myMethod of Object.getOwnPropertyNames(myClass.prototype)) {\r\n      const excludeMethod = myMethod === \"constructor\" || myMethod === \"bindMethods\";\r\n      if (!excludeMethod) {\r\n        instance[myMethod] = instance[myMethod].bind(instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transforms an arbitrary string to camelCase\r\n   *\r\n   * @param  {string} str The string to transform.\r\n   */\r\n  camelCase(str: string): string {\r\n    if (!str) return \"\";\r\n\r\n    return str\r\n      .toLowerCase()\r\n      .trim()\r\n      .split(/[.\\-_\\s]/g)\r\n      .reduce((str, word) => (word.length ? str + word[0].toUpperCase() + word.slice(1) : str));\r\n  }\r\n\r\n  /**\r\n   * Split array into chunks\r\n   */\r\n  chunkArray<T>(arr: T[], size: number): T[][] {\r\n    return [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));\r\n  }\r\n\r\n  /**\r\n   * Escape regex input\r\n   */\r\n  escapeRegex(str: string) {\r\n    return str.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\r\n  }\r\n\r\n  /**\r\n   * Calculate caret position offset when using rtl option\r\n   */\r\n  getRtlOffset(index: number, input: string) {\r\n    let newIndex = index;\r\n    const startMarkerIndex = input.indexOf(\"\\u202B\");\r\n    const endMarkerIndex = input.indexOf(\"\\u202C\");\r\n\r\n    if (startMarkerIndex < index && startMarkerIndex != -1) {\r\n      newIndex--;\r\n    }\r\n    if (endMarkerIndex < index && startMarkerIndex != -1) {\r\n      newIndex--;\r\n    }\r\n\r\n    return newIndex < 0 ? 0 : newIndex;\r\n  }\r\n\r\n  /**\r\n   * Reusable empty function\r\n   */\r\n  static noop = () => {};\r\n}\r\n\r\nexport default Utilities;\r\n","import { KeyboardOptions, PhysicalKeyboardParams } from \"../interfaces\";\r\nimport Utilities from \"../services/Utilities\";\r\nimport { getDefaultLayout } from \"../services/KeyboardLayout\";\r\n\r\n/**\r\n * Layout Key Mapping Interface\r\n */\r\ninterface LayoutKeyMapping {\r\n  normal: string | number;\r\n  shift: string | number;\r\n}\r\n\r\n/**\r\n * Physical Keyboard Service\r\n */\r\nclass PhysicalKeyboard {\r\n  getOptions: () => KeyboardOptions;\r\n  dispatch: any;\r\n  layoutJSON: Record<string, LayoutKeyMapping> | null = null;\r\n  lastLayout = \"\";\r\n  shiftActive = false;\r\n  capslockActive = false;\r\n\r\n  /**\r\n   * Creates an instance of the PhysicalKeyboard service\r\n   */\r\n  constructor({ dispatch, getOptions }: PhysicalKeyboardParams) {\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.dispatch = dispatch;\r\n    this.getOptions = getOptions;\r\n\r\n    if (this.getOptions() && this.getOptions().layout) {\r\n      this.lastLayout = this.getOptions()?.layout?.default?.[1] || \"\";\r\n      const layout = this.getOptions().layout;\r\n      if (layout) {\r\n        this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(layout));\r\n      }\r\n    } else {\r\n      this.lastLayout = getDefaultLayout().default[1];\r\n      this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(getDefaultLayout()));\r\n    }\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(PhysicalKeyboard, this);\r\n  }\r\n\r\n  handleHighlightKeyDown(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    // if (options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)) {\r\n    //   e.preventDefault();\r\n    //   e.stopImmediatePropagation();\r\n    // }\r\n\r\n    if ((e.code === \"ShiftLeft\" || e.code === \"ShiftRight\") && !this.shiftActive) {\r\n      this.shiftActive = !this.shiftActive;\r\n    }\r\n\r\n    if (e.code === \"CapsLock\") {\r\n      this.capslockActive = !this.capslockActive;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const standardButtonPressed = instance.getButtonElement(buttonPressed);\r\n      const functionButtonPressed = instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      let buttonDOM;\r\n      let buttonName: string;\r\n\r\n      if (standardButtonPressed) {\r\n        buttonDOM = standardButtonPressed;\r\n        buttonName = buttonPressed;\r\n      } else if (functionButtonPressed) {\r\n        buttonDOM = functionButtonPressed;\r\n        buttonName = `{${buttonPressed}}`;\r\n      } else {\r\n        return;\r\n      }\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        buttonElement.style.background = options.physicalKeyboardHighlightBgColor || \"#dadce4\";\r\n        buttonElement.style.color = options.physicalKeyboardHighlightTextColor || \"black\";\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM[0]?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM[0]?.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  handleHighlightKeyUp(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    // if (options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)) {\r\n    //   e.preventDefault();\r\n    //   e.stopImmediatePropagation();\r\n    // }\r\n\r\n    if (e.code === \"ShiftLeft\" || e.code === \"ShiftRight\") {\r\n      this.shiftActive = false;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const buttonDOM = instance.getButtonElement(buttonPressed) || instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        if (buttonElement.removeAttribute) {\r\n          buttonElement.removeAttribute(\"style\");\r\n        }\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM[0]?.onpointerup?.(e);\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM?.onpointerup?.(e);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\r\n   * @param  {object} e The KeyboardEvent\r\n   * @returns {string} The simple-keyboard layout key\r\n   */\r\n  getSimpleKeyboardLayoutKey(e: KeyboardEvent): string {\r\n    let output = \"\";\r\n\r\n    const options = this.getOptions();\r\n    const currentLayout = options?.layout?.default?.[1] ?? getDefaultLayout().default[1];\r\n    if (this.lastLayout !== currentLayout) {\r\n      this.lastLayout = currentLayout || \"\";\r\n\r\n      const layout = options?.layout ?? getDefaultLayout();\r\n      this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(layout));\r\n    }\r\n\r\n    if (this.layoutJSON && this.layoutJSON[e.code]) {\r\n      // Determine whether to use normal or shift based on Shift & CapsLock state\r\n      output =\r\n        this.shiftActive || this.capslockActive\r\n          ? this.layoutJSON[e.code].shift.toString()\r\n          : this.layoutJSON[e.code].normal.toString();\r\n    } else {\r\n      output = e.key && e.key !== \"Unidentified\" ? e.key : this.keyCodeToKey(e?.keyCode);\r\n    }\r\n\r\n    // Normalize left/right variations\r\n    const normalizeKeyMap: Record<string, string> = {\r\n      ShiftLeft: \"shift\",\r\n      ShiftRight: \"shift\",\r\n      ControlLeft: \"ctrl\",\r\n      ControlRight: \"ctrl\",\r\n      AltLeft: \"alt\",\r\n      AltRight: \"alt\",\r\n      MetaLeft: \"meta\",\r\n      MetaRight: \"meta\",\r\n      Backspace: \"bksp\",\r\n      CapsLock: \"lock\",\r\n      Enter: \"enter\",\r\n      Tab: \"tab\",\r\n    };\r\n\r\n    return normalizeKeyMap[output] || (output.length > 1 ? output.toLowerCase() : output);\r\n  }\r\n\r\n  /**\r\n   * Retrieve key from keyCode\r\n   */\r\n  keyCodeToKey(keyCode: number): string {\r\n    return (\r\n      {\r\n        8: \"Backspace\",\r\n        9: \"Tab\",\r\n        13: \"Enter\",\r\n        16: \"Shift\",\r\n        17: \"Ctrl\",\r\n        18: \"Alt\",\r\n        19: \"Pause\",\r\n        20: \"CapsLock\",\r\n        27: \"Esc\",\r\n        32: \"Space\",\r\n        33: \"PageUp\",\r\n        34: \"PageDown\",\r\n        35: \"End\",\r\n        36: \"Home\",\r\n        37: \"ArrowLeft\",\r\n        38: \"ArrowUp\",\r\n        39: \"ArrowRight\",\r\n        40: \"ArrowDown\",\r\n        45: \"Insert\",\r\n        46: \"Delete\",\r\n        48: \"0\",\r\n        49: \"1\",\r\n        50: \"2\",\r\n        51: \"3\",\r\n        52: \"4\",\r\n        53: \"5\",\r\n        54: \"6\",\r\n        55: \"7\",\r\n        56: \"8\",\r\n        57: \"9\",\r\n        65: \"A\",\r\n        66: \"B\",\r\n        67: \"C\",\r\n        68: \"D\",\r\n        69: \"E\",\r\n        70: \"F\",\r\n        71: \"G\",\r\n        72: \"H\",\r\n        73: \"I\",\r\n        74: \"J\",\r\n        75: \"K\",\r\n        76: \"L\",\r\n        77: \"M\",\r\n        78: \"N\",\r\n        79: \"O\",\r\n        80: \"P\",\r\n        81: \"Q\",\r\n        82: \"R\",\r\n        83: \"S\",\r\n        84: \"T\",\r\n        85: \"U\",\r\n        86: \"V\",\r\n        87: \"W\",\r\n        88: \"X\",\r\n        89: \"Y\",\r\n        90: \"Z\",\r\n        91: \"Meta\",\r\n        96: \"Numpad0\",\r\n        97: \"Numpad1\",\r\n        98: \"Numpad2\",\r\n        99: \"Numpad3\",\r\n        100: \"Numpad4\",\r\n        101: \"Numpad5\",\r\n        102: \"Numpad6\",\r\n        103: \"Numpad7\",\r\n        104: \"Numpad8\",\r\n        105: \"Numpad9\",\r\n        106: \"NumpadMultiply\",\r\n        107: \"NumpadAdd\",\r\n        109: \"NumpadSubtract\",\r\n        110: \"NumpadDecimal\",\r\n        111: \"NumpadDivide\",\r\n        112: \"F1\",\r\n        113: \"F2\",\r\n        114: \"F3\",\r\n        115: \"F4\",\r\n        116: \"F5\",\r\n        117: \"F6\",\r\n        118: \"F7\",\r\n        119: \"F8\",\r\n        120: \"F9\",\r\n        121: \"F10\",\r\n        122: \"F11\",\r\n        123: \"F12\",\r\n        144: \"NumLock\",\r\n        145: \"ScrollLock\",\r\n        186: \";\",\r\n        187: \"=\",\r\n        188: \",\",\r\n        189: \"-\",\r\n        190: \".\",\r\n        191: \"/\",\r\n        192: \"`\",\r\n        219: \"[\",\r\n        220: \"\\\\\",\r\n        221: \"]\",\r\n        222: \"'\",\r\n      }[keyCode] || \"\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Extracts and pads a layout object\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with padding\r\n   */\r\n  extractAndPadLayout(layout: Record<string, string[]>): Record<string, (string | number)[][]> {\r\n    const qwertyRowLengths = [14, 14, 13, 12, 3]; // Number of keys per QWERTY row\r\n\r\n    const processedLayout: Record<string, (string | number)[][]> = { default: [], shift: [] };\r\n\r\n    for (const type of [\"default\", \"shift\"]) {\r\n      if (!layout[type]) continue; // Skip if layout type is missing\r\n\r\n      const rows = layout[type].map((row) => row.split(\" \"));\r\n\r\n      for (let i = 0; i < qwertyRowLengths.length; i++) {\r\n        processedLayout[type][i] = rows[i] ? [...rows[i]] : [];\r\n        while (processedLayout[type][i].length < qwertyRowLengths[i]) {\r\n          processedLayout[type][i].push(-1); // Fill missing spots\r\n        }\r\n      }\r\n    }\r\n\r\n    return processedLayout;\r\n  }\r\n\r\n  /**\r\n   * Maps a layout object to event codes\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with event codes\r\n   */\r\n\r\n  mapLayoutToEventCodes(layout: Record<string, (string | number)[][]>): Record<string, LayoutKeyMapping> {\r\n    const mappedLayout: Record<string, LayoutKeyMapping> = {};\r\n\r\n    const qwertyRows = [\r\n      [\r\n        \"Backquote\",\r\n        \"Digit1\",\r\n        \"Digit2\",\r\n        \"Digit3\",\r\n        \"Digit4\",\r\n        \"Digit5\",\r\n        \"Digit6\",\r\n        \"Digit7\",\r\n        \"Digit8\",\r\n        \"Digit9\",\r\n        \"Digit0\",\r\n        \"Minus\",\r\n        \"Equal\",\r\n        \"Backspace\",\r\n      ],\r\n      [\r\n        \"Tab\",\r\n        \"KeyQ\",\r\n        \"KeyW\",\r\n        \"KeyE\",\r\n        \"KeyR\",\r\n        \"KeyT\",\r\n        \"KeyY\",\r\n        \"KeyU\",\r\n        \"KeyI\",\r\n        \"KeyO\",\r\n        \"KeyP\",\r\n        \"BracketLeft\",\r\n        \"BracketRight\",\r\n        \"Backslash\",\r\n      ],\r\n      [\r\n        \"CapsLock\",\r\n        \"KeyA\",\r\n        \"KeyS\",\r\n        \"KeyD\",\r\n        \"KeyF\",\r\n        \"KeyG\",\r\n        \"KeyH\",\r\n        \"KeyJ\",\r\n        \"KeyK\",\r\n        \"KeyL\",\r\n        \"Semicolon\",\r\n        \"Quote\",\r\n        \"Enter\",\r\n      ],\r\n      [\"ShiftLeft\", \"KeyZ\", \"KeyX\", \"KeyC\", \"KeyV\", \"KeyB\", \"KeyN\", \"KeyM\", \"Comma\", \"Period\", \"Slash\", \"ShiftRight\"],\r\n      [\"ControlLeft\", \"AltLeft\", \"Space\"],\r\n    ];\r\n\r\n    for (let rowIndex = 0; rowIndex < qwertyRows.length; rowIndex++) {\r\n      for (let colIndex = 0; colIndex < qwertyRows[rowIndex].length; colIndex++) {\r\n        const eventCode = qwertyRows[rowIndex][colIndex];\r\n        const normalKey = layout.default[rowIndex][colIndex] ?? \"\";\r\n        const shiftKey = layout.shift[rowIndex][colIndex] ?? \"\";\r\n\r\n        mappedLayout[eventCode] = {\r\n          normal: normalKey !== -1 ? normalKey : \"\",\r\n          shift: shiftKey !== -1 ? shiftKey : \"\",\r\n        };\r\n      }\r\n    }\r\n\r\n    return mappedLayout;\r\n  }\r\n\r\n  isModifierKey = (e: KeyboardEvent): boolean => {\r\n    return (\r\n      e.altKey ||\r\n      e.ctrlKey ||\r\n      e.shiftKey ||\r\n      [\"Tab\", \"CapsLock\", \"Esc\", \"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].includes(\r\n        e.code || e.key || this.keyCodeToKey(e?.keyCode)\r\n      )\r\n    );\r\n  };\r\n}\r\n\r\nexport default PhysicalKeyboard;\r\n","import { KeyboardLayoutObject } from \"../interfaces\";\r\n\r\nexport const getDefaultLayout = (): KeyboardLayoutObject => {\r\n  return {\r\n    default: [\r\n      \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\r\n      \"{tab} q w e r t y u i o p [ ] \\\\\",\r\n      \"{lock} a s d f g h j k l ; ' {enter}\",\r\n      \"{shift} z x c v b n m , . / {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n    shift: [\r\n      \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\r\n      \"{tab} Q W E R T Y U I O P { } |\",\r\n      '{lock} A S D F G H J K L : \" {enter}',\r\n      \"{shift} Z X C V B N M < > ? {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n  };\r\n};\r\n","import \"./css/CandidateBox.css\";\r\n\r\nimport Utilities from \"../services/Utilities\";\r\nimport {\r\n  CandidateBoxParams,\r\n  CandidateBoxRenderParams,\r\n  CandidateBoxShowParams,\r\n  KeyboardOptions,\r\n} from \"./../interfaces\";\r\n\r\nclass CandidateBox {\r\n  utilities: Utilities;\r\n  options: KeyboardOptions;\r\n  candidateBoxElement!: HTMLDivElement;\r\n  pageIndex = 0;\r\n  pageSize: number;\r\n\r\n  constructor({ utilities, options }: CandidateBoxParams) {\r\n    this.utilities = utilities;\r\n    this.options = options;\r\n    Utilities.bindMethods(CandidateBox, this);\r\n    this.pageSize = this.utilities.getOptions().layoutCandidatesPageSize || 5;\r\n  }\r\n\r\n  destroy() {\r\n    if (this.candidateBoxElement) {\r\n      this.candidateBoxElement.remove();\r\n      this.pageIndex = 0;\r\n    }\r\n  }\r\n\r\n  show({\r\n    candidateValue,\r\n    targetElement,\r\n    onSelect,\r\n  }: CandidateBoxShowParams): void {\r\n    if (!candidateValue || !candidateValue.length) {\r\n      return;\r\n    }\r\n\r\n    const candidateListPages = this.utilities.chunkArray(\r\n      candidateValue.split(\" \"),\r\n      this.pageSize\r\n    );\r\n\r\n    this.renderPage({\r\n      candidateListPages,\r\n      targetElement,\r\n      pageIndex: this.pageIndex,\r\n      nbPages: candidateListPages.length,\r\n      onItemSelected: (selectedCandidate: string, e: MouseEvent) => {\r\n        onSelect(selectedCandidate, e);\r\n        this.destroy();\r\n      },\r\n    });\r\n  }\r\n\r\n  renderPage({\r\n    candidateListPages,\r\n    targetElement,\r\n    pageIndex,\r\n    nbPages,\r\n    onItemSelected,\r\n  }: CandidateBoxRenderParams) {\r\n    // Remove current candidate box, if any\r\n    this.candidateBoxElement?.remove();\r\n\r\n    // Create candidate box element\r\n    this.candidateBoxElement = document.createElement(\"div\");\r\n    this.candidateBoxElement.className = \"hg-candidate-box\";\r\n\r\n    // Candidate box list\r\n    const candidateListULElement = document.createElement(\"ul\");\r\n    candidateListULElement.className = \"hg-candidate-box-list\";\r\n\r\n    // Create Candidate box list items\r\n    candidateListPages[pageIndex].forEach((candidateListItem) => {\r\n      const candidateListLIElement = document.createElement(\"li\");\r\n      const getMouseEvent = () => {\r\n        const mouseEvent = new (this.options.useTouchEvents ? TouchEvent : MouseEvent)(\"click\");\r\n        Object.defineProperty(mouseEvent, \"target\", {\r\n          value: candidateListLIElement,\r\n        });\r\n        return mouseEvent;\r\n      };\r\n\r\n      candidateListLIElement.className = \"hg-candidate-box-list-item\";\r\n      candidateListLIElement.innerHTML = this.options.display?.[candidateListItem] || candidateListItem;\r\n\r\n      if(this.options.useTouchEvents) {\r\n        candidateListLIElement.ontouchstart = (e: any) =>\r\n          onItemSelected(candidateListItem, e || getMouseEvent());\r\n      } else {\r\n        candidateListLIElement.onclick = (e = getMouseEvent() as MouseEvent) =>\r\n          onItemSelected(candidateListItem, e);\r\n      }\r\n\r\n      // Append list item to ul\r\n      candidateListULElement.appendChild(candidateListLIElement);\r\n    });\r\n\r\n    // Add previous button\r\n    const isPrevBtnElementActive = pageIndex > 0;\r\n    const prevBtnElement = document.createElement(\"div\");\r\n    prevBtnElement.classList.add(\"hg-candidate-box-prev\");\r\n    isPrevBtnElementActive &&\r\n      prevBtnElement.classList.add(\"hg-candidate-box-btn-active\");\r\n\r\n    const prevBtnElementClickAction = () => {\r\n      if (!isPrevBtnElementActive) return;\r\n      this.renderPage({\r\n        candidateListPages,\r\n        targetElement,\r\n        pageIndex: pageIndex - 1,\r\n        nbPages,\r\n        onItemSelected,\r\n      });\r\n    };\r\n\r\n    if(this.options.useTouchEvents) {\r\n      prevBtnElement.ontouchstart = prevBtnElementClickAction;\r\n    } else {\r\n      prevBtnElement.onclick = prevBtnElementClickAction;\r\n    }\r\n    \r\n    this.candidateBoxElement.appendChild(prevBtnElement);\r\n\r\n    // Add elements to container\r\n    this.candidateBoxElement.appendChild(candidateListULElement);\r\n\r\n    // Add next button\r\n    const isNextBtnElementActive = pageIndex < nbPages - 1;\r\n    const nextBtnElement = document.createElement(\"div\");\r\n    nextBtnElement.classList.add(\"hg-candidate-box-next\");\r\n    isNextBtnElementActive &&\r\n      nextBtnElement.classList.add(\"hg-candidate-box-btn-active\");\r\n\r\n    const nextBtnElementClickAction = () => {\r\n      if (!isNextBtnElementActive) return;\r\n      this.renderPage({\r\n        candidateListPages,\r\n        targetElement,\r\n        pageIndex: pageIndex + 1,\r\n        nbPages,\r\n        onItemSelected,\r\n      });\r\n    };\r\n\r\n    if(this.options.useTouchEvents) {\r\n      nextBtnElement.ontouchstart = nextBtnElementClickAction;\r\n    } else {\r\n      nextBtnElement.onclick = nextBtnElementClickAction;\r\n    }\r\n\r\n    this.candidateBoxElement.appendChild(nextBtnElement);\r\n\r\n    // Append candidate box to target element\r\n    targetElement.prepend(this.candidateBoxElement);\r\n  }\r\n}\r\n\r\nexport default CandidateBox;\r\n","import \"./css/Keyboard.css\";\r\n\r\nimport { getDefaultLayout } from \"../services/KeyboardLayout\";\r\nimport PhysicalKeyboard from \"../services/PhysicalKeyboard\";\r\nimport Utilities from \"../services/Utilities\";\r\nimport {\r\n  KeyboardOptions,\r\n  KeyboardInput,\r\n  KeyboardButtonElements,\r\n  KeyboardHandlerEvent,\r\n  KeyboardElement,\r\n  SKWindow,\r\n} from \"../interfaces\";\r\nimport CandidateBox from \"./CandidateBox\";\r\n\r\n/**\r\n * Root class for simple-keyboard.\r\n * This class:\r\n * - Parses the options\r\n * - Renders the rows and buttons\r\n * - Handles button functionality\r\n */\r\nclass SimpleKeyboard {\r\n  input!: KeyboardInput;\r\n  options!: KeyboardOptions;\r\n  utilities!: Utilities;\r\n  caretPosition!: number | null;\r\n  caretPositionEnd!: number | null;\r\n  keyboardDOM!: KeyboardElement;\r\n  keyboardPluginClasses!: string;\r\n  keyboardDOMClass!: string;\r\n  buttonElements!: KeyboardButtonElements;\r\n  currentInstanceName!: string;\r\n  allKeyboardInstances!: { [key: string]: SimpleKeyboard };\r\n  keyboardInstanceNames!: string[];\r\n  isFirstKeyboardInstance!: boolean;\r\n  physicalKeyboard!: PhysicalKeyboard;\r\n  modules!: { [key: string]: any };\r\n  activeButtonClass!: string;\r\n  holdInteractionTimeout!: number;\r\n  holdTimeout!: number;\r\n  isMouseHold!: boolean;\r\n  initialized!: boolean;\r\n  candidateBox!: CandidateBox | null;\r\n  keyboardRowsDOM!: KeyboardElement;\r\n  defaultName = \"default\";\r\n  activeInputElement: HTMLInputElement | HTMLTextAreaElement | null = null;\r\n  listenersAdded = false;\r\n\r\n  /**\r\n   * Creates an instance of SimpleKeyboard\r\n   * @param {Array} selectorOrOptions If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\r\n   */\r\n  constructor(selectorOrOptions?: string | HTMLDivElement | KeyboardOptions, keyboardOptions?: KeyboardOptions) {\r\n    if (typeof window === \"undefined\") return;\r\n\r\n    const { keyboardDOMClass, keyboardDOM, options = {} } = this.handleParams(selectorOrOptions, keyboardOptions);\r\n\r\n    /**\r\n     * Initializing Utilities\r\n     */\r\n    this.utilities = new Utilities({\r\n      getOptions: this.getOptions,\r\n      getCaretPosition: this.getCaretPosition,\r\n      getCaretPositionEnd: this.getCaretPositionEnd,\r\n      dispatch: this.dispatch,\r\n    });\r\n\r\n    /**\r\n     * Caret position\r\n     */\r\n    this.caretPosition = null;\r\n\r\n    /**\r\n     * Caret position end\r\n     */\r\n    this.caretPositionEnd = null;\r\n\r\n    /**\r\n     * Processing options\r\n     */\r\n    this.keyboardDOM = keyboardDOM;\r\n\r\n    /**\r\n     * @type {object}\r\n     * @property {object} layout Modify the keyboard layout.\r\n     * @property {string} layoutName Specifies which layout should be used.\r\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\r\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\r\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\r\n     * @property {array} buttonTheme A prop to add your own css classes to one or several buttons.\r\n     * @property {array} buttonAttributes A prop to add your own attributes to one or several buttons.\r\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\r\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\r\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\r\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\r\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\r\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\r\n     * @property {boolean} physicalKeyboardHighlightPress Presses keys highlighted by physicalKeyboardHighlight\r\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\r\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\r\n     * @property {boolean} physicalKeyboardHighlightPressUseClick Whether physicalKeyboardHighlightPress should use clicks to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPressUsePointerEvents Whether physicalKeyboardHighlightPress should use pointer events to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPreventDefault Whether physicalKeyboardHighlight should use preventDefault to disable default browser actions.\r\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\r\n     * @property {boolean} preventMouseUpDefault Calling preventDefault for the mouseup events.\r\n     * @property {boolean} stopMouseDownPropagation Stops pointer down events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {boolean} stopMouseUpPropagation Stops pointer up events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\r\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\r\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n     * @property {function(keyboard: Keyboard):void} beforeInputUpdate Perform an action before any input change\r\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\r\n     * @property {boolean} useButtonTag Render buttons as a button element instead of a div element.\r\n     * @property {boolean} disableCaretPositioning A prop to ensure characters are always be added/removed at the end of the string.\r\n     * @property {object} inputPattern Restrains input(s) change to the defined regular expression pattern.\r\n     * @property {boolean} useTouchEvents Instructs simple-keyboard to use touch events instead of click events.\r\n     * @property {boolean} autoUseTouchEvents Enable useTouchEvents automatically when touch device is detected.\r\n     * @property {boolean} useMouseEvents Opt out of PointerEvents handling, falling back to the prior mouse event logic.\r\n     * @property {function} destroy Clears keyboard listeners and DOM elements.\r\n     * @property {boolean} disableButtonHold Disable button hold action.\r\n     * @property {boolean} rtl Adds unicode right-to-left control characters to input return values.\r\n     * @property {function} onKeyReleased Executes the callback function on key release.\r\n     * @property {array} modules Module classes to be loaded by simple-keyboard.\r\n     * @property {boolean} enableLayoutCandidates Enable input method editor candidate list support.\r\n     * @property {object} excludeFromLayout Buttons to exclude from layout\r\n     * @property {number} layoutCandidatesPageSize Determines size of layout candidate list\r\n     * @property {boolean} layoutCandidatesCaseSensitiveMatch Determines whether layout candidate match should be case sensitive.\r\n     * @property {boolean} disableCandidateNormalization Disables the automatic normalization for selected layout candidates\r\n     * @property {boolean} enableLayoutCandidatesKeyPress Enables onKeyPress triggering for layoutCandidate items\r\n     * @property {boolean} updateCaretOnSelectionChange Updates caret when selectionchange event is fired\r\n     * @property {boolean} clickOnMouseDown When useMouseEvents is enabled, this option allows you to trigger a button click event on mousedown\r\n     */\r\n    this.options = {\r\n      layoutName: \"default\",\r\n      theme: \"hg-theme-default\",\r\n      inputName: \"default\",\r\n      preventMouseDownDefault: false,\r\n      enableLayoutCandidates: true,\r\n      excludeFromLayout: {},\r\n      ...options,\r\n    };\r\n\r\n    /**\r\n     * @type {object} Classes identifying loaded plugins\r\n     */\r\n    this.keyboardPluginClasses = \"\";\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(SimpleKeyboard, this);\r\n\r\n    /**\r\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\r\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\r\n     * @example\r\n     * // To get entered input\r\n     * const input = keyboard.getInput();\r\n     *\r\n     * // To clear entered input.\r\n     * keyboard.clearInput();\r\n     *\r\n     * @type {object}\r\n     * @property {object} default Default SimpleKeyboard internal input.\r\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\r\n     */\r\n    const { inputName = this.defaultName } = this.options;\r\n    this.input = {};\r\n    this.input[inputName] = \"\";\r\n\r\n    /**\r\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\r\n     */\r\n    this.keyboardDOMClass = keyboardDOMClass;\r\n\r\n    /**\r\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\r\n     */\r\n    this.buttonElements = {};\r\n\r\n    /**\r\n     * Simple-keyboard Instances\r\n     * This enables multiple simple-keyboard support with easier management\r\n     */\r\n    if (!(window as SKWindow)[\"SimpleKeyboardInstances\"]) (window as SKWindow)[\"SimpleKeyboardInstances\"] = {};\r\n\r\n    this.currentInstanceName = this.utilities.camelCase(this.keyboardDOMClass);\r\n    (window as SKWindow)[\"SimpleKeyboardInstances\"][this.currentInstanceName] = this;\r\n\r\n    /**\r\n     * Instance vars\r\n     */\r\n    this.allKeyboardInstances = (window as SKWindow)[\"SimpleKeyboardInstances\"];\r\n    this.keyboardInstanceNames = Object.keys((window as SKWindow)[\"SimpleKeyboardInstances\"]);\r\n    this.isFirstKeyboardInstance = this.keyboardInstanceNames[0] === this.currentInstanceName;\r\n\r\n    /**\r\n     * Physical Keyboard support\r\n     */\r\n    this.physicalKeyboard = new PhysicalKeyboard({\r\n      dispatch: this.dispatch,\r\n      getOptions: this.getOptions,\r\n    });\r\n\r\n    /**\r\n     * Initializing CandidateBox\r\n     */\r\n    this.candidateBox = this.options.enableLayoutCandidates\r\n      ? new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        })\r\n      : null;\r\n\r\n    /**\r\n     * Rendering keyboard\r\n     */\r\n    if (this.keyboardDOM) this.render();\r\n    else {\r\n      console.warn(`\".${keyboardDOMClass}\" was not found in the DOM.`);\r\n      throw new Error(\"KEYBOARD_DOM_ERROR\");\r\n    }\r\n\r\n    /**\r\n     * Modules\r\n     */\r\n    this.modules = {};\r\n    this.loadModules();\r\n  }\r\n\r\n  /**\r\n   * parseParams\r\n   */\r\n  handleParams = (\r\n    selectorOrOptions?: string | HTMLDivElement | KeyboardOptions,\r\n    keyboardOptions?: KeyboardOptions\r\n  ): {\r\n    keyboardDOMClass: string;\r\n    keyboardDOM: KeyboardElement;\r\n    options: Partial<KeyboardOptions | undefined>;\r\n  } => {\r\n    let keyboardDOMClass;\r\n    let keyboardDOM;\r\n    let options;\r\n\r\n    /**\r\n     * If first parameter is a string:\r\n     * Consider it as an element's class\r\n     */\r\n    if (typeof selectorOrOptions === \"string\") {\r\n      keyboardDOMClass = selectorOrOptions.split(\".\").join(\"\");\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * If first parameter is an KeyboardElement\r\n       * Consider it as the keyboard DOM element\r\n       */\r\n    } else if (selectorOrOptions instanceof HTMLDivElement) {\r\n      /**\r\n       * This element must have a class, otherwise throw\r\n       */\r\n      if (!selectorOrOptions.className) {\r\n        console.warn(\"Any DOM element passed as parameter must have a class.\");\r\n        throw new Error(\"KEYBOARD_DOM_CLASS_ERROR\");\r\n      }\r\n\r\n      keyboardDOMClass = selectorOrOptions.className.split(\" \")[0];\r\n      keyboardDOM = selectorOrOptions;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * Otherwise, search for .simple-keyboard DOM element\r\n       */\r\n    } else {\r\n      keyboardDOMClass = \"simple-keyboard\";\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = selectorOrOptions;\r\n    }\r\n\r\n    return {\r\n      keyboardDOMClass,\r\n      keyboardDOM,\r\n      options,\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Getters\r\n   */\r\n  getOptions = (): KeyboardOptions => this.options;\r\n  getCaretPosition = (): number | null => this.caretPosition;\r\n  getCaretPositionEnd = (): number | null => this.caretPositionEnd;\r\n\r\n  /**\r\n   * Changes the internal caret position\r\n   * @param {number} position The caret's start position\r\n   * @param {number} positionEnd The caret's end position\r\n   */\r\n  setCaretPosition(position: number | null, endPosition = position): void {\r\n    this.caretPosition = position;\r\n    this.caretPositionEnd = endPosition;\r\n  }\r\n\r\n  /**\r\n   * Retrieve the candidates for a given input\r\n   * @param input The input string to check\r\n   */\r\n  getInputCandidates(input: string): { candidateKey: string; candidateValue: string } | Record<string, never> {\r\n    const { layoutCandidates: layoutCandidatesObj, layoutCandidatesCaseSensitiveMatch } = this.options;\r\n\r\n    if (!layoutCandidatesObj || typeof layoutCandidatesObj !== \"object\") {\r\n      return {};\r\n    }\r\n\r\n    const layoutCandidates = Object.keys(layoutCandidatesObj).filter((layoutCandidate: string) => {\r\n      const inputSubstr = input.substring(0, this.getCaretPositionEnd() || 0) || input;\r\n      const regexp = new RegExp(\r\n        `${this.utilities.escapeRegex(layoutCandidate)}$`,\r\n        layoutCandidatesCaseSensitiveMatch ? \"g\" : \"gi\"\r\n      );\r\n      const matches = [...inputSubstr.matchAll(regexp)];\r\n      return !!matches.length;\r\n    });\r\n\r\n    if (layoutCandidates.length > 1) {\r\n      const candidateKey = layoutCandidates.sort((a, b) => b.length - a.length)[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else if (layoutCandidates.length) {\r\n      const candidateKey = layoutCandidates[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows a suggestion box with a list of candidate words\r\n   * @param candidates The chosen candidates string as defined in the layoutCandidates option\r\n   * @param targetElement The element next to which the candidates box will be shown\r\n   */\r\n  showCandidatesBox(candidateKey: string, candidateValue: string, targetElement: KeyboardElement): void {\r\n    if (this.candidateBox) {\r\n      this.candidateBox.show({\r\n        candidateValue,\r\n        targetElement,\r\n        onSelect: (selectedCandidate: string, e: MouseEvent) => {\r\n          const { layoutCandidatesCaseSensitiveMatch, disableCandidateNormalization, enableLayoutCandidatesKeyPress } =\r\n            this.options;\r\n\r\n          let candidateStr = selectedCandidate;\r\n\r\n          if (!disableCandidateNormalization) {\r\n            /**\r\n             * Making sure that our suggestions are not composed characters\r\n             */\r\n            candidateStr = selectedCandidate.normalize(\"NFD\");\r\n          }\r\n\r\n          /**\r\n           * Perform an action before any input change\r\n           */\r\n          if (typeof this.options.beforeInputUpdate === \"function\") {\r\n            this.options.beforeInputUpdate(this);\r\n          }\r\n\r\n          const currentInput = this.getInput(this.options.inputName, true);\r\n          const initialCaretPosition = this.getCaretPositionEnd() || 0;\r\n          const inputSubstr = currentInput.substring(0, initialCaretPosition || 0) || currentInput;\r\n\r\n          const regexp = new RegExp(\r\n            `${this.utilities.escapeRegex(candidateKey)}$`,\r\n            layoutCandidatesCaseSensitiveMatch ? \"g\" : \"gi\"\r\n          );\r\n          const newInputSubstr = inputSubstr.replace(regexp, candidateStr);\r\n          const newInput = currentInput.replace(inputSubstr, newInputSubstr);\r\n\r\n          const caretPositionDiff = newInputSubstr.length - inputSubstr.length;\r\n          let newCaretPosition = (initialCaretPosition || currentInput.length) + caretPositionDiff;\r\n\r\n          if (newCaretPosition < 0) newCaretPosition = 0;\r\n\r\n          this.setInput(newInput, this.options.inputName, true);\r\n          this.setCaretPosition(newCaretPosition);\r\n\r\n          /**\r\n           * Calling onKeyPress\r\n           * We pass in the composed candidate instead of the decomposed one\r\n           * To prevent confusion for users\r\n           */\r\n          if (enableLayoutCandidatesKeyPress && typeof this.options.onKeyPress === \"function\") {\r\n            this.options.onKeyPress(selectedCandidate, e);\r\n          }\r\n\r\n          if (typeof this.options.onChange === \"function\") {\r\n            this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n          }\r\n\r\n          /**\r\n           * Calling onChangeAll\r\n           */\r\n          if (typeof this.options.onChangeAll === \"function\") this.options.onChangeAll(this.getAllInputs(), e);\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles clicks made to keyboard buttons\r\n   * @param  {string} button The button's layout name.\r\n   */\r\n  handleButtonClicked(button: string, e?: KeyboardHandlerEvent): void {\r\n    const { inputName = this.defaultName, debug } = this.options;\r\n    /**\r\n     * Ignoring placeholder buttons\r\n     */\r\n    if (button === \"{//}\") return;\r\n\r\n    /**\r\n     * Creating inputName if it doesn't exist\r\n     */\r\n    if (!this.input[inputName]) this.input[inputName] = \"\";\r\n\r\n    /**\r\n     * Perform an action before any input change\r\n     */\r\n    if (typeof this.options.beforeInputUpdate === \"function\") {\r\n      this.options.beforeInputUpdate(this);\r\n    }\r\n\r\n    /**\r\n     * Calculating new input\r\n     */\r\n    const updatedInput = this.utilities.getUpdatedInput(\r\n      button,\r\n      this.input[inputName],\r\n      this.caretPosition,\r\n      this.caretPositionEnd\r\n    );\r\n\r\n    /**\r\n     * EDGE CASE: Check for whole input selection changes that will yield same updatedInput\r\n     */\r\n    if (this.utilities.isStandardButton(button) && this.activeInputElement) {\r\n      const isEntireInputSelection =\r\n        this.input[inputName] &&\r\n        this.input[inputName] === updatedInput &&\r\n        this.caretPosition === 0 &&\r\n        this.caretPositionEnd === updatedInput.length;\r\n\r\n      if (isEntireInputSelection) {\r\n        this.setInput(\"\", this.options.inputName, true);\r\n        this.setCaretPosition(0);\r\n        this.activeInputElement.value = \"\";\r\n        this.activeInputElement.setSelectionRange(0, 0);\r\n        this.handleButtonClicked(button, e);\r\n        return;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Calling onKeyPress\r\n     */\r\n    if (typeof this.options.onKeyPress === \"function\") this.options.onKeyPress(button, e);\r\n\r\n    if (\r\n      // If input will change as a result of this button press\r\n      this.input[inputName] !== updatedInput &&\r\n      // This pertains to the \"inputPattern\" option:\r\n      // If inputPattern isn't set\r\n      (!this.options.inputPattern ||\r\n        // Or, if it is set and if the pattern is valid - we proceed.\r\n        (this.options.inputPattern && this.inputPatternIsValid(updatedInput)))\r\n    ) {\r\n      /**\r\n       * If maxLength and handleMaxLength yield true, halting\r\n       */\r\n      if (this.options.maxLength && this.utilities.handleMaxLength(this.input, updatedInput)) {\r\n        return;\r\n      }\r\n\r\n      /**\r\n       * Updating input\r\n       */\r\n      const newInputValue = this.utilities.getUpdatedInput(\r\n        button,\r\n        this.input[inputName],\r\n        this.caretPosition,\r\n        this.caretPositionEnd,\r\n        true\r\n      );\r\n\r\n      this.setInput(newInputValue, this.options.inputName, true);\r\n\r\n      if (debug) console.log(\"Input changed:\", this.getAllInputs());\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          \"Caret at: \",\r\n          this.getCaretPosition(),\r\n          this.getCaretPositionEnd(),\r\n          `(${this.keyboardDOMClass})`,\r\n          e?.type\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Enforce syncInstanceInputs, if set\r\n       */\r\n      if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n\r\n      /**\r\n       * Calling onChange\r\n       */\r\n      if (typeof this.options.onChange === \"function\")\r\n        this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n\r\n      /**\r\n       * Calling onChangeAll\r\n       */\r\n      if (typeof this.options.onChangeAll === \"function\") this.options.onChangeAll(this.getAllInputs(), e);\r\n\r\n      /**\r\n       * Check if this new input has candidates (suggested words)\r\n       */\r\n      if (e?.target && this.options.enableLayoutCandidates) {\r\n        const { candidateKey, candidateValue } = this.getInputCandidates(updatedInput);\r\n\r\n        if (candidateKey && candidateValue) {\r\n          this.showCandidatesBox(candidateKey, candidateValue, this.keyboardDOM);\r\n        } else {\r\n          this.candidateBox?.destroy();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * After a button is clicked the selection (if any) will disappear\r\n     * we should reflect this in our state, as applicable\r\n     */\r\n    if (this.caretPositionEnd && this.caretPosition !== this.caretPositionEnd) {\r\n      this.setCaretPosition(this.caretPositionEnd, this.caretPositionEnd);\r\n\r\n      if (this.activeInputElement) {\r\n        this.activeInputElement.setSelectionRange(this.caretPositionEnd, this.caretPositionEnd);\r\n      }\r\n\r\n      if (this.options.debug) {\r\n        console.log(\"Caret position aligned\", this.caretPosition);\r\n      }\r\n    }\r\n\r\n    if (debug) {\r\n      console.log(\"Key pressed:\", button);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get mouse hold state\r\n   */\r\n  getMouseHold() {\r\n    return this.isMouseHold;\r\n  }\r\n\r\n  /**\r\n   * Mark mouse hold state as set\r\n   */\r\n  setMouseHold(value: boolean) {\r\n    if (this.options.syncInstanceInputs) {\r\n      this.dispatch((instance: SimpleKeyboard) => {\r\n        instance.isMouseHold = value;\r\n      });\r\n    } else {\r\n      this.isMouseHold = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mousedown\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonMouseDown(button: string, e: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseDownDefault) e.preventDefault();\r\n      if (this.options.stopMouseDownPropagation) e.stopPropagation();\r\n\r\n      /**\r\n       * Add active class\r\n       */\r\n      e.target.classList.add(this.activeButtonClass);\r\n    }\r\n\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n    if (this.holdTimeout) clearTimeout(this.holdTimeout);\r\n\r\n    /**\r\n     * @type {boolean} Whether the mouse is being held onKeyPress\r\n     */\r\n    this.setMouseHold(true);\r\n\r\n    /**\r\n     * @type {object} Time to wait until a key hold is detected\r\n     */\r\n    if (!this.options.disableButtonHold) {\r\n      this.holdTimeout = window.setTimeout(() => {\r\n        if (\r\n          (this.getMouseHold() &&\r\n            // TODO: This needs to be configurable through options\r\n            ((!button.includes(\"{\") && !button.includes(\"}\")) ||\r\n              button === \"{delete}\" ||\r\n              button === \"{backspace}\" ||\r\n              button === \"{bksp}\" ||\r\n              button === \"{space}\" ||\r\n              button === \"{tab}\")) ||\r\n          button === \"{arrowright}\" ||\r\n          button === \"{arrowleft}\" ||\r\n          button === \"{arrowup}\" ||\r\n          button === \"{arrowdown}\"\r\n        ) {\r\n          if (this.options.debug) console.log(\"Button held:\", button);\r\n\r\n          this.handleButtonHold(button);\r\n        }\r\n        clearTimeout(this.holdTimeout);\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mouseup\r\n   */\r\n  handleButtonMouseUp(button?: string, e?: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseUpDefault && e.preventDefault) e.preventDefault();\r\n      if (this.options.stopMouseUpPropagation && e.stopPropagation) e.stopPropagation();\r\n\r\n      /* istanbul ignore next */\r\n      const isKeyboard =\r\n        e.target === this.keyboardDOM ||\r\n        (e.target && this.keyboardDOM.contains(e.target)) ||\r\n        (this.candidateBox &&\r\n          this.candidateBox.candidateBoxElement &&\r\n          (e.target === this.candidateBox.candidateBoxElement ||\r\n            (e.target && this.candidateBox.candidateBoxElement.contains(e.target))));\r\n\r\n      /**\r\n       * On click outside, remove candidateBox\r\n       */\r\n      if (!isKeyboard && this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Remove active class\r\n     */\r\n    this.recurseButtons((buttonElement: Element) => {\r\n      buttonElement.classList.remove(this.activeButtonClass);\r\n    });\r\n\r\n    this.setMouseHold(false);\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * Calling onKeyReleased\r\n     */\r\n    if (button && typeof this.options.onKeyReleased === \"function\") this.options.onKeyReleased(button, e);\r\n  }\r\n\r\n  /**\r\n   * Handles container mousedown\r\n   */\r\n  handleKeyboardContainerMouseDown(e: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Handle event options\r\n     */\r\n    if (this.options.preventMouseDownDefault) e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Handles button hold\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonHold(button: string): void {\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * @type {object} Timeout dictating the speed of key hold iterations\r\n     */\r\n    this.holdInteractionTimeout = window.setTimeout(() => {\r\n      if (this.getMouseHold()) {\r\n        this.handleButtonClicked(button);\r\n        this.handleButtonHold(button);\r\n      } else {\r\n        clearTimeout(this.holdInteractionTimeout);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances (if you have several instances).\r\n   */\r\n  syncInstanceInputs(): void {\r\n    this.dispatch((instance: SimpleKeyboard) => {\r\n      instance.replaceInput(this.input);\r\n      instance.setCaretPosition(this.caretPosition, this.caretPositionEnd);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the keyboard’s input.\r\n   * @param {string} [inputName] optional - the internal input to select\r\n   */\r\n  clearInput(inputName: string = this.options.inputName || this.defaultName): void {\r\n    this.input[inputName] = \"\";\r\n\r\n    /**\r\n     * Reset caretPosition\r\n     */\r\n    this.setCaretPosition(0);\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Get the keyboard’s input (You can also get it from the onChange prop).\r\n   * @param  {string} [inputName] optional - the internal input to select\r\n   */\r\n  getInput(inputName: string = this.options.inputName || this.defaultName, skipSync = false): string {\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs && !skipSync) this.syncInstanceInputs();\r\n\r\n    if (this.options.rtl) {\r\n      // Remove existing control chars\r\n      const inputWithoutRTLControl = this.input[inputName].replace(\"\\u202B\", \"\").replace(\"\\u202C\", \"\");\r\n\r\n      return \"\\u202B\" + inputWithoutRTLControl + \"\\u202C\";\r\n    } else {\r\n      return this.input[inputName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all simple-keyboard inputs\r\n   */\r\n  getAllInputs(): KeyboardInput {\r\n    const output = {} as KeyboardInput;\r\n    const inputNames = Object.keys(this.input);\r\n\r\n    inputNames.forEach((inputName) => {\r\n      output[inputName] = this.getInput(inputName, true);\r\n    });\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Set the keyboard’s input.\r\n   * @param  {string} input the input value\r\n   * @param  {string} inputName optional - the internal input to select\r\n   */\r\n  setInput(input: string, inputName: string = this.options.inputName || this.defaultName, skipSync?: boolean): void {\r\n    this.input[inputName] = input;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (!skipSync && this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Replace the input object (`keyboard.input`)\r\n   * @param  {object} inputObj The input object\r\n   */\r\n  replaceInput(inputObj: KeyboardInput): void {\r\n    this.input = inputObj;\r\n  }\r\n\r\n  /**\r\n   * Set new option or modify existing ones after initialization.\r\n   * @param  {object} options The options to set\r\n   */\r\n  setOptions(options = {}): void {\r\n    const changedOptions = this.changedOptions(options);\r\n    this.options = Object.assign(this.options, options);\r\n\r\n    if (changedOptions.length) {\r\n      if (this.options.debug) {\r\n        console.log(\"changedOptions\", changedOptions);\r\n      }\r\n\r\n      /**\r\n       * Some option changes require adjustments before re-render\r\n       */\r\n      this.onSetOptions(changedOptions);\r\n\r\n      /**\r\n       * Rendering\r\n       */\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detecting changes to non-function options\r\n   * This allows us to ascertain whether a button re-render is needed\r\n   */\r\n  changedOptions(newOptions: Partial<KeyboardOptions>): string[] {\r\n    return Object.keys(newOptions).filter(\r\n      (optionName) => JSON.stringify(newOptions[optionName]) !== JSON.stringify(this.options[optionName])\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Executing actions depending on changed options\r\n   * @param  {object} options The options to set\r\n   */\r\n  onSetOptions(changedOptions: string[] = []): void {\r\n    /**\r\n     * Changed: layoutName\r\n     */\r\n    if (changedOptions.includes(\"layoutName\")) {\r\n      /**\r\n       * Reset candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Changed: layoutCandidatesPageSize, layoutCandidates\r\n     */\r\n    if (changedOptions.includes(\"layoutCandidatesPageSize\") || changedOptions.includes(\"layoutCandidates\")) {\r\n      /**\r\n       * Reset and recreate candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n        this.candidateBox = new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all keyboard rows and reset keyboard values.\r\n   * Used internally between re-renders.\r\n   */\r\n  resetRows(): void {\r\n    if (this.keyboardRowsDOM) {\r\n      this.keyboardRowsDOM.remove();\r\n    }\r\n\r\n    this.keyboardDOM.className = this.keyboardDOMClass;\r\n    this.keyboardDOM.setAttribute(\"data-skInstance\", this.currentInstanceName);\r\n    this.buttonElements = {};\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\r\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\r\n   */\r\n  // eslint-disable-next-line no-unused-vars\r\n  dispatch(callback: (instance: SimpleKeyboard, key?: string) => void): void {\r\n    if (!(window as SKWindow)[\"SimpleKeyboardInstances\"]) {\r\n      console.warn(`SimpleKeyboardInstances is not defined. Dispatch cannot be called.`);\r\n      throw new Error(\"INSTANCES_VAR_ERROR\");\r\n    }\r\n\r\n    return Object.keys((window as SKWindow)[\"SimpleKeyboardInstances\"]).forEach((key) => {\r\n      callback((window as SKWindow)[\"SimpleKeyboardInstances\"][key], key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  addButtonTheme(buttons: string, className: string): void {\r\n    if (!className || !buttons) return;\r\n\r\n    buttons.split(\" \").forEach((button) => {\r\n      className.split(\" \").forEach((classNameItem) => {\r\n        if (!this.options.buttonTheme) this.options.buttonTheme = [];\r\n\r\n        let classNameFound = false;\r\n\r\n        /**\r\n         * If class is already defined, we add button to class definition\r\n         */\r\n        this.options.buttonTheme.map((buttonTheme) => {\r\n          if (buttonTheme?.class.split(\" \").includes(classNameItem)) {\r\n            classNameFound = true;\r\n\r\n            const buttonThemeArray = buttonTheme.buttons.split(\" \");\r\n            if (!buttonThemeArray.includes(button)) {\r\n              classNameFound = true;\r\n              buttonThemeArray.push(button);\r\n              buttonTheme.buttons = buttonThemeArray.join(\" \");\r\n            }\r\n          }\r\n          return buttonTheme;\r\n        });\r\n\r\n        /**\r\n         * If class is not defined, we create a new entry\r\n         */\r\n        if (!classNameFound) {\r\n          this.options.buttonTheme.push({\r\n            class: classNameItem,\r\n            buttons: buttons,\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  removeButtonTheme(buttons: string, className: string): void {\r\n    /**\r\n     * When called with empty parameters, remove all button themes\r\n     */\r\n    if (!buttons && !className) {\r\n      this.options.buttonTheme = [];\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * If buttons are passed and buttonTheme has items\r\n     */\r\n    if (buttons && Array.isArray(this.options.buttonTheme) && this.options.buttonTheme.length) {\r\n      const buttonArray = buttons.split(\" \");\r\n      buttonArray.forEach((button) => {\r\n        this.options?.buttonTheme?.map((buttonTheme, index) => {\r\n          /**\r\n           * If className is set, we affect the buttons only for that class\r\n           * Otherwise, we afect all classes\r\n           */\r\n          if ((buttonTheme && className && className.includes(buttonTheme.class)) || !className) {\r\n            const filteredButtonArray = buttonTheme?.buttons.split(\" \").filter((item) => item !== button);\r\n\r\n            /**\r\n             * If buttons left, return them, otherwise, remove button Theme\r\n             */\r\n            if (buttonTheme && filteredButtonArray?.length) {\r\n              buttonTheme.buttons = filteredButtonArray.join(\" \");\r\n            } else {\r\n              this.options.buttonTheme?.splice(index, 1);\r\n              buttonTheme = null;\r\n            }\r\n          }\r\n\r\n          return buttonTheme;\r\n        });\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\r\n   * @param  {string} button The button layout name to select\r\n   */\r\n  getButtonElement(button: string): KeyboardElement | KeyboardElement[] | undefined {\r\n    let output;\r\n\r\n    const buttonArr = this.buttonElements[button];\r\n    if (buttonArr) {\r\n      if (buttonArr.length > 1) {\r\n        output = buttonArr;\r\n      } else {\r\n        output = buttonArr[0];\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * This handles the \"inputPattern\" option\r\n   * by checking if the provided inputPattern passes\r\n   */\r\n  inputPatternIsValid(inputVal: string): boolean {\r\n    const inputPatternRaw = this.options.inputPattern;\r\n    let inputPattern;\r\n\r\n    /**\r\n     * Check if input pattern is global or targeted to individual inputs\r\n     */\r\n    if (inputPatternRaw instanceof RegExp) {\r\n      inputPattern = inputPatternRaw;\r\n    } else {\r\n      inputPattern = inputPatternRaw[this.options.inputName || this.defaultName];\r\n    }\r\n\r\n    if (inputPattern && inputVal) {\r\n      const didInputMatch = inputPattern.test(inputVal);\r\n\r\n      if (this.options.debug) {\r\n        console.log(`inputPattern (\"${inputPattern}\"): ${didInputMatch ? \"passed\" : \"did not pass!\"}`);\r\n      }\r\n\r\n      return didInputMatch;\r\n    } else {\r\n      /**\r\n       * inputPattern doesn't seem to be set for the current input, or input is empty. Pass.\r\n       */\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the removal of event listers before initializing new ones\r\n   * This is useful when changing options that require a fresh set of event listeners\r\n   */\r\n  handleKeyDownBound!: (event: KeyboardEvent) => void;\r\n  handleKeyUpBound!: (event: KeyboardEvent) => void;\r\n  handleMouseDownBound!: (event: MouseEvent) => void;\r\n  handleMouseUpBound!: (event: MouseEvent) => void;\r\n  handleTouchEndBound!: (event: TouchEvent) => void;\r\n  handleSelectBound!: (event: Event) => void;\r\n  handleSelectionChangeBound!: (event: Event) => void;\r\n\r\n  removeEventListeners(): void {\r\n    console.log(\"Removing event listeners...\");\r\n\r\n    document.removeEventListener(\"keydown\", this.handleKeyDownBound);\r\n    document.removeEventListener(\"keyup\", this.handleKeyUpBound);\r\n    document.removeEventListener(\"mouseup\", this.handleMouseUpBound);\r\n    document.removeEventListener(\"touchend\", this.handleTouchEndBound);\r\n    document.removeEventListener(\"select\", this.handleSelectBound);\r\n\r\n    if (this.options.updateCaretOnSelectionChange) {\r\n      document.removeEventListener(\"selectionchange\", this.handleSelectionChangeBound);\r\n    }\r\n\r\n    this.listenersAdded = false; // Allow re-adding if necessary\r\n  }\r\n  /**\r\n   * Handles simple-keyboard event listeners\r\n   */\r\n  setEventListeners(): void {\r\n    /**\r\n     * Only first instance should set the event listeners\r\n     */\r\n    if (this.isFirstKeyboardInstance || !this.allKeyboardInstances) {\r\n      if (this.options.debug) {\r\n        console.log(`Caret handling started (${this.keyboardDOMClass})`);\r\n      }\r\n\r\n      const { physicalKeyboardHighlightPreventDefault = false } = this.options;\r\n\r\n      // LPJr: Prevent duplicate listeners\r\n      if (this.listenersAdded) {\r\n        console.log(\"Event listeners already set. Skipping...\");\r\n        return;\r\n      }\r\n\r\n      // Ensure existing listeners are removed before adding new ones\r\n      this.removeEventListeners();\r\n\r\n      // LPJr: moved event listeners to the keyboardDOM element from the document\r\n      this.keyboardDOM.tabIndex = 0;\r\n      this.keyboardDOM.style.outline = \"none\";\r\n\r\n      // LPJr: added named event handlers instead of anonymous functions\r\n      this.handleKeyDownBound = this.handleKeyDown.bind(this);\r\n      this.handleKeyUpBound = this.handleKeyUp.bind(this);\r\n      this.handleMouseUpBound = this.handleMouseUp.bind(this);\r\n      this.handleTouchEndBound = () => this.handleTouchEnd(this);\r\n      this.handleSelectBound = () => this.handleSelect(this);\r\n      this.handleSelectionChangeBound = this.handleSelectionChange.bind(this);\r\n\r\n      document.addEventListener(\"keydown\", this.handleKeyDownBound, physicalKeyboardHighlightPreventDefault);\r\n      document.addEventListener(\"keyup\", this.handleKeyUpBound, physicalKeyboardHighlightPreventDefault);\r\n      document.addEventListener(\"mouseup\", this.handleMouseUpBound);\r\n      document.addEventListener(\"touchend\", this.handleTouchEndBound);\r\n\r\n      if (this.options.updateCaretOnSelectionChange) {\r\n        document.addEventListener(\"selectionchange\", this.handleSelectionChangeBound);\r\n      }\r\n\r\n      document.addEventListener(\"select\", this.handleSelectBound);\r\n\r\n      // Mark listeners as added to prevent duplicates\r\n      this.listenersAdded = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyUp\r\n   */\r\n  handleKeyUp(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyUp(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyDown\r\n   */\r\n  handleKeyDown(event: KeyboardHandlerEvent): void {\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyDown(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: MouseUp\r\n   */\r\n  handleMouseUp(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: TouchEnd\r\n   */\r\n  /* istanbul ignore next */\r\n  handleTouchEnd(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: Select\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelect(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: SelectionChange\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelectionChange(event: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Firefox is not reporting the correct caret position through this event\r\n     * https://github.com/hodgef/simple-keyboard/issues/1839\r\n     */\r\n    if (navigator.userAgent.includes(\"Firefox\")) {\r\n      return;\r\n    }\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Called by {@link setEventListeners} when an event that warrants a cursor position update is triggered\r\n   */\r\n  caretEventHandler(event: KeyboardHandlerEvent): void {\r\n    let targetTagName: string;\r\n    if (event.target.tagName) {\r\n      targetTagName = event.target.tagName.toLowerCase();\r\n    }\r\n\r\n    this.dispatch((instance) => {\r\n      let isKeyboard =\r\n        event.target === instance.keyboardDOM || (event.target && instance.keyboardDOM.contains(event.target));\r\n\r\n      /**\r\n       * If syncInstanceInputs option is enabled, make isKeyboard match any instance\r\n       * not just the current one\r\n       */\r\n      if (this.options.syncInstanceInputs && Array.isArray(event.path)) {\r\n        isKeyboard = event.path.some((item: HTMLElement) => item?.hasAttribute?.(\"data-skInstance\"));\r\n      }\r\n\r\n      if (\r\n        (targetTagName === \"textarea\" ||\r\n          (targetTagName === \"input\" && [\"text\", \"search\", \"url\", \"tel\", \"password\"].includes(event.target.type))) &&\r\n        !instance.options.disableCaretPositioning\r\n      ) {\r\n        /**\r\n         * Tracks current cursor position\r\n         * As keys are pressed, text will be added/removed at that position within the input.\r\n         */\r\n        let selectionStart = event.target.selectionStart;\r\n        let selectionEnd = event.target.selectionEnd;\r\n\r\n        if (instance.options.rtl) {\r\n          selectionStart = instance.utilities.getRtlOffset(selectionStart, instance.getInput());\r\n          selectionEnd = instance.utilities.getRtlOffset(selectionEnd, instance.getInput());\r\n        }\r\n\r\n        instance.setCaretPosition(selectionStart, selectionEnd);\r\n\r\n        /**\r\n         * Tracking current input in order to handle caret positioning edge cases\r\n         */\r\n        instance.activeInputElement = event.target;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(\r\n            \"Caret at: \",\r\n            instance.getCaretPosition(),\r\n            instance.getCaretPositionEnd(),\r\n            event && event.target.tagName.toLowerCase(),\r\n            `(${instance.keyboardDOMClass})`,\r\n            event?.type\r\n          );\r\n        }\r\n      } else if ((instance.options.disableCaretPositioning || !isKeyboard) && event?.type !== \"selectionchange\") {\r\n        /**\r\n         * If we toggled off disableCaretPositioning, we must ensure caretPosition doesn't persist once reactivated.\r\n         */\r\n        instance.setCaretPosition(null);\r\n\r\n        /**\r\n         * Resetting activeInputElement\r\n         */\r\n        instance.activeInputElement = null;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(`Caret position reset due to \"${event?.type}\" event`, event);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute an operation on each button\r\n   */\r\n  recurseButtons(fn: any): void {\r\n    if (!fn) return;\r\n\r\n    Object.keys(this.buttonElements).forEach((buttonName) => this.buttonElements[buttonName].forEach(fn));\r\n  }\r\n\r\n  /**\r\n   * Destroy keyboard listeners and DOM elements\r\n   */\r\n  destroy(): void {\r\n    if (this.options.debug) console.log(`Destroying simple-keyboard instance: ${this.currentInstanceName}`);\r\n\r\n    const { physicalKeyboardHighlightPreventDefault = false } = this.options;\r\n\r\n    /**\r\n     * Remove document listeners\r\n     */\r\n    document.removeEventListener(\"keyup\", this.handleKeyUpBound);\r\n    document.removeEventListener(\"keydown\", this.handleKeyDownBound);\r\n    document.removeEventListener(\"mouseup\", this.handleMouseUpBound);\r\n    document.removeEventListener(\"touchend\", this.handleTouchEndBound);\r\n    document.removeEventListener(\"select\", this.handleSelectBound);\r\n\r\n    // selectionchange is causing caret update issues on Chrome\r\n    // https://github.com/hodgef/simple-keyboard/issues/2346\r\n    if (this.options.updateCaretOnSelectionChange) {\r\n      document.removeEventListener(\"selectionchange\", this.handleSelectionChangeBound);\r\n    }\r\n\r\n    document.onpointerup = null;\r\n    document.ontouchend = null;\r\n    document.ontouchcancel = null;\r\n    document.onmouseup = null;\r\n\r\n    /**\r\n     * Remove buttons\r\n     */\r\n    const deleteButton = (buttonElement: KeyboardElement | null) => {\r\n      if (buttonElement) {\r\n        buttonElement.onpointerdown = null;\r\n        buttonElement.onpointerup = null;\r\n        buttonElement.onpointercancel = null;\r\n        buttonElement.ontouchstart = null;\r\n        buttonElement.ontouchend = null;\r\n        buttonElement.ontouchcancel = null;\r\n        buttonElement.onclick = null;\r\n        buttonElement.onmousedown = null;\r\n        buttonElement.onmouseup = null;\r\n\r\n        buttonElement.remove();\r\n        buttonElement = null;\r\n      }\r\n    };\r\n\r\n    this.recurseButtons(deleteButton);\r\n\r\n    /**\r\n     * Remove wrapper events\r\n     */\r\n    this.keyboardDOM.onpointerdown = null;\r\n    this.keyboardDOM.ontouchstart = null;\r\n    this.keyboardDOM.onmousedown = null;\r\n\r\n    /**\r\n     * Clearing keyboard rows\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Candidate box\r\n     */\r\n    if (this.candidateBox) {\r\n      this.candidateBox.destroy();\r\n      this.candidateBox = null;\r\n    }\r\n\r\n    /**\r\n     * Clearing activeInputElement\r\n     */\r\n    this.activeInputElement = null;\r\n\r\n    /**\r\n     * Removing instance attribute\r\n     */\r\n    this.keyboardDOM.removeAttribute(\"data-skInstance\");\r\n\r\n    /**\r\n     * Clearing keyboardDOM\r\n     */\r\n    this.keyboardDOM.innerHTML = \"\";\r\n\r\n    /**\r\n     * Remove instance\r\n     */\r\n    (window as SKWindow)[\"SimpleKeyboardInstances\"][this.currentInstanceName] = null;\r\n    delete (window as SKWindow)[\"SimpleKeyboardInstances\"][this.currentInstanceName];\r\n\r\n    /**\r\n     * Reset initialized flag\r\n     */\r\n    this.initialized = false;\r\n  }\r\n\r\n  /**\r\n   * Process buttonTheme option\r\n   */\r\n  getButtonThemeClasses(button: string): string[] {\r\n    const buttonTheme = this.options.buttonTheme;\r\n    let buttonClasses: string[] = [];\r\n\r\n    if (Array.isArray(buttonTheme)) {\r\n      buttonTheme.forEach((themeObj) => {\r\n        if (\r\n          themeObj &&\r\n          themeObj.class &&\r\n          typeof themeObj.class === \"string\" &&\r\n          themeObj.buttons &&\r\n          typeof themeObj.buttons === \"string\"\r\n        ) {\r\n          const themeObjClasses = themeObj.class.split(\" \");\r\n          const themeObjButtons = themeObj.buttons.split(\" \");\r\n\r\n          if (themeObjButtons.includes(button)) {\r\n            buttonClasses = [...buttonClasses, ...themeObjClasses];\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonTheme\". Please check the documentation.`, themeObj);\r\n        }\r\n      });\r\n    }\r\n\r\n    return buttonClasses;\r\n  }\r\n\r\n  /**\r\n   * Process buttonAttributes option\r\n   */\r\n  setDOMButtonAttributes(button: string, callback: any): void {\r\n    const buttonAttributes = this.options.buttonAttributes;\r\n\r\n    if (Array.isArray(buttonAttributes)) {\r\n      buttonAttributes.forEach((attrObj) => {\r\n        if (\r\n          attrObj.attribute &&\r\n          typeof attrObj.attribute === \"string\" &&\r\n          attrObj.value &&\r\n          typeof attrObj.value === \"string\" &&\r\n          attrObj.buttons &&\r\n          typeof attrObj.buttons === \"string\"\r\n        ) {\r\n          const attrObjButtons = attrObj.buttons.split(\" \");\r\n\r\n          if (attrObjButtons.includes(button)) {\r\n            callback(attrObj.attribute, attrObj.value);\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonAttributes\". Please check the documentation.`, attrObj);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onTouchDeviceDetected() {\r\n    /**\r\n     * Processing autoTouchEvents\r\n     */\r\n    this.processAutoTouchEvents();\r\n\r\n    /**\r\n     * Disabling contextual window on touch devices\r\n     */\r\n    this.disableContextualWindow();\r\n  }\r\n\r\n  /**\r\n   * Disabling contextual window for hg-button\r\n   */\r\n  /* istanbul ignore next */\r\n  disableContextualWindow() {\r\n    window.oncontextmenu = (event: KeyboardHandlerEvent) => {\r\n      if (event.target.classList.contains(\"hg-button\")) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process autoTouchEvents option\r\n   */\r\n  processAutoTouchEvents() {\r\n    if (this.options.autoUseTouchEvents) {\r\n      this.options.useTouchEvents = true;\r\n\r\n      if (this.options.debug) {\r\n        console.log(`autoUseTouchEvents: Touch device detected, useTouchEvents enabled.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n   */\r\n  onInit() {\r\n    if (this.options.debug) {\r\n      console.log(`${this.keyboardDOMClass} Initialized`);\r\n    }\r\n\r\n    /**\r\n     * setEventListeners\r\n     */\r\n    this.setEventListeners();\r\n\r\n    if (typeof this.options.onInit === \"function\") this.options.onInit(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeFirstRender() {\r\n    /**\r\n     * Performing actions when touch device detected\r\n     */\r\n    if (this.utilities.isTouchDevice()) {\r\n      this.onTouchDeviceDetected();\r\n    }\r\n\r\n    if (typeof this.options.beforeFirstRender === \"function\") this.options.beforeFirstRender(this);\r\n\r\n    /**\r\n     * Notify about PointerEvents usage\r\n     */\r\n    if (\r\n      this.isFirstKeyboardInstance &&\r\n      this.utilities.pointerEventsSupported() &&\r\n      !this.options.useTouchEvents &&\r\n      !this.options.useMouseEvents\r\n    ) {\r\n      if (this.options.debug) {\r\n        console.log(\"Using PointerEvents as it is supported by this browser\");\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Notify about touch events usage\r\n     */\r\n    if (this.options.useTouchEvents) {\r\n      if (this.options.debug) {\r\n        console.log(\"useTouchEvents has been enabled. Only touch events will be used.\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeRender() {\r\n    if (typeof this.options.beforeRender === \"function\") this.options.beforeRender(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n   */\r\n  onRender() {\r\n    if (typeof this.options.onRender === \"function\") this.options.onRender(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once all modules have been loaded\r\n   */\r\n  onModulesLoaded() {\r\n    if (typeof this.options.onModulesLoaded === \"function\") this.options.onModulesLoaded(this);\r\n  }\r\n\r\n  /**\r\n   * Register module\r\n   */\r\n  registerModule = (name: string, initCallback: any) => {\r\n    if (!this.modules[name]) this.modules[name] = {};\r\n\r\n    initCallback(this.modules[name]);\r\n  };\r\n\r\n  /**\r\n   * Load modules\r\n   */\r\n  loadModules() {\r\n    if (Array.isArray(this.options.modules)) {\r\n      this.options.modules.forEach((KeyboardModule) => {\r\n        const keyboardModule = new KeyboardModule(this);\r\n        keyboardModule.init && keyboardModule.init(this);\r\n      });\r\n\r\n      this.keyboardPluginClasses = \"modules-loaded\";\r\n\r\n      this.render();\r\n      this.onModulesLoaded();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get module prop\r\n   */\r\n  getModuleProp(name: string, prop: string) {\r\n    if (!this.modules[name]) return false;\r\n\r\n    return this.modules[name][prop];\r\n  }\r\n\r\n  /**\r\n   * getModulesList\r\n   */\r\n  getModulesList() {\r\n    return Object.keys(this.modules);\r\n  }\r\n\r\n  /**\r\n   * Parse Row DOM containers\r\n   */\r\n  parseRowDOMContainers(\r\n    rowDOM: HTMLDivElement,\r\n    rowIndex: number,\r\n    containerStartIndexes: number[],\r\n    containerEndIndexes: number[]\r\n  ) {\r\n    const rowDOMArray = Array.from(rowDOM.children);\r\n    let removedElements = 0;\r\n\r\n    if (rowDOMArray.length) {\r\n      containerStartIndexes.forEach((startIndex, arrIndex) => {\r\n        const endIndex = containerEndIndexes[arrIndex];\r\n\r\n        /**\r\n         * If there exists a respective end index\r\n         * if end index comes after start index\r\n         */\r\n        if (!endIndex || !(endIndex > startIndex)) {\r\n          return false;\r\n        }\r\n\r\n        /**\r\n         * Updated startIndex, endIndex\r\n         * This is since the removal of buttons to place a single button container\r\n         * results in a modified array size\r\n         */\r\n        const updated_startIndex = startIndex - removedElements;\r\n        const updated_endIndex = endIndex - removedElements;\r\n\r\n        /**\r\n         * Create button container\r\n         */\r\n        const containerDOM = document.createElement(\"div\");\r\n        containerDOM.className += \"hg-button-container\";\r\n        const containerUID = `${this.options.layoutName}-r${rowIndex}c${arrIndex}`;\r\n        containerDOM.setAttribute(\"data-skUID\", containerUID);\r\n\r\n        /**\r\n         * Taking elements due to be inserted into container\r\n         */\r\n        const containedElements = rowDOMArray.splice(updated_startIndex, updated_endIndex - updated_startIndex + 1);\r\n        removedElements += updated_endIndex - updated_startIndex;\r\n\r\n        /**\r\n         * Inserting elements to container\r\n         */\r\n        containedElements.forEach((element) => containerDOM.appendChild(element));\r\n\r\n        /**\r\n         * Adding container at correct position within rowDOMArray\r\n         */\r\n        rowDOMArray.splice(updated_startIndex, 0, containerDOM);\r\n\r\n        /**\r\n         * Clearing old rowDOM children structure\r\n         */\r\n        rowDOM.innerHTML = \"\";\r\n\r\n        /**\r\n         * Appending rowDOM new children list\r\n         */\r\n        rowDOMArray.forEach((element) => rowDOM.appendChild(element));\r\n\r\n        if (this.options.debug) {\r\n          console.log(\"rowDOMContainer\", containedElements, updated_startIndex, updated_endIndex, removedElements + 1);\r\n        }\r\n      });\r\n    }\r\n\r\n    return rowDOM;\r\n  }\r\n\r\n  /**\r\n   * getKeyboardClassString\r\n   */\r\n  getKeyboardClassString = (...baseDOMClasses: any[]) => {\r\n    const keyboardClasses = [this.keyboardDOMClass, ...baseDOMClasses].filter((DOMClass) => !!DOMClass);\r\n\r\n    return keyboardClasses.join(\" \");\r\n  };\r\n\r\n  /**\r\n   * Renders rows and buttons as per options\r\n   */\r\n  render() {\r\n    /**\r\n     * Clear keyboard\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Calling beforeFirstRender\r\n     */\r\n    if (!this.initialized) {\r\n      this.beforeFirstRender();\r\n    }\r\n\r\n    /**\r\n     * Calling beforeRender\r\n     */\r\n    this.beforeRender();\r\n\r\n    const layoutClass = `hg-layout-${this.options.layoutName}`;\r\n    const layout = this.options.layout || getDefaultLayout();\r\n    const useTouchEvents = this.options.useTouchEvents || false;\r\n    const useTouchEventsClass = useTouchEvents ? \"hg-touch-events\" : \"\";\r\n    const useMouseEvents = this.options.useMouseEvents || false;\r\n    const disableRowButtonContainers = this.options.disableRowButtonContainers;\r\n\r\n    /**\r\n     * Adding themeClass, layoutClass to keyboardDOM\r\n     */\r\n    this.keyboardDOM.className = this.getKeyboardClassString(\r\n      this.options.theme,\r\n      layoutClass,\r\n      this.keyboardPluginClasses,\r\n      useTouchEventsClass\r\n    );\r\n\r\n    /**\r\n     * Adding keyboard identifier\r\n     */\r\n    this.keyboardDOM.setAttribute(\"data-skInstance\", this.currentInstanceName);\r\n\r\n    /**\r\n     * Create row wrapper\r\n     */\r\n    this.keyboardRowsDOM = document.createElement(\"div\");\r\n    this.keyboardRowsDOM.className = \"hg-rows\";\r\n\r\n    /**\r\n     * Iterating through each row\r\n     */\r\n    layout[this.options.layoutName || this.defaultName].forEach((row: string, rIndex: number) => {\r\n      let rowArray = row.split(\" \");\r\n\r\n      /**\r\n       * Enforce excludeFromLayout\r\n       */\r\n      if (\r\n        this.options.excludeFromLayout &&\r\n        this.options.excludeFromLayout[this.options.layoutName || this.defaultName]\r\n      ) {\r\n        rowArray = rowArray.filter(\r\n          (buttonName) =>\r\n            this.options.excludeFromLayout &&\r\n            !this.options.excludeFromLayout[this.options.layoutName || this.defaultName].includes(buttonName)\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Creating empty row\r\n       */\r\n      let rowDOM = document.createElement(\"div\");\r\n      rowDOM.className += \"hg-row\";\r\n\r\n      /**\r\n       * Tracking container indicators in rows\r\n       */\r\n      const containerStartIndexes: number[] = [];\r\n      const containerEndIndexes: number[] = [];\r\n\r\n      /**\r\n       * Iterating through each button in row\r\n       */\r\n      rowArray.forEach((button, bIndex) => {\r\n        /**\r\n         * Check if button has a container indicator\r\n         */\r\n        const buttonHasContainerStart =\r\n          !disableRowButtonContainers && typeof button === \"string\" && button.length > 1 && button.indexOf(\"[\") === 0;\r\n\r\n        const buttonHasContainerEnd =\r\n          !disableRowButtonContainers &&\r\n          typeof button === \"string\" &&\r\n          button.length > 1 &&\r\n          button.indexOf(\"]\") === button.length - 1;\r\n\r\n        /**\r\n         * Save container start index, if applicable\r\n         */\r\n        if (buttonHasContainerStart) {\r\n          containerStartIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\[/g, \"\");\r\n        }\r\n\r\n        if (buttonHasContainerEnd) {\r\n          containerEndIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\]/g, \"\");\r\n        }\r\n\r\n        /**\r\n         * Processing button options\r\n         */\r\n        const fctBtnClass = this.utilities.getButtonClass(button);\r\n        const buttonDisplayName = this.utilities.getButtonDisplayName(\r\n          button,\r\n          this.options.display,\r\n          this.options.mergeDisplay\r\n        );\r\n\r\n        /**\r\n         * Creating button\r\n         */\r\n        const buttonType = this.options.useButtonTag ? \"button\" : \"div\";\r\n        const buttonDOM = document.createElement(buttonType);\r\n        buttonDOM.className += `hg-button ${fctBtnClass}`;\r\n\r\n        /**\r\n         * Adding buttonTheme\r\n         */\r\n        buttonDOM.classList.add(...this.getButtonThemeClasses(button));\r\n\r\n        /**\r\n         * Adding buttonAttributes\r\n         */\r\n        this.setDOMButtonAttributes(button, (attribute: string, value: string) => {\r\n          buttonDOM.setAttribute(attribute, value);\r\n        });\r\n\r\n        this.activeButtonClass = \"hg-activeButton\";\r\n\r\n        /**\r\n         * Handle button click event\r\n         */\r\n        /* istanbul ignore next */\r\n        if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n          /**\r\n           * Handle PointerEvents\r\n           */\r\n          buttonDOM.onpointerdown = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonClicked(button, e);\r\n            this.handleButtonMouseDown(button, e);\r\n          };\r\n          buttonDOM.onpointerup = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n          buttonDOM.onpointercancel = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n        } else {\r\n          /**\r\n           * Fallback for browsers not supporting PointerEvents\r\n           */\r\n          if (useTouchEvents) {\r\n            /**\r\n             * Handle touch events\r\n             */\r\n            buttonDOM.ontouchstart = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonClicked(button, e);\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.ontouchend = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n            buttonDOM.ontouchcancel = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          } else {\r\n            /**\r\n             * Handle mouse events\r\n             */\r\n            buttonDOM.onclick = (e: KeyboardHandlerEvent) => {\r\n              this.setMouseHold(false);\r\n              /**\r\n               * Fire button handler in onclick for compatibility reasons\r\n               * This fires handler before onKeyReleased, therefore when that option is set we will fire the handler\r\n               * in onmousedown instead\r\n               */\r\n              if (\r\n                typeof this.options.onKeyReleased !== \"function\" &&\r\n                !(this.options.useMouseEvents && this.options.clickOnMouseDown)\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n            };\r\n            buttonDOM.onmousedown = (e: KeyboardHandlerEvent) => {\r\n              /**\r\n               * Fire button handler for onKeyReleased use-case\r\n               */\r\n              if (\r\n                (typeof this.options.onKeyReleased === \"function\" ||\r\n                  (this.options.useMouseEvents && this.options.clickOnMouseDown)) &&\r\n                !this.isMouseHold\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.onmouseup = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          }\r\n        }\r\n\r\n        /**\r\n         * Adding identifier\r\n         */\r\n        buttonDOM.setAttribute(\"data-skBtn\", button);\r\n\r\n        /**\r\n         * Adding unique id\r\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\r\n         */\r\n        const buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\r\n        buttonDOM.setAttribute(\"data-skBtnUID\", buttonUID);\r\n\r\n        /**\r\n         * Adding button label to button\r\n         */\r\n        const buttonSpanDOM = document.createElement(\"span\");\r\n        buttonSpanDOM.innerHTML = buttonDisplayName;\r\n        buttonDOM.appendChild(buttonSpanDOM);\r\n\r\n        /**\r\n         * Adding to buttonElements\r\n         */\r\n        if (!this.buttonElements[button]) this.buttonElements[button] = [];\r\n\r\n        this.buttonElements[button].push(buttonDOM);\r\n\r\n        /**\r\n         * Appending button to row\r\n         */\r\n        rowDOM.appendChild(buttonDOM);\r\n      });\r\n\r\n      /**\r\n       * Parse containers in row\r\n       */\r\n      rowDOM = this.parseRowDOMContainers(rowDOM, rIndex, containerStartIndexes, containerEndIndexes);\r\n\r\n      /**\r\n       * Appending row to hg-rows\r\n       */\r\n      this.keyboardRowsDOM.appendChild(rowDOM);\r\n    });\r\n\r\n    /**\r\n     * Appending row to keyboard\r\n     */\r\n    this.keyboardDOM.appendChild(this.keyboardRowsDOM);\r\n\r\n    /**\r\n     * Calling onRender\r\n     */\r\n    this.onRender();\r\n\r\n    if (!this.initialized) {\r\n      /**\r\n       * Ensures that onInit and beforeFirstRender are only called once per instantiation\r\n       */\r\n      this.initialized = true;\r\n\r\n      /**\r\n       * Handling parent events\r\n       */\r\n      /* istanbul ignore next */\r\n      if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n        document.onpointerup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onpointerdown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (useTouchEvents) {\r\n        /**\r\n         * Handling ontouchend, ontouchcancel\r\n         */\r\n        document.ontouchend = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        document.ontouchcancel = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n\r\n        this.keyboardDOM.ontouchstart = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (!useTouchEvents) {\r\n        /**\r\n         * Handling mouseup\r\n         */\r\n        document.onmouseup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onmousedown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      }\r\n\r\n      /**\r\n       * Calling onInit\r\n       */\r\n      this.onInit();\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboard;\r\n","import SimpleKeyboard from \"./components/Keyboard\";\r\nexport { SimpleKeyboard };\r\nexport default SimpleKeyboard;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","import { KeyboardReactInterface } from \"../interfaces\";\r\n\r\nexport const parseProps = (props: KeyboardReactInterface[\"options\"]) => ({\r\n  ...props,\r\n  theme: `simple-keyboard ${props.theme || \"hg-theme-default\"}`,\r\n});\r\n\r\nconst cleanProps = (sourceObj: KeyboardReactInterface[\"options\"]) => ({\r\n  ...sourceObj,\r\n  keyboardRef: null,\r\n});\r\n\r\nexport const changedProps = (\r\n  prevProps: KeyboardReactInterface[\"options\"],\r\n  props: KeyboardReactInterface[\"options\"]\r\n) => {\r\n  const cleanedProps = cleanProps(props);\r\n  const cleanedPrevProps = cleanProps(prevProps);\r\n\r\n  return Object.keys(cleanedProps).filter(\r\n    (propName) => cleanedProps[propName] !== cleanedPrevProps[propName]\r\n  );\r\n};\r\n","/* eslint-disable no-unused-vars */\r\nimport * as React from \"react\";\r\nimport { parseProps, changedProps } from \"../services/Utilities\";\r\nimport \"simple-keyboard/build/css/index.css\";\r\nimport { KeyboardReactInterface } from \"../interfaces\";\r\nimport Keyboard from \"simple-keyboard/build/index.modern\";\r\n\r\nconst KeyboardReact = (props: KeyboardReactInterface[\"options\"]) => {\r\n  const cssClass = props.baseClass || \"react-simple-keyboard\";\r\n  const initRef = React.useRef<null | boolean>(null);\r\n  const targetElemRef = React.useRef<null | HTMLDivElement>(null);\r\n  const keyboardRef = React.useRef<null | KeyboardReactInterface>(null);\r\n  const previousProps = React.useRef(props);\r\n\r\n  React.useEffect(() => {\r\n    /**\r\n     * Whenever this component is unmounted, ensure that Keyboard object that\r\n     * it created is destroyed so that it removes any event handlers that it\r\n     * may have installed.\r\n     */\r\n    return () => {\r\n      if (keyboardRef.current) {\r\n        keyboardRef.current.destroy();\r\n      }\r\n      initRef.current = false;\r\n    };\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    const parsedProps = parseProps(props) as any;\r\n\r\n    /**\r\n     * Initialize simple-keyboard\r\n     */\r\n    if (!initRef.current) {\r\n      initRef.current = true;\r\n      parsedProps.debug && console.log(\"ReactSimpleKeyboard: Init\");\r\n      const targetElem = targetElemRef.current as HTMLDivElement;\r\n      const targetClass = `.${cssClass}`;\r\n      keyboardRef.current = new Keyboard(\r\n        targetElem || targetClass,\r\n        parsedProps\r\n      ) as KeyboardReactInterface;\r\n      parsedProps.keyboardRef && parsedProps.keyboardRef(keyboardRef.current);\r\n    }\r\n\r\n    const updatedProps = changedProps(previousProps.current, parsedProps);\r\n\r\n    /**\r\n     * Only trigger render if props changed\r\n     */\r\n    if (updatedProps.length) {\r\n      const keyboard = keyboardRef.current;\r\n      previousProps.current = parsedProps;\r\n      keyboard?.setOptions(parsedProps);\r\n      parsedProps.debug &&\r\n        console.log(\r\n          \"ReactSimpleKeyboard - setOptions called due to updated props:\",\r\n          updatedProps\r\n        );\r\n    }\r\n  }, [initRef, cssClass, previousProps, props]);\r\n\r\n  return <div className={cssClass} ref={targetElemRef} />;\r\n};\r\n\r\nexport default KeyboardReact;\r\n","import KeyboardReact from \"./components/KeyboardModern\";\r\nexport * from \"./interfaces.d\";\r\nexport { KeyboardReact };\r\nexport default KeyboardReact;\r\n"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__442__","e","t","d","n","o","Object","defineProperty","enumerable","get","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","l","getOptions","getCaretPosition","i","getCaretPositionEnd","s","dispatch","length","bindMethods","key","includes","getButtonType","replace","concat","arguments","assign","getDefaultDisplay","a","removeAt","apply","removeForwardsAt","addStringAt","tabCharOnTab","newLineOnEnter","Number","isInteger","debug","console","log","updateCaretPosAction","setCaretPosition","slice","join","isMaxLengthReached","updateCaretPos","substring","match","substr","maxLength","inputName","maxLengthReached","Boolean","window","navigator","maxTouchPoints","PointerEvent","toLowerCase","trim","split","reduce","toUpperCase","Array","Math","ceil","map","indexOf","getOwnPropertyNames","done","bind","f","c","g","y","altKey","ctrlKey","shiftKey","code","keyCodeToKey","keyCode","layout","lastLayout","layoutJSON","mapLayoutToEventCodes","extractAndPadLayout","default","shift","shiftActive","capslockActive","getSimpleKeyboardLayoutKey","getButtonElement","u","h","style","background","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","isArray","forEach","physicalKeyboardHighlightPress","physicalKeyboardHighlightPressUsePointerEvents","onpointerdown","physicalKeyboardHighlightPressUseClick","p","click","handleButtonClicked","removeAttribute","onpointerup","ShiftLeft","ShiftRight","ControlLeft","ControlRight","AltLeft","AltRight","MetaLeft","MetaRight","Backspace","CapsLock","Enter","Tab","toString","normal","push","w","utilities","options","k","pageSize","layoutCandidatesPageSize","candidateBoxElement","remove","pageIndex","candidateValue","targetElement","onSelect","chunkArray","renderPage","candidateListPages","nbPages","onItemSelected","destroy","document","createElement","className","useTouchEvents","TouchEvent","MouseEvent","innerHTML","display","ontouchstart","onclick","appendChild","classList","add","prepend","C","A","B","querySelector","HTMLDivElement","warn","Error","keyboardDOMClass","keyboardDOM","caretPosition","caretPositionEnd","modules","filter","handleParams","layoutName","theme","preventMouseDownDefault","enableLayoutCandidates","excludeFromLayout","keyboardPluginClasses","defaultName","input","buttonElements","SimpleKeyboardInstances","currentInstanceName","camelCase","allKeyboardInstances","keyboardInstanceNames","keys","isFirstKeyboardInstance","physicalKeyboard","candidateBox","render","loadModules","layoutCandidates","layoutCandidatesCaseSensitiveMatch","S","RegExp","escapeRegex","P","matchAll","sort","candidateKey","show","disableCandidateNormalization","enableLayoutCandidatesKeyPress","normalize","beforeInputUpdate","getInput","v","setInput","onKeyPress","onChange","onChangeAll","getAllInputs","getUpdatedInput","isStandardButton","activeInputElement","setSelectionRange","inputPattern","inputPatternIsValid","handleMaxLength","type","syncInstanceInputs","target","getInputCandidates","showCandidatesBox","isMouseHold","preventDefault","stopMouseDownPropagation","stopPropagation","activeButtonClass","holdInteractionTimeout","clearTimeout","holdTimeout","setMouseHold","disableButtonHold","setTimeout","getMouseHold","handleButtonHold","preventMouseUpDefault","stopMouseUpPropagation","contains","recurseButtons","onKeyReleased","replaceInput","rtl","changedOptions","onSetOptions","JSON","stringify","keyboardRowsDOM","setAttribute","buttonTheme","buttons","class","splice","test","removeEventListener","handleKeyDownBound","handleKeyUpBound","handleMouseUpBound","handleTouchEndBound","handleSelectBound","updateCaretOnSelectionChange","handleSelectionChangeBound","listenersAdded","physicalKeyboardHighlightPreventDefault","removeEventListeners","tabIndex","outline","handleKeyDown","handleKeyUp","handleMouseUp","handleTouchEnd","handleSelect","handleSelectionChange","addEventListener","caretEventHandler","physicalKeyboardHighlight","handleHighlightKeyUp","handleHighlightKeyDown","userAgent","tagName","path","some","hasAttribute","disableCaretPositioning","selectionStart","selectionEnd","getRtlOffset","ontouchend","ontouchcancel","onmouseup","onpointercancel","onmousedown","resetRows","initialized","buttonAttributes","attribute","processAutoTouchEvents","disableContextualWindow","oncontextmenu","autoUseTouchEvents","setEventListeners","onInit","isTouchDevice","onTouchDeviceDetected","beforeFirstRender","pointerEventsSupported","useMouseEvents","beforeRender","onRender","onModulesLoaded","init","from","children","disableRowButtonContainers","getKeyboardClassString","getButtonClass","getButtonDisplayName","mergeDisplay","useButtonTag","getButtonThemeClasses","setDOMButtonAttributes","handleButtonMouseDown","handleButtonMouseUp","clickOnMouseDown","m","parseRowDOMContainers","handleKeyboardContainerMouseDown","K","L","_typeof","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","id","loaded","__webpack_modules__","getter","__esModule","definition","obj","prop","nmd","paths","cleanProps","sourceObj","_objectSpread","keyboardRef","props","cssClass","baseClass","initRef","React","targetElemRef","previousProps","current","parsedProps","parseProps","targetElem","targetClass","Keyboard","updatedProps","prevProps","cleanedProps","cleanedPrevProps","propName","changedProps","keyboard","setOptions","ref"],"sourceRoot":""}