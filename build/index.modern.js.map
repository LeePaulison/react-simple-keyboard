{"version":3,"file":"index.modern.js","mappings":"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","sources":["webpack://ReactSimpleKeyboard/webpack/universalModuleDefinition","webpack://ReactSimpleKeyboard/external umd {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack://ReactSimpleKeyboard/SimpleKeyboard/webpack/universalModuleDefinition","webpack://ReactSimpleKeyboard/SimpleKeyboard/webpack/bootstrap","webpack://ReactSimpleKeyboard/SimpleKeyboard/webpack/runtime/define property getters","webpack://ReactSimpleKeyboard/SimpleKeyboard/webpack/runtime/hasOwnProperty shorthand","webpack://ReactSimpleKeyboard/SimpleKeyboard/webpack/runtime/make namespace object","webpack://ReactSimpleKeyboard/SimpleKeyboard/src/lib/services/Utilities.ts","webpack://ReactSimpleKeyboard/SimpleKeyboard/src/lib/services/PhysicalKeyboard.ts","webpack://ReactSimpleKeyboard/SimpleKeyboard/src/lib/services/KeyboardLayout.ts","webpack://ReactSimpleKeyboard/SimpleKeyboard/src/lib/components/CandidateBox.ts","webpack://ReactSimpleKeyboard/SimpleKeyboard/src/lib/components/Keyboard.ts","webpack://ReactSimpleKeyboard/SimpleKeyboard/src/lib/index.modern.ts","webpack://ReactSimpleKeyboard/webpack/bootstrap","webpack://ReactSimpleKeyboard/webpack/runtime/compat get default export","webpack://ReactSimpleKeyboard/webpack/runtime/define property getters","webpack://ReactSimpleKeyboard/webpack/runtime/hasOwnProperty shorthand","webpack://ReactSimpleKeyboard/webpack/runtime/make namespace object","webpack://ReactSimpleKeyboard/webpack/runtime/node module decorator","webpack://ReactSimpleKeyboard/./src/lib/services/Utilities.ts","webpack://ReactSimpleKeyboard/./src/lib/components/KeyboardModern.tsx","webpack://ReactSimpleKeyboard/./src/lib/index.modern.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactSimpleKeyboard\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"ReactSimpleKeyboard\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__442__) {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__442__;","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboard\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboard\"] = factory();\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { KeyboardInput } from \"./../interfaces\";\r\nimport { KeyboardOptions, UtilitiesParams } from \"../interfaces\";\r\n\r\n/**\r\n * Utility Service\r\n */\r\nclass Utilities {\r\n  getOptions: () => KeyboardOptions;\r\n  getCaretPosition: () => number | null;\r\n  getCaretPositionEnd: () => number | null;\r\n  dispatch: any;\r\n  maxLengthReached!: boolean;\r\n\r\n  /**\r\n   * Creates an instance of the Utility service\r\n   */\r\n  constructor({ getOptions, getCaretPosition, getCaretPositionEnd, dispatch }: UtilitiesParams) {\r\n    this.getOptions = getOptions;\r\n    this.getCaretPosition = getCaretPosition;\r\n    this.getCaretPositionEnd = getCaretPositionEnd;\r\n    this.dispatch = dispatch;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(Utilities, this);\r\n  }\r\n\r\n  /**\r\n   * Retrieve button type\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The button type\r\n   */\r\n  getButtonType(button: string): string {\r\n    return button.includes(\"{\") && button.includes(\"}\") && button !== \"{//}\" ? \"functionBtn\" : \"standardBtn\";\r\n  }\r\n\r\n  /**\r\n   * Adds default classes to a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The classes to be added to the button\r\n   */\r\n  getButtonClass(button: string): string {\r\n    const buttonTypeClass = this.getButtonType(button);\r\n    const buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    let buttonNormalized = \"\";\r\n\r\n    if (buttonTypeClass !== \"standardBtn\") buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\r\n\r\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\r\n  }\r\n\r\n  /**\r\n   * Default button display labels\r\n   */\r\n  getDefaultDisplay() {\r\n    return {\r\n      \"{bksp}\": \"backspace\",\r\n      \"{backspace}\": \"backspace\",\r\n      \"{enter}\": \"< enter\",\r\n      \"{shift}\": \"shift\",\r\n      \"{shiftleft}\": \"shift\",\r\n      \"{shiftright}\": \"shift\",\r\n      \"{alt}\": \"alt\",\r\n      \"{s}\": \"shift\",\r\n      \"{tab}\": \"tab\",\r\n      \"{lock}\": \"caps\",\r\n      \"{capslock}\": \"caps\",\r\n      \"{accept}\": \"Submit\",\r\n      \"{space}\": \" \",\r\n      \"{//}\": \" \",\r\n      \"{esc}\": \"esc\",\r\n      \"{escape}\": \"esc\",\r\n      \"{f1}\": \"f1\",\r\n      \"{f2}\": \"f2\",\r\n      \"{f3}\": \"f3\",\r\n      \"{f4}\": \"f4\",\r\n      \"{f5}\": \"f5\",\r\n      \"{f6}\": \"f6\",\r\n      \"{f7}\": \"f7\",\r\n      \"{f8}\": \"f8\",\r\n      \"{f9}\": \"f9\",\r\n      \"{f10}\": \"f10\",\r\n      \"{f11}\": \"f11\",\r\n      \"{f12}\": \"f12\",\r\n      \"{numpaddivide}\": \"/\",\r\n      \"{numlock}\": \"lock\",\r\n      \"{arrowup}\": \"↑\",\r\n      \"{arrowleft}\": \"←\",\r\n      \"{arrowdown}\": \"↓\",\r\n      \"{arrowright}\": \"→\",\r\n      \"{prtscr}\": \"print\",\r\n      \"{scrolllock}\": \"scroll\",\r\n      \"{pause}\": \"pause\",\r\n      \"{insert}\": \"ins\",\r\n      \"{home}\": \"home\",\r\n      \"{pageup}\": \"up\",\r\n      \"{delete}\": \"del\",\r\n      \"{forwarddelete}\": \"del\",\r\n      \"{end}\": \"end\",\r\n      \"{pagedown}\": \"down\",\r\n      \"{numpadmultiply}\": \"*\",\r\n      \"{numpadsubtract}\": \"-\",\r\n      \"{numpadadd}\": \"+\",\r\n      \"{numpadenter}\": \"enter\",\r\n      \"{period}\": \".\",\r\n      \"{numpaddecimal}\": \".\",\r\n      \"{numpad0}\": \"0\",\r\n      \"{numpad1}\": \"1\",\r\n      \"{numpad2}\": \"2\",\r\n      \"{numpad3}\": \"3\",\r\n      \"{numpad4}\": \"4\",\r\n      \"{numpad5}\": \"5\",\r\n      \"{numpad6}\": \"6\",\r\n      \"{numpad7}\": \"7\",\r\n      \"{numpad8}\": \"8\",\r\n      \"{numpad9}\": \"9\",\r\n    };\r\n  }\r\n  /**\r\n   * Returns the display (label) name for a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {object} display The provided display option\r\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\r\n   */\r\n  getButtonDisplayName(button: string, display: KeyboardOptions[\"display\"], mergeDisplay = false) {\r\n    if (mergeDisplay) {\r\n      display = Object.assign({}, this.getDefaultDisplay(), display);\r\n    } else {\r\n      display = display || this.getDefaultDisplay();\r\n    }\r\n\r\n    return display[button] || button;\r\n  }\r\n\r\n  /**\r\n   * Returns the updated input resulting from clicking a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {string} input The input string\r\n   * @param  {number} caretPos The cursor's current position\r\n   * @param  {number} caretPosEnd The cursor's current end position\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  getUpdatedInput(button: string, input: string, caretPos: any, caretPosEnd = caretPos, moveCaret = false) {\r\n    const options = this.getOptions();\r\n    const commonParams: [number | undefined, number | undefined, boolean] = [caretPos, caretPosEnd, moveCaret];\r\n\r\n    let output = input;\r\n\r\n    if ((button === \"{bksp}\" || button === \"{backspace}\") && output.length > 0) {\r\n      output = this.removeAt(output, ...commonParams);\r\n    } else if ((button === \"{delete}\" || button === \"{forwarddelete}\") && output.length > 0) {\r\n      output = this.removeForwardsAt(output, ...commonParams);\r\n    } else if (button === \"{space}\") output = this.addStringAt(output, \" \", ...commonParams);\r\n    else if (button === \"{tab}\" && !(typeof options.tabCharOnTab === \"boolean\" && options.tabCharOnTab === false)) {\r\n      output = this.addStringAt(output, \"\\t\", ...commonParams);\r\n    } else if ((button === \"{enter}\" || button === \"{numpadenter}\") && options.newLineOnEnter)\r\n      output = this.addStringAt(output, \"\\n\", ...commonParams);\r\n    else if (button.includes(\"numpad\") && Number.isInteger(Number(button[button.length - 2]))) {\r\n      output = this.addStringAt(output, button[button.length - 2], ...commonParams);\r\n    } else if (button === \"{numpaddivide}\") output = this.addStringAt(output, \"/\", ...commonParams);\r\n    else if (button === \"{numpadmultiply}\") output = this.addStringAt(output, \"*\", ...commonParams);\r\n    else if (button === \"{numpadsubtract}\") output = this.addStringAt(output, \"-\", ...commonParams);\r\n    else if (button === \"{numpadadd}\") output = this.addStringAt(output, \"+\", ...commonParams);\r\n    else if (button === \"{numpaddecimal}\") output = this.addStringAt(output, \".\", ...commonParams);\r\n    else if (button === \"{\" || button === \"}\") output = this.addStringAt(output, button, ...commonParams);\r\n    else if (!button.includes(\"{\") && !button.includes(\"}\")) output = this.addStringAt(output, button, ...commonParams);\r\n\r\n    if (options.debug) {\r\n      console.log(\"Input will be: \" + output);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Moves the cursor position by a given amount\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPos(length: number, minus = false) {\r\n    const newCaretPos = this.updateCaretPosAction(length, minus);\r\n\r\n    this.dispatch((instance: any) => {\r\n      instance.setCaretPosition(newCaretPos);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Action method of updateCaretPos\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPosAction(length: number, minus = false) {\r\n    const options = this.getOptions();\r\n    let caretPosition = this.getCaretPosition();\r\n\r\n    if (caretPosition != null) {\r\n      if (minus) {\r\n        if (caretPosition > 0) caretPosition = caretPosition - length;\r\n      } else {\r\n        caretPosition = caretPosition + length;\r\n      }\r\n    }\r\n\r\n    if (options.debug) {\r\n      console.log(\"Caret at:\", caretPosition);\r\n    }\r\n\r\n    return caretPosition;\r\n  }\r\n\r\n  /**\r\n   * Adds a string to the input at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {string} str The string to add\r\n   * @param  {number} position The (cursor) position where the string should be added\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  addStringAt(source: string, str: string, position = source.length, positionEnd = source.length, moveCaret = false) {\r\n    let output;\r\n\r\n    if (!position && position !== 0) {\r\n      output = source + str;\r\n    } else {\r\n      output = [source.slice(0, position), str, source.slice(positionEnd)].join(\"\");\r\n\r\n      /**\r\n       * Avoid caret position change when maxLength is set\r\n       */\r\n      if (!this.isMaxLengthReached()) {\r\n        if (moveCaret) this.updateCaretPos(str.length);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Check whether the button is a standard button\r\n   */\r\n  isStandardButton = (button: string) => button && !(button[0] === \"{\" && button[button.length - 1] === \"}\");\r\n\r\n  /**\r\n   * Removes an amount of characters before a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  removeAt(source: string, position = source.length, positionEnd = source.length, moveCaret = false) {\r\n    if (position === 0 && positionEnd === 0) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      let prevTwoChars;\r\n      let emojiMatched;\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      if (position && position >= 0) {\r\n        prevTwoChars = source.substring(position - 2, position);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.substr(0, position - 2) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.substr(0, position - 1) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      } else {\r\n        prevTwoChars = source.slice(-2);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.slice(0, -2);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.slice(0, -1);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Removes an amount of characters after a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   */\r\n  removeForwardsAt(\r\n    source: string,\r\n    position: number = source.length,\r\n    positionEnd: number = source.length,\r\n    moveCaret = false\r\n  ) {\r\n    if (!source?.length || position === null) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      const nextTwoChars = source.substring(position, position + 2);\r\n      const emojiMatched = nextTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.substr(0, position) + source.substr(position + 2);\r\n      } else {\r\n        output = source.substr(0, position) + source.substr(position + 1);\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\r\n   *\r\n   * @param  {object} inputObj\r\n   * @param  {string} updatedInput\r\n   */\r\n  handleMaxLength(inputObj: KeyboardInput, updatedInput: string) {\r\n    const options = this.getOptions();\r\n    const maxLength = options.maxLength;\r\n    const currentInput = inputObj[options.inputName || \"default\"];\r\n    const condition = updatedInput.length - 1 >= maxLength;\r\n\r\n    if (\r\n      /**\r\n       * If pressing this button won't add more characters\r\n       * We exit out of this limiter function\r\n       */\r\n      updatedInput.length <= currentInput.length\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (Number.isInteger(maxLength)) {\r\n      if (options.debug) {\r\n        console.log(\"maxLength (num) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        /**\r\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\r\n         */\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (typeof maxLength === \"object\") {\r\n      const condition = updatedInput.length - 1 >= maxLength[options.inputName || \"default\"];\r\n\r\n      if (options.debug) {\r\n        console.log(\"maxLength (obj) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of maxLengthReached\r\n   */\r\n  isMaxLengthReached() {\r\n    return Boolean(this.maxLengthReached);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a touch device is being used\r\n   */\r\n  isTouchDevice() {\r\n    return \"ontouchstart\" in window || navigator.maxTouchPoints;\r\n  }\r\n\r\n  /**\r\n   * Determines whether pointer events are supported\r\n   */\r\n  pointerEventsSupported() {\r\n    return !!window.PointerEvent;\r\n  }\r\n\r\n  /**\r\n   * Bind all methods in a given class\r\n   */\r\n\r\n  static bindMethods(myClass: any, instance: any) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (const myMethod of Object.getOwnPropertyNames(myClass.prototype)) {\r\n      const excludeMethod = myMethod === \"constructor\" || myMethod === \"bindMethods\";\r\n      if (!excludeMethod) {\r\n        instance[myMethod] = instance[myMethod].bind(instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transforms an arbitrary string to camelCase\r\n   *\r\n   * @param  {string} str The string to transform.\r\n   */\r\n  camelCase(str: string): string {\r\n    if (!str) return \"\";\r\n\r\n    return str\r\n      .toLowerCase()\r\n      .trim()\r\n      .split(/[.\\-_\\s]/g)\r\n      .reduce((str, word) => (word.length ? str + word[0].toUpperCase() + word.slice(1) : str));\r\n  }\r\n\r\n  /**\r\n   * Split array into chunks\r\n   */\r\n  chunkArray<T>(arr: T[], size: number): T[][] {\r\n    return [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));\r\n  }\r\n\r\n  /**\r\n   * Escape regex input\r\n   */\r\n  escapeRegex(str: string) {\r\n    return str.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\r\n  }\r\n\r\n  /**\r\n   * Calculate caret position offset when using rtl option\r\n   */\r\n  getRtlOffset(index: number, input: string) {\r\n    let newIndex = index;\r\n    const startMarkerIndex = input.indexOf(\"\\u202B\");\r\n    const endMarkerIndex = input.indexOf(\"\\u202C\");\r\n\r\n    if (startMarkerIndex < index && startMarkerIndex != -1) {\r\n      newIndex--;\r\n    }\r\n    if (endMarkerIndex < index && startMarkerIndex != -1) {\r\n      newIndex--;\r\n    }\r\n\r\n    return newIndex < 0 ? 0 : newIndex;\r\n  }\r\n\r\n  /**\r\n   * Reusable empty function\r\n   */\r\n  static noop = () => {};\r\n\r\n  /**\r\n   * Check if a function is a constructor\r\n   */\r\n  isConstructor(f: any) {\r\n    try {\r\n      Reflect.construct(String, [], f);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default Utilities;\r\n","import { KeyboardOptions, PhysicalKeyboardParams } from '../interfaces';\r\nimport Utilities from '../services/Utilities';\r\nimport { getDefaultLayout } from '../services/KeyboardLayout';\r\n\r\n/**\r\n * Layout Key Mapping Interface\r\n */\r\ninterface LayoutKeyMapping {\r\n  normal: string | number;\r\n  shift: string | number;\r\n}\r\n\r\n/**\r\n * Physical Keyboard Service\r\n */\r\nclass PhysicalKeyboard {\r\n  getOptions: () => KeyboardOptions;\r\n  dispatch: any;\r\n  layoutJSON: Record<string, LayoutKeyMapping> | null = null;\r\n  lastLayout = '';\r\n  shiftActive = false;\r\n  capslockActive = false;\r\n\r\n  /**\r\n   * Creates an instance of the PhysicalKeyboard service\r\n   */\r\n  constructor({ dispatch, getOptions }: PhysicalKeyboardParams) {\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.dispatch = dispatch;\r\n    this.getOptions = getOptions;\r\n\r\n    if (this.getOptions() && this.getOptions().layout) {\r\n      this.lastLayout = this.getOptions()?.layout?.default?.[1] || '';\r\n      const layout = this.getOptions().layout;\r\n      if (layout) {\r\n        this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(layout));\r\n      }\r\n    } else {\r\n      this.lastLayout = getDefaultLayout().default[1];\r\n      this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(getDefaultLayout()));\r\n    }\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(PhysicalKeyboard, this);\r\n  }\r\n\r\n  handleHighlightKeyDown(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    // if (options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)) {\r\n    //   e.preventDefault();\r\n    //   e.stopImmediatePropagation();\r\n    // }\r\n\r\n    if ((e.code === 'ShiftLeft' || e.code === 'ShiftRight') && !this.shiftActive) {\r\n      this.shiftActive = !this.shiftActive;\r\n    }\r\n\r\n    if (e.code === 'CapsLock') {\r\n      this.capslockActive = !this.capslockActive;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const standardButtonPressed = instance.getButtonElement(buttonPressed);\r\n      const functionButtonPressed = instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      let buttonDOM;\r\n      let buttonName: string;\r\n\r\n      if (standardButtonPressed) {\r\n        buttonDOM = standardButtonPressed;\r\n        buttonName = buttonPressed;\r\n      } else if (functionButtonPressed) {\r\n        buttonDOM = functionButtonPressed;\r\n        buttonName = `{${buttonPressed}}`;\r\n      } else {\r\n        return;\r\n      }\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        buttonElement.style.background = options.physicalKeyboardHighlightBgColor || '#dadce4';\r\n        buttonElement.style.color = options.physicalKeyboardHighlightTextColor || 'black';\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM[0]?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM[0]?.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  handleHighlightKeyUp(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    // if (options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)) {\r\n    //   e.preventDefault();\r\n    //   e.stopImmediatePropagation();\r\n    // }\r\n\r\n    if (e.code === 'ShiftLeft' || e.code === 'ShiftRight') {\r\n      this.shiftActive = false;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const buttonDOM = instance.getButtonElement(buttonPressed) || instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        if (buttonElement.removeAttribute) {\r\n          buttonElement.removeAttribute('style');\r\n        }\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM[0]?.onpointerup?.(e);\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM?.onpointerup?.(e);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  STANDARD_CODES = new Set([\r\n    // Alphanumeric\r\n    'Backquote',\r\n    'Digit0',\r\n    'Digit1',\r\n    'Digit2',\r\n    'Digit3',\r\n    'Digit4',\r\n    'Digit5',\r\n    'Digit6',\r\n    'Digit7',\r\n    'Digit8',\r\n    'Digit9',\r\n    'KeyA',\r\n    'KeyB',\r\n    'KeyC',\r\n    'KeyD',\r\n    'KeyE',\r\n    'KeyF',\r\n    'KeyG',\r\n    'KeyH',\r\n    'KeyI',\r\n    'KeyJ',\r\n    'KeyK',\r\n    'KeyL',\r\n    'KeyM',\r\n    'KeyN',\r\n    'KeyO',\r\n    'KeyP',\r\n    'KeyQ',\r\n    'KeyR',\r\n    'KeyS',\r\n    'KeyT',\r\n    'KeyU',\r\n    'KeyV',\r\n    'KeyW',\r\n    'KeyX',\r\n    'KeyY',\r\n    'KeyZ',\r\n\r\n    // Control & nav\r\n    'Enter',\r\n    'Escape',\r\n    'Backspace',\r\n    'Tab',\r\n    'Space',\r\n    'ArrowLeft',\r\n    'ArrowRight',\r\n    'ArrowUp',\r\n    'ArrowDown',\r\n    'Delete',\r\n    'Insert',\r\n    'Home',\r\n    'End',\r\n    'PageUp',\r\n    'PageDown',\r\n\r\n    // Modifier keys\r\n    'ShiftLeft',\r\n    'ShiftRight',\r\n    'ControlLeft',\r\n    'ControlRight',\r\n    'AltLeft',\r\n    'AltRight',\r\n    'MetaLeft',\r\n    'MetaRight',\r\n    'CapsLock',\r\n\r\n    // Symbols & punctuation\r\n    'Minus',\r\n    'Equal',\r\n    'BracketLeft',\r\n    'BracketRight',\r\n    'Backslash',\r\n    'Semicolon',\r\n    'Quote',\r\n    'Comma',\r\n    'Period',\r\n    'Slash',\r\n\r\n    // Function keys\r\n    'F1',\r\n    'F2',\r\n    'F3',\r\n    'F4',\r\n    'F5',\r\n    'F6',\r\n    'F7',\r\n    'F8',\r\n    'F9',\r\n    'F10',\r\n    'F11',\r\n    'F12',\r\n\r\n    // Numpad\r\n    'NumLock',\r\n    'Numpad0',\r\n    'Numpad1',\r\n    'Numpad2',\r\n    'Numpad3',\r\n    'Numpad4',\r\n    'Numpad5',\r\n    'Numpad6',\r\n    'Numpad7',\r\n    'Numpad8',\r\n    'Numpad9',\r\n    'NumpadAdd',\r\n    'NumpadSubtract',\r\n    'NumpadMultiply',\r\n    'NumpadDivide',\r\n    'NumpadDecimal',\r\n    'NumpadEnter',\r\n\r\n    // Misc\r\n    'ScrollLock',\r\n    'Pause',\r\n    'PrintScreen',\r\n    'ContextMenu',\r\n  ]);\r\n\r\n  /**\r\n   * Normalize a code string to match the official `e.code` spec format.\r\n   * Returns null if no match is found.\r\n   */\r\n  normalizeToStandardCode(input: string): string | null {\r\n    if (!input || typeof input !== 'string') return null;\r\n    const upper = input.trim();\r\n\r\n    for (const code of this.STANDARD_CODES) {\r\n      if (code.toLowerCase() === upper.toLowerCase()) {\r\n        return code;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  normalizeOutput(rawKey: string): string {\r\n    const normalizeKeyMap: Record<string, string> = {\r\n      shiftleft: 'shift',\r\n      shiftright: 'shift',\r\n      controlleft: 'ctrl',\r\n      controlright: 'ctrl',\r\n      altleft: 'alt',\r\n      altright: 'alt',\r\n      metaleft: 'meta',\r\n      metaright: 'meta',\r\n      backspace: 'bksp',\r\n      capslock: 'lock',\r\n      enter: 'enter',\r\n      tab: 'tab',\r\n    };\r\n\r\n    const key = rawKey.toLowerCase();\r\n    return normalizeKeyMap[key] || (key.length > 1 ? key : rawKey);\r\n  }\r\n\r\n  /**\r\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\r\n   * @param  {object} e The KeyboardEvent\r\n   * @returns {string} The simple-keyboard layout key\r\n   */\r\n  getSimpleKeyboardLayoutKey(e: KeyboardEvent): string {\r\n    let output = '';\r\n\r\n    const options = this.getOptions();\r\n    const currentLayout = options?.layout?.default?.[1] ?? getDefaultLayout().default[1];\r\n    if (this.lastLayout !== currentLayout) {\r\n      this.lastLayout = currentLayout || '';\r\n      const layout = options?.layout ?? getDefaultLayout();\r\n      this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(layout));\r\n    }\r\n\r\n    const eCode = this.normalizeToStandardCode(e.code);\r\n\r\n    // if we have a valid code and it's in the layout, return early\r\n    if (this.layoutJSON && eCode && this.layoutJSON[eCode]) {\r\n      const layoutEntry = this.layoutJSON[eCode];\r\n      output = this.shiftActive || this.capslockActive ? layoutEntry.shift.toString() : layoutEntry.normal.toString();\r\n\r\n      const normalized = this.normalizeOutput(output);\r\n      return normalized;\r\n    }\r\n\r\n    // fallback path for known safe keys\r\n    const fallbackKeys = new Set(['backspace', 'enter', 'tab', 'escape']);\r\n    const key = (e.key || '').toLowerCase();\r\n    if (fallbackKeys.has(key)) {\r\n      output = key;\r\n      const normalized = this.normalizeOutput(output);\r\n      return normalized;\r\n    }\r\n\r\n    // unmapped key — log it and return blank\r\n    console.warn('[simple-keyboard][Edge Case Triggered] Unmapped key event:', {\r\n      code: e.code,\r\n      key: e.key,\r\n      keyCode: e.keyCode,\r\n      layoutJSON: this.layoutJSON,\r\n      userAgent: navigator.userAgent, // Browser + OS info\r\n      platform: navigator.platform, // OS-level platform\r\n      language: navigator.language, // Active input language (e.g., \"ko-KR\")\r\n      imeMode:\r\n        document.activeElement && 'inputMode' in document.activeElement\r\n          ? (document.activeElement as HTMLInputElement | HTMLTextAreaElement).inputMode\r\n          : 'unknown', // Input method\r\n      isEditable: (document.activeElement as HTMLElement)?.isContentEditable || false, // Useful for composition\r\n      time: new Date().toISOString(),\r\n    });\r\n\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Retrieve key from keyCode\r\n   */\r\n  keyCodeToKey(keyCode: number): string {\r\n    return (\r\n      {\r\n        8: 'Backspace',\r\n        9: 'Tab',\r\n        13: 'Enter',\r\n        16: 'Shift',\r\n        17: 'Ctrl',\r\n        18: 'Alt',\r\n        19: 'Pause',\r\n        20: 'CapsLock',\r\n        27: 'Esc',\r\n        32: 'Space',\r\n        33: 'PageUp',\r\n        34: 'PageDown',\r\n        35: 'End',\r\n        36: 'Home',\r\n        37: 'ArrowLeft',\r\n        38: 'ArrowUp',\r\n        39: 'ArrowRight',\r\n        40: 'ArrowDown',\r\n        45: 'Insert',\r\n        46: 'Delete',\r\n        48: '0',\r\n        49: '1',\r\n        50: '2',\r\n        51: '3',\r\n        52: '4',\r\n        53: '5',\r\n        54: '6',\r\n        55: '7',\r\n        56: '8',\r\n        57: '9',\r\n        65: 'A',\r\n        66: 'B',\r\n        67: 'C',\r\n        68: 'D',\r\n        69: 'E',\r\n        70: 'F',\r\n        71: 'G',\r\n        72: 'H',\r\n        73: 'I',\r\n        74: 'J',\r\n        75: 'K',\r\n        76: 'L',\r\n        77: 'M',\r\n        78: 'N',\r\n        79: 'O',\r\n        80: 'P',\r\n        81: 'Q',\r\n        82: 'R',\r\n        83: 'S',\r\n        84: 'T',\r\n        85: 'U',\r\n        86: 'V',\r\n        87: 'W',\r\n        88: 'X',\r\n        89: 'Y',\r\n        90: 'Z',\r\n        91: 'Meta',\r\n        96: 'Numpad0',\r\n        97: 'Numpad1',\r\n        98: 'Numpad2',\r\n        99: 'Numpad3',\r\n        100: 'Numpad4',\r\n        101: 'Numpad5',\r\n        102: 'Numpad6',\r\n        103: 'Numpad7',\r\n        104: 'Numpad8',\r\n        105: 'Numpad9',\r\n        106: 'NumpadMultiply',\r\n        107: 'NumpadAdd',\r\n        109: 'NumpadSubtract',\r\n        110: 'NumpadDecimal',\r\n        111: 'NumpadDivide',\r\n        112: 'F1',\r\n        113: 'F2',\r\n        114: 'F3',\r\n        115: 'F4',\r\n        116: 'F5',\r\n        117: 'F6',\r\n        118: 'F7',\r\n        119: 'F8',\r\n        120: 'F9',\r\n        121: 'F10',\r\n        122: 'F11',\r\n        123: 'F12',\r\n        144: 'NumLock',\r\n        145: 'ScrollLock',\r\n        186: ';',\r\n        187: '=',\r\n        188: ',',\r\n        189: '-',\r\n        190: '.',\r\n        191: '/',\r\n        192: '`',\r\n        219: '[',\r\n        220: '\\\\',\r\n        221: ']',\r\n        222: \"'\",\r\n      }[keyCode] || ''\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Extracts and pads a layout object\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with padding\r\n   */\r\n  extractAndPadLayout(layout: Record<string, string[]>): Record<string, (string | number)[][]> {\r\n    const qwertyRowLengths = [14, 14, 13, 12, 3]; // Number of keys per QWERTY row\r\n\r\n    const processedLayout: Record<string, (string | number)[][]> = { default: [], shift: [] };\r\n\r\n    for (const type of ['default', 'shift']) {\r\n      if (!layout[type]) continue; // Skip if layout type is missing\r\n\r\n      const rows = layout[type].map((row) => row.split(' '));\r\n\r\n      for (let i = 0; i < qwertyRowLengths.length; i++) {\r\n        processedLayout[type][i] = rows[i] ? [...rows[i]] : [];\r\n        while (processedLayout[type][i].length < qwertyRowLengths[i]) {\r\n          processedLayout[type][i].push(-1); // Fill missing spots\r\n        }\r\n      }\r\n    }\r\n\r\n    return processedLayout;\r\n  }\r\n\r\n  /**\r\n   * Maps a layout object to event codes\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with event codes\r\n   */\r\n\r\n  mapLayoutToEventCodes(layout: Record<string, (string | number)[][]>): Record<string, LayoutKeyMapping> {\r\n    const mappedLayout: Record<string, LayoutKeyMapping> = {};\r\n\r\n    const qwertyRows = [\r\n      [\r\n        'Backquote',\r\n        'Digit1',\r\n        'Digit2',\r\n        'Digit3',\r\n        'Digit4',\r\n        'Digit5',\r\n        'Digit6',\r\n        'Digit7',\r\n        'Digit8',\r\n        'Digit9',\r\n        'Digit0',\r\n        'Minus',\r\n        'Equal',\r\n        'Backspace',\r\n      ],\r\n      [\r\n        'Tab',\r\n        'KeyQ',\r\n        'KeyW',\r\n        'KeyE',\r\n        'KeyR',\r\n        'KeyT',\r\n        'KeyY',\r\n        'KeyU',\r\n        'KeyI',\r\n        'KeyO',\r\n        'KeyP',\r\n        'BracketLeft',\r\n        'BracketRight',\r\n        'Backslash',\r\n      ],\r\n      [\r\n        'CapsLock',\r\n        'KeyA',\r\n        'KeyS',\r\n        'KeyD',\r\n        'KeyF',\r\n        'KeyG',\r\n        'KeyH',\r\n        'KeyJ',\r\n        'KeyK',\r\n        'KeyL',\r\n        'Semicolon',\r\n        'Quote',\r\n        'Enter',\r\n      ],\r\n      ['ShiftLeft', 'KeyZ', 'KeyX', 'KeyC', 'KeyV', 'KeyB', 'KeyN', 'KeyM', 'Comma', 'Period', 'Slash', 'ShiftRight'],\r\n      ['ControlLeft', 'AltLeft', 'Space'],\r\n    ];\r\n\r\n    for (let rowIndex = 0; rowIndex < qwertyRows.length; rowIndex++) {\r\n      for (let colIndex = 0; colIndex < qwertyRows[rowIndex].length; colIndex++) {\r\n        const eventCode = qwertyRows[rowIndex][colIndex];\r\n        const normalKey = layout.default[rowIndex][colIndex] ?? '';\r\n        const shiftKey = layout.shift[rowIndex][colIndex] ?? '';\r\n\r\n        mappedLayout[eventCode] = {\r\n          normal: normalKey !== -1 ? normalKey : '',\r\n          shift: shiftKey !== -1 ? shiftKey : '',\r\n        };\r\n      }\r\n    }\r\n\r\n    return mappedLayout;\r\n  }\r\n\r\n  isModifierKey = (e: KeyboardEvent): boolean => {\r\n    return (\r\n      e.altKey ||\r\n      e.ctrlKey ||\r\n      e.shiftKey ||\r\n      ['Tab', 'CapsLock', 'Esc', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(\r\n        e.code || e.key || this.keyCodeToKey(e?.keyCode)\r\n      )\r\n    );\r\n  };\r\n}\r\n\r\nexport default PhysicalKeyboard;\r\n","import { KeyboardLayoutObject } from \"../interfaces\";\r\n\r\nexport const getDefaultLayout = (): KeyboardLayoutObject => {\r\n  return {\r\n    default: [\r\n      \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\r\n      \"{tab} q w e r t y u i o p [ ] \\\\\",\r\n      \"{lock} a s d f g h j k l ; ' {enter}\",\r\n      \"{shift} z x c v b n m , . / {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n    shift: [\r\n      \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\r\n      \"{tab} Q W E R T Y U I O P { } |\",\r\n      '{lock} A S D F G H J K L : \" {enter}',\r\n      \"{shift} Z X C V B N M < > ? {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n  };\r\n};\r\n","import \"./css/CandidateBox.css\";\r\n\r\nimport Utilities from \"../services/Utilities\";\r\nimport {\r\n  CandidateBoxParams,\r\n  CandidateBoxRenderParams,\r\n  CandidateBoxShowParams,\r\n  KeyboardOptions,\r\n} from \"./../interfaces\";\r\n\r\nclass CandidateBox {\r\n  utilities: Utilities;\r\n  options: KeyboardOptions;\r\n  candidateBoxElement!: HTMLDivElement;\r\n  pageIndex = 0;\r\n  pageSize: number;\r\n\r\n  constructor({ utilities, options }: CandidateBoxParams) {\r\n    this.utilities = utilities;\r\n    this.options = options;\r\n    Utilities.bindMethods(CandidateBox, this);\r\n    this.pageSize = this.utilities.getOptions().layoutCandidatesPageSize || 5;\r\n  }\r\n\r\n  destroy() {\r\n    if (this.candidateBoxElement) {\r\n      this.candidateBoxElement.remove();\r\n      this.pageIndex = 0;\r\n    }\r\n  }\r\n\r\n  show({\r\n    candidateValue,\r\n    targetElement,\r\n    onSelect,\r\n  }: CandidateBoxShowParams): void {\r\n    if (!candidateValue || !candidateValue.length) {\r\n      return;\r\n    }\r\n\r\n    const candidateListPages = this.utilities.chunkArray(\r\n      candidateValue.split(\" \"),\r\n      this.pageSize\r\n    );\r\n\r\n    this.renderPage({\r\n      candidateListPages,\r\n      targetElement,\r\n      pageIndex: this.pageIndex,\r\n      nbPages: candidateListPages.length,\r\n      onItemSelected: (selectedCandidate: string, e: MouseEvent) => {\r\n        onSelect(selectedCandidate, e);\r\n        this.destroy();\r\n      },\r\n    });\r\n  }\r\n\r\n  renderPage({\r\n    candidateListPages,\r\n    targetElement,\r\n    pageIndex,\r\n    nbPages,\r\n    onItemSelected,\r\n  }: CandidateBoxRenderParams) {\r\n    // Remove current candidate box, if any\r\n    this.candidateBoxElement?.remove();\r\n\r\n    // Create candidate box element\r\n    this.candidateBoxElement = document.createElement(\"div\");\r\n    this.candidateBoxElement.className = \"hg-candidate-box\";\r\n\r\n    // Candidate box list\r\n    const candidateListULElement = document.createElement(\"ul\");\r\n    candidateListULElement.className = \"hg-candidate-box-list\";\r\n\r\n    // Create Candidate box list items\r\n    candidateListPages[pageIndex].forEach((candidateListItem) => {\r\n      const candidateListLIElement = document.createElement(\"li\");\r\n      const getMouseEvent = () => {\r\n        const mouseEvent = new (this.options.useTouchEvents ? TouchEvent : MouseEvent)(\"click\");\r\n        Object.defineProperty(mouseEvent, \"target\", {\r\n          value: candidateListLIElement,\r\n        });\r\n        return mouseEvent;\r\n      };\r\n\r\n      candidateListLIElement.className = \"hg-candidate-box-list-item\";\r\n      candidateListLIElement.innerHTML = this.options.display?.[candidateListItem] || candidateListItem;\r\n\r\n      if(this.options.useTouchEvents) {\r\n        candidateListLIElement.ontouchstart = (e: any) =>\r\n          onItemSelected(candidateListItem, e || getMouseEvent());\r\n      } else {\r\n        candidateListLIElement.onclick = (e = getMouseEvent() as MouseEvent) =>\r\n          onItemSelected(candidateListItem, e);\r\n      }\r\n\r\n      // Append list item to ul\r\n      candidateListULElement.appendChild(candidateListLIElement);\r\n    });\r\n\r\n    // Add previous button\r\n    const isPrevBtnElementActive = pageIndex > 0;\r\n    const prevBtnElement = document.createElement(\"div\");\r\n    prevBtnElement.classList.add(\"hg-candidate-box-prev\");\r\n    isPrevBtnElementActive &&\r\n      prevBtnElement.classList.add(\"hg-candidate-box-btn-active\");\r\n\r\n    const prevBtnElementClickAction = () => {\r\n      if (!isPrevBtnElementActive) return;\r\n      this.renderPage({\r\n        candidateListPages,\r\n        targetElement,\r\n        pageIndex: pageIndex - 1,\r\n        nbPages,\r\n        onItemSelected,\r\n      });\r\n    };\r\n\r\n    if(this.options.useTouchEvents) {\r\n      prevBtnElement.ontouchstart = prevBtnElementClickAction;\r\n    } else {\r\n      prevBtnElement.onclick = prevBtnElementClickAction;\r\n    }\r\n    \r\n    this.candidateBoxElement.appendChild(prevBtnElement);\r\n\r\n    // Add elements to container\r\n    this.candidateBoxElement.appendChild(candidateListULElement);\r\n\r\n    // Add next button\r\n    const isNextBtnElementActive = pageIndex < nbPages - 1;\r\n    const nextBtnElement = document.createElement(\"div\");\r\n    nextBtnElement.classList.add(\"hg-candidate-box-next\");\r\n    isNextBtnElementActive &&\r\n      nextBtnElement.classList.add(\"hg-candidate-box-btn-active\");\r\n\r\n    const nextBtnElementClickAction = () => {\r\n      if (!isNextBtnElementActive) return;\r\n      this.renderPage({\r\n        candidateListPages,\r\n        targetElement,\r\n        pageIndex: pageIndex + 1,\r\n        nbPages,\r\n        onItemSelected,\r\n      });\r\n    };\r\n\r\n    if(this.options.useTouchEvents) {\r\n      nextBtnElement.ontouchstart = nextBtnElementClickAction;\r\n    } else {\r\n      nextBtnElement.onclick = nextBtnElementClickAction;\r\n    }\r\n\r\n    this.candidateBoxElement.appendChild(nextBtnElement);\r\n\r\n    // Append candidate box to target element\r\n    targetElement.prepend(this.candidateBoxElement);\r\n  }\r\n}\r\n\r\nexport default CandidateBox;\r\n","import './css/Keyboard.css';\r\n\r\nimport { getDefaultLayout } from '../services/KeyboardLayout';\r\nimport PhysicalKeyboard from '../services/PhysicalKeyboard';\r\nimport Utilities from '../services/Utilities';\r\nimport {\r\n  KeyboardOptions,\r\n  KeyboardInput,\r\n  KeyboardButtonElements,\r\n  KeyboardHandlerEvent,\r\n  KeyboardElement,\r\n  SKWindow,\r\n} from '../interfaces';\r\nimport CandidateBox from './CandidateBox';\r\n\r\n/**\r\n * Root class for simple-keyboard.\r\n * This class:\r\n * - Parses the options\r\n * - Renders the rows and buttons\r\n * - Handles button functionality\r\n */\r\nclass SimpleKeyboard {\r\n  input!: KeyboardInput;\r\n  options!: KeyboardOptions;\r\n  utilities!: Utilities;\r\n  caretPosition!: number | null;\r\n  caretPositionEnd!: number | null;\r\n  keyboardDOM!: KeyboardElement;\r\n  keyboardPluginClasses!: string;\r\n  keyboardDOMClass!: string;\r\n  buttonElements!: KeyboardButtonElements;\r\n  currentInstanceName!: string;\r\n  allKeyboardInstances!: { [key: string]: SimpleKeyboard };\r\n  keyboardInstanceNames!: string[];\r\n  isFirstKeyboardInstance!: boolean;\r\n  physicalKeyboard!: PhysicalKeyboard;\r\n  modules!: { [key: string]: any };\r\n  activeButtonClass!: string;\r\n  holdInteractionTimeout!: number;\r\n  holdTimeout!: number;\r\n  isMouseHold!: boolean;\r\n  initialized!: boolean;\r\n  candidateBox!: CandidateBox | null;\r\n  keyboardRowsDOM!: KeyboardElement;\r\n  defaultName = 'default';\r\n  activeInputElement: HTMLInputElement | HTMLTextAreaElement | null = null;\r\n  listenersAdded = false;\r\n\r\n  /**\r\n   * Creates an instance of SimpleKeyboard\r\n   * @param {Array} selectorOrOptions If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\r\n   */\r\n  constructor(selectorOrOptions?: string | HTMLDivElement | KeyboardOptions, keyboardOptions?: KeyboardOptions) {\r\n    if (typeof window === 'undefined') return;\r\n\r\n    const { keyboardDOMClass, keyboardDOM, options = {} } = this.handleParams(selectorOrOptions, keyboardOptions);\r\n\r\n    /**\r\n     * Initializing Utilities\r\n     */\r\n    this.utilities = new Utilities({\r\n      getOptions: this.getOptions,\r\n      getCaretPosition: this.getCaretPosition,\r\n      getCaretPositionEnd: this.getCaretPositionEnd,\r\n      dispatch: this.dispatch,\r\n    });\r\n\r\n    /**\r\n     * Caret position\r\n     */\r\n    this.caretPosition = null;\r\n\r\n    /**\r\n     * Caret position end\r\n     */\r\n    this.caretPositionEnd = null;\r\n\r\n    /**\r\n     * Processing options\r\n     */\r\n    this.keyboardDOM = keyboardDOM;\r\n\r\n    /**\r\n     * @type {object}\r\n     * @property {object} layout Modify the keyboard layout.\r\n     * @property {string} layoutName Specifies which layout should be used.\r\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\r\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\r\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\r\n     * @property {array} buttonTheme A prop to add your own css classes to one or several buttons.\r\n     * @property {array} buttonAttributes A prop to add your own attributes to one or several buttons.\r\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\r\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\r\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\r\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\r\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\r\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\r\n     * @property {boolean} physicalKeyboardHighlightPress Presses keys highlighted by physicalKeyboardHighlight\r\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\r\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\r\n     * @property {boolean} physicalKeyboardHighlightPressUseClick Whether physicalKeyboardHighlightPress should use clicks to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPressUsePointerEvents Whether physicalKeyboardHighlightPress should use pointer events to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPreventDefault Whether physicalKeyboardHighlight should use preventDefault to disable default browser actions.\r\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\r\n     * @property {boolean} preventMouseUpDefault Calling preventDefault for the mouseup events.\r\n     * @property {boolean} stopMouseDownPropagation Stops pointer down events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {boolean} stopMouseUpPropagation Stops pointer up events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\r\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\r\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n     * @property {function(keyboard: Keyboard):void} beforeInputUpdate Perform an action before any input change\r\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\r\n     * @property {boolean} useButtonTag Render buttons as a button element instead of a div element.\r\n     * @property {boolean} disableCaretPositioning A prop to ensure characters are always be added/removed at the end of the string.\r\n     * @property {object} inputPattern Restrains input(s) change to the defined regular expression pattern.\r\n     * @property {boolean} useTouchEvents Instructs simple-keyboard to use touch events instead of click events.\r\n     * @property {boolean} autoUseTouchEvents Enable useTouchEvents automatically when touch device is detected.\r\n     * @property {boolean} useMouseEvents Opt out of PointerEvents handling, falling back to the prior mouse event logic.\r\n     * @property {function} destroy Clears keyboard listeners and DOM elements.\r\n     * @property {boolean} disableButtonHold Disable button hold action.\r\n     * @property {boolean} rtl Adds unicode right-to-left control characters to input return values.\r\n     * @property {function} onKeyReleased Executes the callback function on key release.\r\n     * @property {array} modules Module classes to be loaded by simple-keyboard.\r\n     * @property {boolean} enableLayoutCandidates Enable input method editor candidate list support.\r\n     * @property {object} excludeFromLayout Buttons to exclude from layout\r\n     * @property {number} layoutCandidatesPageSize Determines size of layout candidate list\r\n     * @property {boolean} layoutCandidatesCaseSensitiveMatch Determines whether layout candidate match should be case sensitive.\r\n     * @property {boolean} disableCandidateNormalization Disables the automatic normalization for selected layout candidates\r\n     * @property {boolean} enableLayoutCandidatesKeyPress Enables onKeyPress triggering for layoutCandidate items\r\n     * @property {boolean} updateCaretOnSelectionChange Updates caret when selectionchange event is fired\r\n     * @property {boolean} clickOnMouseDown When useMouseEvents is enabled, this option allows you to trigger a button click event on mousedown\r\n     */\r\n    this.options = {\r\n      layoutName: 'default',\r\n      theme: 'hg-theme-default',\r\n      inputName: 'default',\r\n      preventMouseDownDefault: false,\r\n      enableLayoutCandidates: true,\r\n      excludeFromLayout: {},\r\n      ...options,\r\n    };\r\n\r\n    /**\r\n     * @type {object} Classes identifying loaded plugins\r\n     */\r\n    this.keyboardPluginClasses = '';\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(SimpleKeyboard, this);\r\n\r\n    /**\r\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\r\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\r\n     * @example\r\n     * // To get entered input\r\n     * const input = keyboard.getInput();\r\n     *\r\n     * // To clear entered input.\r\n     * keyboard.clearInput();\r\n     *\r\n     * @type {object}\r\n     * @property {object} default Default SimpleKeyboard internal input.\r\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\r\n     */\r\n    const { inputName = this.defaultName } = this.options;\r\n    this.input = {};\r\n    this.input[inputName] = '';\r\n\r\n    /**\r\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\r\n     */\r\n    this.keyboardDOMClass = keyboardDOMClass;\r\n\r\n    /**\r\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\r\n     */\r\n    this.buttonElements = {};\r\n\r\n    /**\r\n     * Simple-keyboard Instances\r\n     * This enables multiple simple-keyboard support with easier management\r\n     */\r\n    if (!(window as SKWindow)['SimpleKeyboardInstances']) (window as SKWindow)['SimpleKeyboardInstances'] = {};\r\n\r\n    this.currentInstanceName = this.utilities.camelCase(this.keyboardDOMClass);\r\n    (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName] = this;\r\n\r\n    /**\r\n     * Instance vars\r\n     */\r\n    this.allKeyboardInstances = (window as SKWindow)['SimpleKeyboardInstances'];\r\n    this.keyboardInstanceNames = Object.keys((window as SKWindow)['SimpleKeyboardInstances']);\r\n    this.isFirstKeyboardInstance = this.keyboardInstanceNames[0] === this.currentInstanceName;\r\n\r\n    /**\r\n     * Physical Keyboard support\r\n     */\r\n    this.physicalKeyboard = new PhysicalKeyboard({\r\n      dispatch: this.dispatch,\r\n      getOptions: this.getOptions,\r\n    });\r\n\r\n    /**\r\n     * Initializing CandidateBox\r\n     */\r\n    this.candidateBox = this.options.enableLayoutCandidates\r\n      ? new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        })\r\n      : null;\r\n\r\n    /**\r\n     * Rendering keyboard\r\n     */\r\n    if (this.keyboardDOM) this.render();\r\n    else {\r\n      console.warn(`\".${keyboardDOMClass}\" was not found in the DOM.`);\r\n      throw new Error('KEYBOARD_DOM_ERROR');\r\n    }\r\n\r\n    /**\r\n     * Modules\r\n     */\r\n    this.modules = {};\r\n    this.loadModules();\r\n  }\r\n\r\n  /**\r\n   * parseParams\r\n   */\r\n  handleParams = (\r\n    selectorOrOptions?: string | HTMLDivElement | KeyboardOptions,\r\n    keyboardOptions?: KeyboardOptions\r\n  ): {\r\n    keyboardDOMClass: string;\r\n    keyboardDOM: KeyboardElement;\r\n    options: Partial<KeyboardOptions | undefined>;\r\n  } => {\r\n    let keyboardDOMClass;\r\n    let keyboardDOM;\r\n    let options;\r\n\r\n    /**\r\n     * If first parameter is a string:\r\n     * Consider it as an element's class\r\n     */\r\n    if (typeof selectorOrOptions === 'string') {\r\n      keyboardDOMClass = selectorOrOptions.split('.').join('');\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * If first parameter is an KeyboardElement\r\n       * Consider it as the keyboard DOM element\r\n       */\r\n    } else if (selectorOrOptions instanceof HTMLDivElement) {\r\n      /**\r\n       * This element must have a class, otherwise throw\r\n       */\r\n      if (!selectorOrOptions.className) {\r\n        console.warn('Any DOM element passed as parameter must have a class.');\r\n        throw new Error('KEYBOARD_DOM_CLASS_ERROR');\r\n      }\r\n\r\n      keyboardDOMClass = selectorOrOptions.className.split(' ')[0];\r\n      keyboardDOM = selectorOrOptions;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * Otherwise, search for .simple-keyboard DOM element\r\n       */\r\n    } else {\r\n      keyboardDOMClass = 'simple-keyboard';\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = selectorOrOptions;\r\n    }\r\n\r\n    return {\r\n      keyboardDOMClass,\r\n      keyboardDOM,\r\n      options,\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Getters\r\n   */\r\n  getOptions = (): KeyboardOptions => this.options;\r\n  getCaretPosition = (): number | null => this.caretPosition;\r\n  getCaretPositionEnd = (): number | null => this.caretPositionEnd;\r\n\r\n  /**\r\n   * Changes the internal caret position\r\n   * @param {number} position The caret's start position\r\n   * @param {number} positionEnd The caret's end position\r\n   */\r\n  setCaretPosition(position: number | null, endPosition = position): void {\r\n    this.caretPosition = position;\r\n    this.caretPositionEnd = endPosition;\r\n  }\r\n\r\n  /**\r\n   * Retrieve the candidates for a given input\r\n   * @param input The input string to check\r\n   */\r\n  getInputCandidates(input: string): { candidateKey: string; candidateValue: string } | Record<string, never> {\r\n    const { layoutCandidates: layoutCandidatesObj, layoutCandidatesCaseSensitiveMatch } = this.options;\r\n\r\n    if (!layoutCandidatesObj || typeof layoutCandidatesObj !== 'object') {\r\n      return {};\r\n    }\r\n\r\n    const layoutCandidates = Object.keys(layoutCandidatesObj).filter((layoutCandidate: string) => {\r\n      const inputSubstr = input.substring(0, this.getCaretPositionEnd() || 0) || input;\r\n      const regexp = new RegExp(\r\n        `${this.utilities.escapeRegex(layoutCandidate)}$`,\r\n        layoutCandidatesCaseSensitiveMatch ? 'g' : 'gi'\r\n      );\r\n      const matches = [...inputSubstr.matchAll(regexp)];\r\n      return !!matches.length;\r\n    });\r\n\r\n    if (layoutCandidates.length > 1) {\r\n      const candidateKey = layoutCandidates.sort((a, b) => b.length - a.length)[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else if (layoutCandidates.length) {\r\n      const candidateKey = layoutCandidates[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows a suggestion box with a list of candidate words\r\n   * @param candidates The chosen candidates string as defined in the layoutCandidates option\r\n   * @param targetElement The element next to which the candidates box will be shown\r\n   */\r\n  showCandidatesBox(candidateKey: string, candidateValue: string, targetElement: KeyboardElement): void {\r\n    if (this.candidateBox) {\r\n      this.candidateBox.show({\r\n        candidateValue,\r\n        targetElement,\r\n        onSelect: (selectedCandidate: string, e: MouseEvent) => {\r\n          const { layoutCandidatesCaseSensitiveMatch, disableCandidateNormalization, enableLayoutCandidatesKeyPress } =\r\n            this.options;\r\n\r\n          let candidateStr = selectedCandidate;\r\n\r\n          if (!disableCandidateNormalization) {\r\n            /**\r\n             * Making sure that our suggestions are not composed characters\r\n             */\r\n            candidateStr = selectedCandidate.normalize('NFD');\r\n          }\r\n\r\n          /**\r\n           * Perform an action before any input change\r\n           */\r\n          if (typeof this.options.beforeInputUpdate === 'function') {\r\n            this.options.beforeInputUpdate(this);\r\n          }\r\n\r\n          const currentInput = this.getInput(this.options.inputName, true);\r\n          const initialCaretPosition = this.getCaretPositionEnd() || 0;\r\n          const inputSubstr = currentInput.substring(0, initialCaretPosition || 0) || currentInput;\r\n\r\n          const regexp = new RegExp(\r\n            `${this.utilities.escapeRegex(candidateKey)}$`,\r\n            layoutCandidatesCaseSensitiveMatch ? 'g' : 'gi'\r\n          );\r\n          const newInputSubstr = inputSubstr.replace(regexp, candidateStr);\r\n          const newInput = currentInput.replace(inputSubstr, newInputSubstr);\r\n\r\n          const caretPositionDiff = newInputSubstr.length - inputSubstr.length;\r\n          let newCaretPosition = (initialCaretPosition || currentInput.length) + caretPositionDiff;\r\n\r\n          if (newCaretPosition < 0) newCaretPosition = 0;\r\n\r\n          this.setInput(newInput, this.options.inputName, true);\r\n          this.setCaretPosition(newCaretPosition);\r\n\r\n          /**\r\n           * Calling onKeyPress\r\n           * We pass in the composed candidate instead of the decomposed one\r\n           * To prevent confusion for users\r\n           */\r\n          if (enableLayoutCandidatesKeyPress && typeof this.options.onKeyPress === 'function') {\r\n            this.options.onKeyPress(selectedCandidate, e);\r\n          }\r\n\r\n          if (typeof this.options.onChange === 'function') {\r\n            this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n          }\r\n\r\n          /**\r\n           * Calling onChangeAll\r\n           */\r\n          if (typeof this.options.onChangeAll === 'function') this.options.onChangeAll(this.getAllInputs(), e);\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles clicks made to keyboard buttons\r\n   * @param  {string} button The button's layout name.\r\n   */\r\n  handleButtonClicked(button: string, e?: KeyboardHandlerEvent): void {\r\n    const { inputName = this.defaultName, debug } = this.options;\r\n    /**\r\n     * Ignoring placeholder buttons\r\n     */\r\n    if (button === '{//}') return;\r\n\r\n    /**\r\n     * Creating inputName if it doesn't exist\r\n     */\r\n    if (!this.input[inputName]) this.input[inputName] = '';\r\n\r\n    /**\r\n     * Perform an action before any input change\r\n     */\r\n    if (typeof this.options.beforeInputUpdate === 'function') {\r\n      this.options.beforeInputUpdate(this);\r\n    }\r\n\r\n    /**\r\n     * Calculating new input\r\n     */\r\n    const updatedInput = this.utilities.getUpdatedInput(\r\n      button,\r\n      this.input[inputName],\r\n      this.caretPosition,\r\n      this.caretPositionEnd\r\n    );\r\n\r\n    /**\r\n     * EDGE CASE: Check for whole input selection changes that will yield same updatedInput\r\n     */\r\n    if (this.utilities.isStandardButton(button) && this.activeInputElement) {\r\n      const isEntireInputSelection =\r\n        this.input[inputName] &&\r\n        this.input[inputName] === updatedInput &&\r\n        this.caretPosition === 0 &&\r\n        this.caretPositionEnd === updatedInput.length;\r\n\r\n      if (isEntireInputSelection) {\r\n        this.setInput('', this.options.inputName, true);\r\n        this.setCaretPosition(0);\r\n        this.activeInputElement.value = '';\r\n        this.activeInputElement.setSelectionRange(0, 0);\r\n        this.handleButtonClicked(button, e);\r\n        return;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Calling onKeyPress\r\n     */\r\n    if (typeof this.options.onKeyPress === 'function') this.options.onKeyPress(button, e);\r\n\r\n    if (\r\n      // If input will change as a result of this button press\r\n      this.input[inputName] !== updatedInput &&\r\n      // This pertains to the \"inputPattern\" option:\r\n      // If inputPattern isn't set\r\n      (!this.options.inputPattern ||\r\n        // Or, if it is set and if the pattern is valid - we proceed.\r\n        (this.options.inputPattern && this.inputPatternIsValid(updatedInput)))\r\n    ) {\r\n      /**\r\n       * If maxLength and handleMaxLength yield true, halting\r\n       */\r\n      if (this.options.maxLength && this.utilities.handleMaxLength(this.input, updatedInput)) {\r\n        return;\r\n      }\r\n\r\n      /**\r\n       * Updating input\r\n       */\r\n      const newInputValue = this.utilities.getUpdatedInput(\r\n        button,\r\n        this.input[inputName],\r\n        this.caretPosition,\r\n        this.caretPositionEnd,\r\n        true\r\n      );\r\n\r\n      this.setInput(newInputValue, this.options.inputName, true);\r\n\r\n      if (debug) console.log('Input changed:', this.getAllInputs());\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          'Caret at: ',\r\n          this.getCaretPosition(),\r\n          this.getCaretPositionEnd(),\r\n          `(${this.keyboardDOMClass})`,\r\n          e?.type\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Enforce syncInstanceInputs, if set\r\n       */\r\n      if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n\r\n      /**\r\n       * Calling onChange\r\n       */\r\n      if (typeof this.options.onChange === 'function')\r\n        this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n\r\n      /**\r\n       * Calling onChangeAll\r\n       */\r\n      if (typeof this.options.onChangeAll === 'function') this.options.onChangeAll(this.getAllInputs(), e);\r\n\r\n      /**\r\n       * Check if this new input has candidates (suggested words)\r\n       */\r\n      if (e?.target && this.options.enableLayoutCandidates) {\r\n        const { candidateKey, candidateValue } = this.getInputCandidates(updatedInput);\r\n\r\n        if (candidateKey && candidateValue) {\r\n          this.showCandidatesBox(candidateKey, candidateValue, this.keyboardDOM);\r\n        } else {\r\n          this.candidateBox?.destroy();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * After a button is clicked the selection (if any) will disappear\r\n     * we should reflect this in our state, as applicable\r\n     */\r\n    if (this.caretPositionEnd && this.caretPosition !== this.caretPositionEnd) {\r\n      this.setCaretPosition(this.caretPositionEnd, this.caretPositionEnd);\r\n\r\n      if (this.activeInputElement) {\r\n        this.activeInputElement.setSelectionRange(this.caretPositionEnd, this.caretPositionEnd);\r\n      }\r\n\r\n      if (this.options.debug) {\r\n        console.log('Caret position aligned', this.caretPosition);\r\n      }\r\n    }\r\n\r\n    if (debug) {\r\n      console.log('Key pressed:', button);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get mouse hold state\r\n   */\r\n  getMouseHold() {\r\n    return this.isMouseHold;\r\n  }\r\n\r\n  /**\r\n   * Mark mouse hold state as set\r\n   */\r\n  setMouseHold(value: boolean) {\r\n    if (this.options.syncInstanceInputs) {\r\n      this.dispatch((instance: SimpleKeyboard) => {\r\n        instance.isMouseHold = value;\r\n      });\r\n    } else {\r\n      this.isMouseHold = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mousedown\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonMouseDown(button: string, e: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseDownDefault) e.preventDefault();\r\n      if (this.options.stopMouseDownPropagation) e.stopPropagation();\r\n\r\n      /**\r\n       * Add active class\r\n       */\r\n      e.target.classList.add(this.activeButtonClass);\r\n    }\r\n\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n    if (this.holdTimeout) clearTimeout(this.holdTimeout);\r\n\r\n    /**\r\n     * @type {boolean} Whether the mouse is being held onKeyPress\r\n     */\r\n    this.setMouseHold(true);\r\n\r\n    /**\r\n     * @type {object} Time to wait until a key hold is detected\r\n     */\r\n    if (!this.options.disableButtonHold) {\r\n      this.holdTimeout = window.setTimeout(() => {\r\n        if (\r\n          (this.getMouseHold() &&\r\n            // TODO: This needs to be configurable through options\r\n            ((!button.includes('{') && !button.includes('}')) ||\r\n              button === '{delete}' ||\r\n              button === '{backspace}' ||\r\n              button === '{bksp}' ||\r\n              button === '{space}' ||\r\n              button === '{tab}')) ||\r\n          button === '{arrowright}' ||\r\n          button === '{arrowleft}' ||\r\n          button === '{arrowup}' ||\r\n          button === '{arrowdown}'\r\n        ) {\r\n          if (this.options.debug) console.log('Button held:', button);\r\n\r\n          this.handleButtonHold(button);\r\n        }\r\n        clearTimeout(this.holdTimeout);\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mouseup\r\n   */\r\n  handleButtonMouseUp(button?: string, e?: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseUpDefault && e.preventDefault) e.preventDefault();\r\n      if (this.options.stopMouseUpPropagation && e.stopPropagation) e.stopPropagation();\r\n\r\n      /* istanbul ignore next */\r\n      const isKeyboard =\r\n        e.target === this.keyboardDOM ||\r\n        (e.target && this.keyboardDOM.contains(e.target)) ||\r\n        (this.candidateBox &&\r\n          this.candidateBox.candidateBoxElement &&\r\n          (e.target === this.candidateBox.candidateBoxElement ||\r\n            (e.target && this.candidateBox.candidateBoxElement.contains(e.target))));\r\n\r\n      /**\r\n       * On click outside, remove candidateBox\r\n       */\r\n      if (!isKeyboard && this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Remove active class\r\n     */\r\n    this.recurseButtons((buttonElement: Element) => {\r\n      buttonElement.classList.remove(this.activeButtonClass);\r\n    });\r\n\r\n    this.setMouseHold(false);\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * Calling onKeyReleased\r\n     */\r\n    if (button && typeof this.options.onKeyReleased === 'function') this.options.onKeyReleased(button, e);\r\n  }\r\n\r\n  /**\r\n   * Handles container mousedown\r\n   */\r\n  handleKeyboardContainerMouseDown(e: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Handle event options\r\n     */\r\n    if (this.options.preventMouseDownDefault) e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Handles button hold\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonHold(button: string): void {\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * @type {object} Timeout dictating the speed of key hold iterations\r\n     */\r\n    this.holdInteractionTimeout = window.setTimeout(() => {\r\n      if (this.getMouseHold()) {\r\n        this.handleButtonClicked(button);\r\n        this.handleButtonHold(button);\r\n      } else {\r\n        clearTimeout(this.holdInteractionTimeout);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances (if you have several instances).\r\n   */\r\n  syncInstanceInputs(): void {\r\n    this.dispatch((instance: SimpleKeyboard) => {\r\n      instance.replaceInput(this.input);\r\n      instance.setCaretPosition(this.caretPosition, this.caretPositionEnd);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the keyboard’s input.\r\n   * @param {string} [inputName] optional - the internal input to select\r\n   */\r\n  clearInput(inputName: string = this.options.inputName || this.defaultName): void {\r\n    this.input[inputName] = '';\r\n\r\n    /**\r\n     * Reset caretPosition\r\n     */\r\n    this.setCaretPosition(0);\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Get the keyboard’s input (You can also get it from the onChange prop).\r\n   * @param  {string} [inputName] optional - the internal input to select\r\n   */\r\n  getInput(inputName: string = this.options.inputName || this.defaultName, skipSync = false): string {\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs && !skipSync) this.syncInstanceInputs();\r\n\r\n    if (this.options.rtl) {\r\n      // Remove existing control chars\r\n      const inputWithoutRTLControl = this.input[inputName].replace('\\u202B', '').replace('\\u202C', '');\r\n\r\n      return '\\u202B' + inputWithoutRTLControl + '\\u202C';\r\n    } else {\r\n      return this.input[inputName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all simple-keyboard inputs\r\n   */\r\n  getAllInputs(): KeyboardInput {\r\n    const output = {} as KeyboardInput;\r\n    const inputNames = Object.keys(this.input);\r\n\r\n    inputNames.forEach((inputName) => {\r\n      output[inputName] = this.getInput(inputName, true);\r\n    });\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Set the keyboard’s input.\r\n   * @param  {string} input the input value\r\n   * @param  {string} inputName optional - the internal input to select\r\n   */\r\n  setInput(input: string, inputName: string = this.options.inputName || this.defaultName, skipSync?: boolean): void {\r\n    this.input[inputName] = input;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (!skipSync && this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Replace the input object (`keyboard.input`)\r\n   * @param  {object} inputObj The input object\r\n   */\r\n  replaceInput(inputObj: KeyboardInput): void {\r\n    this.input = inputObj;\r\n  }\r\n\r\n  /**\r\n   * Set new option or modify existing ones after initialization.\r\n   * @param  {object} options The options to set\r\n   */\r\n  setOptions(options = {}): void {\r\n    const changedOptions = this.changedOptions(options);\r\n    this.options = Object.assign(this.options, options);\r\n\r\n    if (changedOptions.length) {\r\n      if (this.options.debug) {\r\n        console.log('changedOptions', changedOptions);\r\n      }\r\n\r\n      /**\r\n       * Some option changes require adjustments before re-render\r\n       */\r\n      this.onSetOptions(changedOptions);\r\n\r\n      /**\r\n       * Rendering\r\n       */\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detecting changes to non-function options\r\n   * This allows us to ascertain whether a button re-render is needed\r\n   */\r\n  changedOptions(newOptions: Partial<KeyboardOptions>): string[] {\r\n    return Object.keys(newOptions).filter(\r\n      (optionName) => JSON.stringify(newOptions[optionName]) !== JSON.stringify(this.options[optionName])\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Executing actions depending on changed options\r\n   * @param  {object} options The options to set\r\n   */\r\n  onSetOptions(changedOptions: string[] = []): void {\r\n    /**\r\n     * Changed: layoutName\r\n     */\r\n    if (changedOptions.includes('layoutName')) {\r\n      /**\r\n       * Reset candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Changed: layoutCandidatesPageSize, layoutCandidates\r\n     */\r\n    if (changedOptions.includes('layoutCandidatesPageSize') || changedOptions.includes('layoutCandidates')) {\r\n      /**\r\n       * Reset and recreate candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n        this.candidateBox = new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all keyboard rows and reset keyboard values.\r\n   * Used internally between re-renders.\r\n   */\r\n  resetRows(): void {\r\n    if (this.keyboardRowsDOM) {\r\n      this.keyboardRowsDOM.remove();\r\n    }\r\n\r\n    this.keyboardDOM.className = this.keyboardDOMClass;\r\n    this.keyboardDOM.setAttribute('data-skInstance', this.currentInstanceName);\r\n    this.buttonElements = {};\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\r\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\r\n   */\r\n  // eslint-disable-next-line no-unused-vars\r\n  dispatch(callback: (instance: SimpleKeyboard, key?: string) => void): void {\r\n    if (!(window as SKWindow)['SimpleKeyboardInstances']) {\r\n      console.warn(`SimpleKeyboardInstances is not defined. Dispatch cannot be called.`);\r\n      throw new Error('INSTANCES_VAR_ERROR');\r\n    }\r\n\r\n    return Object.keys((window as SKWindow)['SimpleKeyboardInstances']).forEach((key) => {\r\n      callback((window as SKWindow)['SimpleKeyboardInstances'][key], key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  addButtonTheme(buttons: string, className: string): void {\r\n    if (!className || !buttons) return;\r\n\r\n    buttons.split(' ').forEach((button) => {\r\n      className.split(' ').forEach((classNameItem) => {\r\n        if (!this.options.buttonTheme) this.options.buttonTheme = [];\r\n\r\n        let classNameFound = false;\r\n\r\n        /**\r\n         * If class is already defined, we add button to class definition\r\n         */\r\n        this.options.buttonTheme.map((buttonTheme) => {\r\n          if (buttonTheme?.class.split(' ').includes(classNameItem)) {\r\n            classNameFound = true;\r\n\r\n            const buttonThemeArray = buttonTheme.buttons.split(' ');\r\n            if (!buttonThemeArray.includes(button)) {\r\n              classNameFound = true;\r\n              buttonThemeArray.push(button);\r\n              buttonTheme.buttons = buttonThemeArray.join(' ');\r\n            }\r\n          }\r\n          return buttonTheme;\r\n        });\r\n\r\n        /**\r\n         * If class is not defined, we create a new entry\r\n         */\r\n        if (!classNameFound) {\r\n          this.options.buttonTheme.push({\r\n            class: classNameItem,\r\n            buttons: buttons,\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  removeButtonTheme(buttons: string, className: string): void {\r\n    /**\r\n     * When called with empty parameters, remove all button themes\r\n     */\r\n    if (!buttons && !className) {\r\n      this.options.buttonTheme = [];\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * If buttons are passed and buttonTheme has items\r\n     */\r\n    if (buttons && Array.isArray(this.options.buttonTheme) && this.options.buttonTheme.length) {\r\n      const buttonArray = buttons.split(' ');\r\n      buttonArray.forEach((button) => {\r\n        this.options?.buttonTheme?.map((buttonTheme, index) => {\r\n          /**\r\n           * If className is set, we affect the buttons only for that class\r\n           * Otherwise, we afect all classes\r\n           */\r\n          if ((buttonTheme && className && className.includes(buttonTheme.class)) || !className) {\r\n            const filteredButtonArray = buttonTheme?.buttons.split(' ').filter((item) => item !== button);\r\n\r\n            /**\r\n             * If buttons left, return them, otherwise, remove button Theme\r\n             */\r\n            if (buttonTheme && filteredButtonArray?.length) {\r\n              buttonTheme.buttons = filteredButtonArray.join(' ');\r\n            } else {\r\n              this.options.buttonTheme?.splice(index, 1);\r\n              buttonTheme = null;\r\n            }\r\n          }\r\n\r\n          return buttonTheme;\r\n        });\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\r\n   * @param  {string} button The button layout name to select\r\n   */\r\n  getButtonElement(button: string): KeyboardElement | KeyboardElement[] | undefined {\r\n    let output;\r\n\r\n    const buttonArr = this.buttonElements[button];\r\n    if (buttonArr) {\r\n      if (buttonArr.length > 1) {\r\n        output = buttonArr;\r\n      } else {\r\n        output = buttonArr[0];\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * This handles the \"inputPattern\" option\r\n   * by checking if the provided inputPattern passes\r\n   */\r\n  inputPatternIsValid(inputVal: string): boolean {\r\n    const inputPatternRaw = this.options.inputPattern;\r\n    let inputPattern;\r\n\r\n    /**\r\n     * Check if input pattern is global or targeted to individual inputs\r\n     */\r\n    if (inputPatternRaw instanceof RegExp) {\r\n      inputPattern = inputPatternRaw;\r\n    } else {\r\n      inputPattern = inputPatternRaw[this.options.inputName || this.defaultName];\r\n    }\r\n\r\n    if (inputPattern && inputVal) {\r\n      const didInputMatch = inputPattern.test(inputVal);\r\n\r\n      if (this.options.debug) {\r\n        console.log(`inputPattern (\"${inputPattern}\"): ${didInputMatch ? 'passed' : 'did not pass!'}`);\r\n      }\r\n\r\n      return didInputMatch;\r\n    } else {\r\n      /**\r\n       * inputPattern doesn't seem to be set for the current input, or input is empty. Pass.\r\n       */\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the removal of event listers before initializing new ones\r\n   * This is useful when changing options that require a fresh set of event listeners\r\n   */\r\n  handleKeyDownBound!: (event: KeyboardEvent) => void;\r\n  handleKeyUpBound!: (event: KeyboardEvent) => void;\r\n  handleMouseDownBound!: (event: MouseEvent) => void;\r\n  handleMouseUpBound!: (event: MouseEvent) => void;\r\n  handleTouchEndBound!: (event: TouchEvent) => void;\r\n  handleSelectBound!: (event: Event) => void;\r\n  handleSelectionChangeBound!: (event: Event) => void;\r\n\r\n  removeEventListeners(): void {\r\n    console.log('Removing event listeners...');\r\n\r\n    document.removeEventListener('keydown', this.handleKeyDownBound);\r\n    document.removeEventListener('keyup', this.handleKeyUpBound);\r\n    document.removeEventListener('mouseup', this.handleMouseUpBound);\r\n    document.removeEventListener('touchend', this.handleTouchEndBound);\r\n    document.removeEventListener('select', this.handleSelectBound);\r\n\r\n    if (this.options.updateCaretOnSelectionChange) {\r\n      document.removeEventListener('selectionchange', this.handleSelectionChangeBound);\r\n    }\r\n\r\n    this.listenersAdded = false; // Allow re-adding if necessary\r\n  }\r\n  /**\r\n   * Handles simple-keyboard event listeners\r\n   */\r\n  setEventListeners(): void {\r\n    /**\r\n     * Only first instance should set the event listeners\r\n     */\r\n    if (this.isFirstKeyboardInstance || !this.allKeyboardInstances) {\r\n      if (this.options.debug) {\r\n        console.log(`Caret handling started (${this.keyboardDOMClass})`);\r\n      }\r\n\r\n      // LPJr: Prevent duplicate listeners\r\n      if (this.listenersAdded) {\r\n        console.log('Event listeners already set. Skipping...');\r\n        return;\r\n      }\r\n\r\n      // Ensure existing listeners are removed before adding new ones\r\n      this.removeEventListeners();\r\n\r\n      // LPJr: added named event handlers instead of anonymous functions\r\n      this.handleKeyDownBound = this.handleKeyDown.bind(this);\r\n      this.handleKeyUpBound = this.handleKeyUp.bind(this);\r\n      this.handleMouseUpBound = this.handleMouseUp.bind(this);\r\n      this.handleTouchEndBound = () => this.handleTouchEnd(this);\r\n      this.handleSelectBound = () => this.handleSelect(this);\r\n      this.handleSelectionChangeBound = this.handleSelectionChange.bind(this);\r\n\r\n      document.addEventListener('keydown', this.handleKeyDownBound);\r\n      document.addEventListener('keyup', this.handleKeyUpBound);\r\n      document.addEventListener('mouseup', this.handleMouseUpBound);\r\n      document.addEventListener('touchend', this.handleTouchEndBound);\r\n\r\n      if (this.options.updateCaretOnSelectionChange) {\r\n        document.addEventListener('selectionchange', this.handleSelectionChangeBound);\r\n      }\r\n\r\n      document.addEventListener('select', this.handleSelectBound);\r\n\r\n      // Mark listeners as added to prevent duplicates\r\n      this.listenersAdded = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyUp\r\n   */\r\n  handleKeyUp(event: KeyboardHandlerEvent): void {\r\n    if (this.options.physicalKeyboardHighlightPreventDefault) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    this.caretEventHandler(event);\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyUp(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyDown\r\n   */\r\n  handleKeyDown(event: KeyboardHandlerEvent): void {\r\n    if (this.options.physicalKeyboardHighlightPreventDefault) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyDown(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: MouseUp\r\n   */\r\n  handleMouseUp(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: TouchEnd\r\n   */\r\n  /* istanbul ignore next */\r\n  handleTouchEnd(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: Select\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelect(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: SelectionChange\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelectionChange(event: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Firefox is not reporting the correct caret position through this event\r\n     * https://github.com/hodgef/simple-keyboard/issues/1839\r\n     */\r\n    if (navigator.userAgent.includes('Firefox')) {\r\n      return;\r\n    }\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Called by {@link setEventListeners} when an event that warrants a cursor position update is triggered\r\n   */\r\n  caretEventHandler(event: KeyboardHandlerEvent): void {\r\n    let targetTagName: string;\r\n    if (event.target.tagName) {\r\n      targetTagName = event.target.tagName.toLowerCase();\r\n    }\r\n\r\n    this.dispatch((instance) => {\r\n      let isKeyboard =\r\n        event.target === instance.keyboardDOM || (event.target && instance.keyboardDOM.contains(event.target));\r\n\r\n      /**\r\n       * If syncInstanceInputs option is enabled, make isKeyboard match any instance\r\n       * not just the current one\r\n       */\r\n      if (this.options.syncInstanceInputs && Array.isArray(event.path)) {\r\n        isKeyboard = event.path.some((item: HTMLElement) => item?.hasAttribute?.('data-skInstance'));\r\n      }\r\n\r\n      if (\r\n        (targetTagName === 'textarea' ||\r\n          (targetTagName === 'input' && ['text', 'search', 'url', 'tel', 'password'].includes(event.target.type))) &&\r\n        !instance.options.disableCaretPositioning\r\n      ) {\r\n        /**\r\n         * Tracks current cursor position\r\n         * As keys are pressed, text will be added/removed at that position within the input.\r\n         */\r\n        let selectionStart = event.target.selectionStart;\r\n        let selectionEnd = event.target.selectionEnd;\r\n\r\n        if (instance.options.rtl) {\r\n          selectionStart = instance.utilities.getRtlOffset(selectionStart, instance.getInput());\r\n          selectionEnd = instance.utilities.getRtlOffset(selectionEnd, instance.getInput());\r\n        }\r\n\r\n        instance.setCaretPosition(selectionStart, selectionEnd);\r\n\r\n        /**\r\n         * Tracking current input in order to handle caret positioning edge cases\r\n         */\r\n        instance.activeInputElement = event.target;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(\r\n            'Caret at: ',\r\n            instance.getCaretPosition(),\r\n            instance.getCaretPositionEnd(),\r\n            event && event.target.tagName.toLowerCase(),\r\n            `(${instance.keyboardDOMClass})`,\r\n            event?.type\r\n          );\r\n        }\r\n      } else if ((instance.options.disableCaretPositioning || !isKeyboard) && event?.type !== 'selectionchange') {\r\n        /**\r\n         * If we toggled off disableCaretPositioning, we must ensure caretPosition doesn't persist once reactivated.\r\n         */\r\n        instance.setCaretPosition(null);\r\n\r\n        /**\r\n         * Resetting activeInputElement\r\n         */\r\n        instance.activeInputElement = null;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(`Caret position reset due to \"${event?.type}\" event`, event);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute an operation on each button\r\n   */\r\n  recurseButtons(fn: any): void {\r\n    if (!fn) return;\r\n\r\n    Object.keys(this.buttonElements).forEach((buttonName) => this.buttonElements[buttonName].forEach(fn));\r\n  }\r\n\r\n  /**\r\n   * Destroy keyboard listeners and DOM elements\r\n   */\r\n  destroy(): void {\r\n    if (this.options.debug) console.log(`Destroying simple-keyboard instance: ${this.currentInstanceName}`);\r\n\r\n    const { physicalKeyboardHighlightPreventDefault = false } = this.options;\r\n\r\n    /**\r\n     * Remove document listeners\r\n     */\r\n    document.removeEventListener('keyup', this.handleKeyUpBound);\r\n    document.removeEventListener('keydown', this.handleKeyDownBound);\r\n    document.removeEventListener('mouseup', this.handleMouseUpBound);\r\n    document.removeEventListener('touchend', this.handleTouchEndBound);\r\n    document.removeEventListener('select', this.handleSelectBound);\r\n\r\n    // selectionchange is causing caret update issues on Chrome\r\n    // https://github.com/hodgef/simple-keyboard/issues/2346\r\n    if (this.options.updateCaretOnSelectionChange) {\r\n      document.removeEventListener('selectionchange', this.handleSelectionChangeBound);\r\n    }\r\n\r\n    document.onpointerup = null;\r\n    document.ontouchend = null;\r\n    document.ontouchcancel = null;\r\n    document.onmouseup = null;\r\n\r\n    /**\r\n     * Remove buttons\r\n     */\r\n    const deleteButton = (buttonElement: KeyboardElement | null) => {\r\n      if (buttonElement) {\r\n        buttonElement.onpointerdown = null;\r\n        buttonElement.onpointerup = null;\r\n        buttonElement.onpointercancel = null;\r\n        buttonElement.ontouchstart = null;\r\n        buttonElement.ontouchend = null;\r\n        buttonElement.ontouchcancel = null;\r\n        buttonElement.onclick = null;\r\n        buttonElement.onmousedown = null;\r\n        buttonElement.onmouseup = null;\r\n\r\n        buttonElement.remove();\r\n        buttonElement = null;\r\n      }\r\n    };\r\n\r\n    this.recurseButtons(deleteButton);\r\n\r\n    /**\r\n     * Remove wrapper events\r\n     */\r\n    this.keyboardDOM.onpointerdown = null;\r\n    this.keyboardDOM.ontouchstart = null;\r\n    this.keyboardDOM.onmousedown = null;\r\n\r\n    /**\r\n     * Clearing keyboard rows\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Candidate box\r\n     */\r\n    if (this.candidateBox) {\r\n      this.candidateBox.destroy();\r\n      this.candidateBox = null;\r\n    }\r\n\r\n    /**\r\n     * Clearing activeInputElement\r\n     */\r\n    this.activeInputElement = null;\r\n\r\n    /**\r\n     * Removing instance attribute\r\n     */\r\n    this.keyboardDOM.removeAttribute('data-skInstance');\r\n\r\n    /**\r\n     * Clearing keyboardDOM\r\n     */\r\n    this.keyboardDOM.innerHTML = '';\r\n\r\n    /**\r\n     * Remove instance\r\n     */\r\n    (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName] = null;\r\n    delete (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName];\r\n\r\n    /**\r\n     * Reset initialized flag\r\n     */\r\n    this.initialized = false;\r\n  }\r\n\r\n  /**\r\n   * Process buttonTheme option\r\n   */\r\n  getButtonThemeClasses(button: string): string[] {\r\n    const buttonTheme = this.options.buttonTheme;\r\n    let buttonClasses: string[] = [];\r\n\r\n    if (Array.isArray(buttonTheme)) {\r\n      buttonTheme.forEach((themeObj) => {\r\n        if (\r\n          themeObj &&\r\n          themeObj.class &&\r\n          typeof themeObj.class === 'string' &&\r\n          themeObj.buttons &&\r\n          typeof themeObj.buttons === 'string'\r\n        ) {\r\n          const themeObjClasses = themeObj.class.split(' ');\r\n          const themeObjButtons = themeObj.buttons.split(' ');\r\n\r\n          if (themeObjButtons.includes(button)) {\r\n            buttonClasses = [...buttonClasses, ...themeObjClasses];\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonTheme\". Please check the documentation.`, themeObj);\r\n        }\r\n      });\r\n    }\r\n\r\n    return buttonClasses;\r\n  }\r\n\r\n  /**\r\n   * Process buttonAttributes option\r\n   */\r\n  setDOMButtonAttributes(button: string, callback: any): void {\r\n    const buttonAttributes = this.options.buttonAttributes;\r\n\r\n    if (Array.isArray(buttonAttributes)) {\r\n      buttonAttributes.forEach((attrObj) => {\r\n        if (\r\n          attrObj.attribute &&\r\n          typeof attrObj.attribute === 'string' &&\r\n          attrObj.value &&\r\n          typeof attrObj.value === 'string' &&\r\n          attrObj.buttons &&\r\n          typeof attrObj.buttons === 'string'\r\n        ) {\r\n          const attrObjButtons = attrObj.buttons.split(' ');\r\n\r\n          if (attrObjButtons.includes(button)) {\r\n            callback(attrObj.attribute, attrObj.value);\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonAttributes\". Please check the documentation.`, attrObj);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onTouchDeviceDetected() {\r\n    /**\r\n     * Processing autoTouchEvents\r\n     */\r\n    this.processAutoTouchEvents();\r\n\r\n    /**\r\n     * Disabling contextual window on touch devices\r\n     */\r\n    this.disableContextualWindow();\r\n  }\r\n\r\n  /**\r\n   * Disabling contextual window for hg-button\r\n   */\r\n  /* istanbul ignore next */\r\n  disableContextualWindow() {\r\n    window.oncontextmenu = (event: KeyboardHandlerEvent) => {\r\n      if (event.target.classList.contains('hg-button')) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process autoTouchEvents option\r\n   */\r\n  processAutoTouchEvents() {\r\n    if (this.options.autoUseTouchEvents) {\r\n      this.options.useTouchEvents = true;\r\n\r\n      if (this.options.debug) {\r\n        console.log(`autoUseTouchEvents: Touch device detected, useTouchEvents enabled.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n   */\r\n  onInit() {\r\n    if (this.options.debug) {\r\n      console.log(`${this.keyboardDOMClass} Initialized`);\r\n    }\r\n\r\n    /**\r\n     * setEventListeners\r\n     */\r\n    this.setEventListeners();\r\n\r\n    if (typeof this.options.onInit === 'function') this.options.onInit(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeFirstRender() {\r\n    /**\r\n     * Performing actions when touch device detected\r\n     */\r\n    if (this.utilities.isTouchDevice()) {\r\n      this.onTouchDeviceDetected();\r\n    }\r\n\r\n    if (typeof this.options.beforeFirstRender === 'function') this.options.beforeFirstRender(this);\r\n\r\n    /**\r\n     * Notify about PointerEvents usage\r\n     */\r\n    if (\r\n      this.isFirstKeyboardInstance &&\r\n      this.utilities.pointerEventsSupported() &&\r\n      !this.options.useTouchEvents &&\r\n      !this.options.useMouseEvents\r\n    ) {\r\n      if (this.options.debug) {\r\n        console.log('Using PointerEvents as it is supported by this browser');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Notify about touch events usage\r\n     */\r\n    if (this.options.useTouchEvents) {\r\n      if (this.options.debug) {\r\n        console.log('useTouchEvents has been enabled. Only touch events will be used.');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeRender() {\r\n    if (typeof this.options.beforeRender === 'function') this.options.beforeRender(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n   */\r\n  onRender() {\r\n    if (typeof this.options.onRender === 'function') this.options.onRender(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once all modules have been loaded\r\n   */\r\n  onModulesLoaded() {\r\n    if (typeof this.options.onModulesLoaded === 'function') this.options.onModulesLoaded(this);\r\n  }\r\n\r\n  /**\r\n   * Register module\r\n   */\r\n  registerModule = (name: string, initCallback: any) => {\r\n    if (!this.modules[name]) this.modules[name] = {};\r\n\r\n    initCallback(this.modules[name]);\r\n  };\r\n\r\n  /**\r\n   * Load modules\r\n   */\r\n  loadModules() {\r\n    if (Array.isArray(this.options.modules)) {\r\n      this.options.modules.forEach((KeyboardModule) => {\r\n        const keyboardModule = this.utilities.isConstructor(KeyboardModule) ?\r\n          new KeyboardModule(this) : KeyboardModule(this);\r\n\r\n        keyboardModule.init && keyboardModule.init(this);\r\n      });\r\n\r\n      this.keyboardPluginClasses = 'modules-loaded';\r\n\r\n      this.render();\r\n      this.onModulesLoaded();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get module prop\r\n   */\r\n  getModuleProp(name: string, prop: string) {\r\n    if (!this.modules[name]) return false;\r\n\r\n    return this.modules[name][prop];\r\n  }\r\n\r\n  /**\r\n   * getModulesList\r\n   */\r\n  getModulesList() {\r\n    return Object.keys(this.modules);\r\n  }\r\n\r\n  /**\r\n   * Parse Row DOM containers\r\n   */\r\n  parseRowDOMContainers(\r\n    rowDOM: HTMLDivElement,\r\n    rowIndex: number,\r\n    containerStartIndexes: number[],\r\n    containerEndIndexes: number[]\r\n  ) {\r\n    const rowDOMArray = Array.from(rowDOM.children);\r\n    let removedElements = 0;\r\n\r\n    if (rowDOMArray.length) {\r\n      containerStartIndexes.forEach((startIndex, arrIndex) => {\r\n        const endIndex = containerEndIndexes[arrIndex];\r\n\r\n        /**\r\n         * If there exists a respective end index\r\n         * if end index comes after start index\r\n         */\r\n        if (!endIndex || !(endIndex > startIndex)) {\r\n          return false;\r\n        }\r\n\r\n        /**\r\n         * Updated startIndex, endIndex\r\n         * This is since the removal of buttons to place a single button container\r\n         * results in a modified array size\r\n         */\r\n        const updated_startIndex = startIndex - removedElements;\r\n        const updated_endIndex = endIndex - removedElements;\r\n\r\n        /**\r\n         * Create button container\r\n         */\r\n        const containerDOM = document.createElement('div');\r\n        containerDOM.className += 'hg-button-container';\r\n        const containerUID = `${this.options.layoutName}-r${rowIndex}c${arrIndex}`;\r\n        containerDOM.setAttribute('data-skUID', containerUID);\r\n\r\n        /**\r\n         * Taking elements due to be inserted into container\r\n         */\r\n        const containedElements = rowDOMArray.splice(updated_startIndex, updated_endIndex - updated_startIndex + 1);\r\n        removedElements += updated_endIndex - updated_startIndex;\r\n\r\n        /**\r\n         * Inserting elements to container\r\n         */\r\n        containedElements.forEach((element) => containerDOM.appendChild(element));\r\n\r\n        /**\r\n         * Adding container at correct position within rowDOMArray\r\n         */\r\n        rowDOMArray.splice(updated_startIndex, 0, containerDOM);\r\n\r\n        /**\r\n         * Clearing old rowDOM children structure\r\n         */\r\n        rowDOM.innerHTML = '';\r\n\r\n        /**\r\n         * Appending rowDOM new children list\r\n         */\r\n        rowDOMArray.forEach((element) => rowDOM.appendChild(element));\r\n\r\n        if (this.options.debug) {\r\n          console.log('rowDOMContainer', containedElements, updated_startIndex, updated_endIndex, removedElements + 1);\r\n        }\r\n      });\r\n    }\r\n\r\n    return rowDOM;\r\n  }\r\n\r\n  /**\r\n   * getKeyboardClassString\r\n   */\r\n  getKeyboardClassString = (...baseDOMClasses: any[]) => {\r\n    const keyboardClasses = [this.keyboardDOMClass, ...baseDOMClasses].filter((DOMClass) => !!DOMClass);\r\n\r\n    return keyboardClasses.join(' ');\r\n  };\r\n\r\n  /**\r\n   * Renders rows and buttons as per options\r\n   */\r\n  render() {\r\n    /**\r\n     * Clear keyboard\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Calling beforeFirstRender\r\n     */\r\n    if (!this.initialized) {\r\n      this.beforeFirstRender();\r\n    }\r\n\r\n    /**\r\n     * Calling beforeRender\r\n     */\r\n    this.beforeRender();\r\n\r\n    const layoutClass = `hg-layout-${this.options.layoutName}`;\r\n    const layout = this.options.layout || getDefaultLayout();\r\n    const useTouchEvents = this.options.useTouchEvents || false;\r\n    const useTouchEventsClass = useTouchEvents ? 'hg-touch-events' : '';\r\n    const useMouseEvents = this.options.useMouseEvents || false;\r\n    const disableRowButtonContainers = this.options.disableRowButtonContainers;\r\n\r\n    /**\r\n     * Adding themeClass, layoutClass to keyboardDOM\r\n     */\r\n    this.keyboardDOM.className = this.getKeyboardClassString(\r\n      this.options.theme,\r\n      layoutClass,\r\n      this.keyboardPluginClasses,\r\n      useTouchEventsClass\r\n    );\r\n\r\n    /**\r\n     * Adding keyboard identifier\r\n     */\r\n    this.keyboardDOM.setAttribute('data-skInstance', this.currentInstanceName);\r\n\r\n    /**\r\n     * Create row wrapper\r\n     */\r\n    this.keyboardRowsDOM = document.createElement('div');\r\n    this.keyboardRowsDOM.className = 'hg-rows';\r\n\r\n    /**\r\n     * Iterating through each row\r\n     */\r\n    layout[this.options.layoutName || this.defaultName].forEach((row: string, rIndex: number) => {\r\n      let rowArray = row.split(' ');\r\n\r\n      /**\r\n       * Enforce excludeFromLayout\r\n       */\r\n      if (\r\n        this.options.excludeFromLayout &&\r\n        this.options.excludeFromLayout[this.options.layoutName || this.defaultName]\r\n      ) {\r\n        rowArray = rowArray.filter(\r\n          (buttonName) =>\r\n            this.options.excludeFromLayout &&\r\n            !this.options.excludeFromLayout[this.options.layoutName || this.defaultName].includes(buttonName)\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Creating empty row\r\n       */\r\n      let rowDOM = document.createElement('div');\r\n      rowDOM.className += 'hg-row';\r\n\r\n      /**\r\n       * Tracking container indicators in rows\r\n       */\r\n      const containerStartIndexes: number[] = [];\r\n      const containerEndIndexes: number[] = [];\r\n\r\n      /**\r\n       * Iterating through each button in row\r\n       */\r\n      rowArray.forEach((button, bIndex) => {\r\n        /**\r\n         * Check if button has a container indicator\r\n         */\r\n        const buttonHasContainerStart =\r\n          !disableRowButtonContainers && typeof button === 'string' && button.length > 1 && button.indexOf('[') === 0;\r\n\r\n        const buttonHasContainerEnd =\r\n          !disableRowButtonContainers &&\r\n          typeof button === 'string' &&\r\n          button.length > 1 &&\r\n          button.indexOf(']') === button.length - 1;\r\n\r\n        /**\r\n         * Save container start index, if applicable\r\n         */\r\n        if (buttonHasContainerStart) {\r\n          containerStartIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\[/g, '');\r\n        }\r\n\r\n        if (buttonHasContainerEnd) {\r\n          containerEndIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\]/g, '');\r\n        }\r\n\r\n        /**\r\n         * Processing button options\r\n         */\r\n        const fctBtnClass = this.utilities.getButtonClass(button);\r\n        const buttonDisplayName = this.utilities.getButtonDisplayName(\r\n          button,\r\n          this.options.display,\r\n          this.options.mergeDisplay\r\n        );\r\n\r\n        /**\r\n         * Creating button\r\n         */\r\n        const buttonType = this.options.useButtonTag ? 'button' : 'div';\r\n        const buttonDOM = document.createElement(buttonType);\r\n        buttonDOM.className += `hg-button ${fctBtnClass}`;\r\n\r\n        /**\r\n         * Adding buttonTheme\r\n         */\r\n        buttonDOM.classList.add(...this.getButtonThemeClasses(button));\r\n\r\n        /**\r\n         * Adding buttonAttributes\r\n         */\r\n        this.setDOMButtonAttributes(button, (attribute: string, value: string) => {\r\n          buttonDOM.setAttribute(attribute, value);\r\n        });\r\n\r\n        this.activeButtonClass = 'hg-activeButton';\r\n\r\n        /**\r\n         * Handle button click event\r\n         */\r\n        /* istanbul ignore next */\r\n        if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n          /**\r\n           * Handle PointerEvents\r\n           */\r\n          buttonDOM.onpointerdown = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonClicked(button, e);\r\n            this.handleButtonMouseDown(button, e);\r\n          };\r\n          buttonDOM.onpointerup = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n          buttonDOM.onpointercancel = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n        } else {\r\n          /**\r\n           * Fallback for browsers not supporting PointerEvents\r\n           */\r\n          if (useTouchEvents) {\r\n            /**\r\n             * Handle touch events\r\n             */\r\n            buttonDOM.ontouchstart = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonClicked(button, e);\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.ontouchend = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n            buttonDOM.ontouchcancel = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          } else {\r\n            /**\r\n             * Handle mouse events\r\n             */\r\n            buttonDOM.onclick = (e: KeyboardHandlerEvent) => {\r\n              this.setMouseHold(false);\r\n              /**\r\n               * Fire button handler in onclick for compatibility reasons\r\n               * This fires handler before onKeyReleased, therefore when that option is set we will fire the handler\r\n               * in onmousedown instead\r\n               */\r\n              if (\r\n                typeof this.options.onKeyReleased !== 'function' &&\r\n                !(this.options.useMouseEvents && this.options.clickOnMouseDown)\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n            };\r\n            buttonDOM.onmousedown = (e: KeyboardHandlerEvent) => {\r\n              /**\r\n               * Fire button handler for onKeyReleased use-case\r\n               */\r\n              if (\r\n                (typeof this.options.onKeyReleased === 'function' ||\r\n                  (this.options.useMouseEvents && this.options.clickOnMouseDown)) &&\r\n                !this.isMouseHold\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.onmouseup = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          }\r\n        }\r\n\r\n        /**\r\n         * Adding identifier\r\n         */\r\n        buttonDOM.setAttribute('data-skBtn', button);\r\n\r\n        /**\r\n         * Adding unique id\r\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\r\n         */\r\n        const buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\r\n        buttonDOM.setAttribute('data-skBtnUID', buttonUID);\r\n\r\n        /**\r\n         * Adding button label to button\r\n         */\r\n        const buttonSpanDOM = document.createElement('span');\r\n        buttonSpanDOM.innerHTML = buttonDisplayName;\r\n        buttonDOM.appendChild(buttonSpanDOM);\r\n\r\n        /**\r\n         * Adding to buttonElements\r\n         */\r\n        if (!this.buttonElements[button]) this.buttonElements[button] = [];\r\n\r\n        this.buttonElements[button].push(buttonDOM);\r\n\r\n        /**\r\n         * Appending button to row\r\n         */\r\n        rowDOM.appendChild(buttonDOM);\r\n      });\r\n\r\n      /**\r\n       * Parse containers in row\r\n       */\r\n      rowDOM = this.parseRowDOMContainers(rowDOM, rIndex, containerStartIndexes, containerEndIndexes);\r\n\r\n      /**\r\n       * Appending row to hg-rows\r\n       */\r\n      this.keyboardRowsDOM.appendChild(rowDOM);\r\n    });\r\n\r\n    /**\r\n     * Appending row to keyboard\r\n     */\r\n    this.keyboardDOM.appendChild(this.keyboardRowsDOM);\r\n\r\n    /**\r\n     * Calling onRender\r\n     */\r\n    this.onRender();\r\n\r\n    if (!this.initialized) {\r\n      /**\r\n       * Ensures that onInit and beforeFirstRender are only called once per instantiation\r\n       */\r\n      this.initialized = true;\r\n\r\n      /**\r\n       * Handling parent events\r\n       */\r\n      /* istanbul ignore next */\r\n      if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n        document.onpointerup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onpointerdown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (useTouchEvents) {\r\n        /**\r\n         * Handling ontouchend, ontouchcancel\r\n         */\r\n        document.ontouchend = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        document.ontouchcancel = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n\r\n        this.keyboardDOM.ontouchstart = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (!useTouchEvents) {\r\n        /**\r\n         * Handling mouseup\r\n         */\r\n        document.onmouseup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onmousedown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      }\r\n\r\n      /**\r\n       * Calling onInit\r\n       */\r\n      this.onInit();\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboard;\r\n","import SimpleKeyboard from \"./components/Keyboard\";\r\nexport { SimpleKeyboard };\r\nexport default SimpleKeyboard;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","import { KeyboardReactInterface } from \"../interfaces\";\r\n\r\nexport const parseProps = (props: KeyboardReactInterface[\"options\"]) => ({\r\n  ...props,\r\n  theme: `simple-keyboard ${props.theme || \"hg-theme-default\"}`,\r\n});\r\n\r\nconst cleanProps = (sourceObj: KeyboardReactInterface[\"options\"]) => ({\r\n  ...sourceObj,\r\n  keyboardRef: null,\r\n});\r\n\r\nexport const changedProps = (\r\n  prevProps: KeyboardReactInterface[\"options\"],\r\n  props: KeyboardReactInterface[\"options\"]\r\n) => {\r\n  const cleanedProps = cleanProps(props);\r\n  const cleanedPrevProps = cleanProps(prevProps);\r\n\r\n  return Object.keys(cleanedProps).filter(\r\n    (propName) =>\r\n      (cleanedProps as Record<string, any>)[propName] !== (cleanedPrevProps as Record<string, any>)[propName]\r\n  );\r\n};\r\n","/* eslint-disable no-unused-vars */\r\nimport * as React from 'react';\r\nimport { parseProps, changedProps } from '../services/Utilities';\r\nimport 'simple-keyboard/css';\r\nimport { KeyboardReactInterface } from '../interfaces';\r\nimport Keyboard from 'simple-keyboard/build/index.modern';\r\n\r\nconst KeyboardReact = (props: KeyboardReactInterface['options']) => {\r\n  const cssClass = props.baseClass || 'react-simple-keyboard';\r\n  const initRef = React.useRef<null | boolean>(null);\r\n  const targetElemRef = React.useRef<null | HTMLDivElement>(null);\r\n  const keyboardRef = React.useRef<null | KeyboardReactInterface>(null);\r\n  const previousProps = React.useRef(props);\r\n\r\n  React.useEffect(() => {\r\n    /**\r\n     * Whenever this component is unmounted, ensure that Keyboard object that\r\n     * it created is destroyed so that it removes any event handlers that it\r\n     * may have installed.\r\n     */\r\n    return () => {\r\n      if (keyboardRef.current) {\r\n        keyboardRef.current.destroy();\r\n      }\r\n      initRef.current = false;\r\n    };\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    const parsedProps = parseProps(props) as any;\r\n\r\n    /**\r\n     * Initialize simple-keyboard\r\n     */\r\n    if (!initRef.current) {\r\n      initRef.current = true;\r\n      parsedProps.debug && console.log('ReactSimpleKeyboard: Init');\r\n      const targetElem = targetElemRef.current as HTMLDivElement;\r\n      const targetClass = `.${cssClass}`;\r\n      keyboardRef.current = new Keyboard(targetElem || targetClass, parsedProps) as KeyboardReactInterface;\r\n      parsedProps.keyboardRef && parsedProps.keyboardRef(keyboardRef.current);\r\n    }\r\n\r\n    const updatedProps = changedProps(previousProps.current, parsedProps);\r\n\r\n    /**\r\n     * Only trigger render if props changed\r\n     */\r\n    if (updatedProps.length) {\r\n      const keyboard = keyboardRef.current;\r\n      previousProps.current = parsedProps;\r\n      keyboard?.setOptions(parsedProps);\r\n      parsedProps.debug && console.log('ReactSimpleKeyboard - setOptions called due to updated props:', updatedProps);\r\n    }\r\n  }, [initRef, cssClass, previousProps, props]);\r\n\r\n  return <div className={cssClass} ref={targetElemRef} />;\r\n};\r\n\r\nexport default KeyboardReact;\r\n","import KeyboardReact from \"./components/KeyboardModern\";\r\nexport * from \"./interfaces.d\";\r\nexport { KeyboardReact };\r\nexport default KeyboardReact;\r\n"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__442__","e","t","d","n","o","Object","defineProperty","enumerable","get","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","l","getOptions","getCaretPosition","i","getCaretPositionEnd","s","dispatch","length","bindMethods","key","includes","getButtonType","replace","concat","arguments","assign","getDefaultDisplay","a","removeAt","apply","removeForwardsAt","addStringAt","tabCharOnTab","newLineOnEnter","Number","isInteger","debug","console","log","updateCaretPosAction","setCaretPosition","slice","join","isMaxLengthReached","updateCaretPos","substring","match","substr","maxLength","inputName","maxLengthReached","Boolean","window","navigator","maxTouchPoints","PointerEvent","toLowerCase","trim","split","reduce","toUpperCase","Array","Math","ceil","map","indexOf","Reflect","construct","String","getOwnPropertyNames","done","bind","f","c","g","v","Set","altKey","ctrlKey","shiftKey","code","keyCodeToKey","keyCode","layout","lastLayout","layoutJSON","mapLayoutToEventCodes","extractAndPadLayout","default","shift","shiftActive","capslockActive","getSimpleKeyboardLayoutKey","getButtonElement","u","h","style","background","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","isArray","forEach","physicalKeyboardHighlightPress","physicalKeyboardHighlightPressUsePointerEvents","onpointerdown","physicalKeyboardHighlightPressUseClick","p","click","handleButtonClicked","removeAttribute","onpointerup","STANDARD_CODES","shiftleft","shiftright","controlleft","controlright","altleft","altright","metaleft","metaright","backspace","capslock","enter","tab","normalizeToStandardCode","toString","normal","normalizeOutput","has","warn","userAgent","platform","language","imeMode","document","activeElement","inputMode","isEditable","isContentEditable","time","Date","toISOString","push","C","utilities","options","E","pageSize","layoutCandidatesPageSize","candidateBoxElement","remove","pageIndex","candidateValue","targetElement","onSelect","chunkArray","renderPage","candidateListPages","nbPages","onItemSelected","destroy","createElement","className","useTouchEvents","TouchEvent","MouseEvent","innerHTML","display","ontouchstart","onclick","appendChild","classList","add","prepend","S","A","I","querySelector","HTMLDivElement","Error","keyboardDOMClass","keyboardDOM","caretPosition","caretPositionEnd","modules","filter","handleParams","layoutName","theme","preventMouseDownDefault","enableLayoutCandidates","excludeFromLayout","keyboardPluginClasses","defaultName","input","buttonElements","SimpleKeyboardInstances","currentInstanceName","camelCase","allKeyboardInstances","keyboardInstanceNames","keys","isFirstKeyboardInstance","physicalKeyboard","candidateBox","render","loadModules","layoutCandidates","layoutCandidatesCaseSensitiveMatch","D","RegExp","escapeRegex","P","matchAll","sort","candidateKey","show","disableCandidateNormalization","enableLayoutCandidatesKeyPress","normalize","beforeInputUpdate","getInput","y","setInput","onKeyPress","onChange","onChangeAll","getAllInputs","getUpdatedInput","isStandardButton","activeInputElement","setSelectionRange","inputPattern","inputPatternIsValid","handleMaxLength","type","syncInstanceInputs","target","getInputCandidates","showCandidatesBox","isMouseHold","preventDefault","stopMouseDownPropagation","stopPropagation","activeButtonClass","holdInteractionTimeout","clearTimeout","holdTimeout","setMouseHold","disableButtonHold","setTimeout","getMouseHold","handleButtonHold","preventMouseUpDefault","stopMouseUpPropagation","contains","recurseButtons","onKeyReleased","replaceInput","rtl","changedOptions","onSetOptions","JSON","stringify","keyboardRowsDOM","setAttribute","buttonTheme","buttons","class","splice","test","removeEventListener","handleKeyDownBound","handleKeyUpBound","handleMouseUpBound","handleTouchEndBound","handleSelectBound","updateCaretOnSelectionChange","handleSelectionChangeBound","listenersAdded","removeEventListeners","handleKeyDown","handleKeyUp","handleMouseUp","handleTouchEnd","handleSelect","handleSelectionChange","addEventListener","physicalKeyboardHighlightPreventDefault","caretEventHandler","physicalKeyboardHighlight","handleHighlightKeyUp","handleHighlightKeyDown","tagName","path","some","hasAttribute","disableCaretPositioning","selectionStart","selectionEnd","getRtlOffset","ontouchend","ontouchcancel","onmouseup","onpointercancel","onmousedown","resetRows","initialized","buttonAttributes","attribute","processAutoTouchEvents","disableContextualWindow","oncontextmenu","autoUseTouchEvents","setEventListeners","onInit","isTouchDevice","onTouchDeviceDetected","beforeFirstRender","pointerEventsSupported","useMouseEvents","beforeRender","onRender","onModulesLoaded","isConstructor","init","from","children","disableRowButtonContainers","getKeyboardClassString","getButtonClass","getButtonDisplayName","mergeDisplay","useButtonTag","getButtonThemeClasses","setDOMButtonAttributes","handleButtonMouseDown","handleButtonMouseUp","clickOnMouseDown","m","parseRowDOMContainers","handleKeyboardContainerMouseDown","N","L","_typeof","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","id","loaded","__webpack_modules__","getter","__esModule","definition","obj","prop","nmd","paths","cleanProps","sourceObj","_objectSpread","keyboardRef","props","cssClass","baseClass","initRef","React","targetElemRef","previousProps","current","parsedProps","parseProps","targetElem","targetClass","Keyboard","updatedProps","prevProps","cleanedProps","cleanedPrevProps","propName","changedProps","keyboard","setOptions","ref"],"sourceRoot":""}