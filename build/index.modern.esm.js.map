{"version":3,"file":"index.modern.esm.js","mappings":"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","sources":["webpack://react-simple-keyboard/SimpleKeyboard/webpack/universalModuleDefinition","webpack://react-simple-keyboard/SimpleKeyboard/webpack/bootstrap","webpack://react-simple-keyboard/SimpleKeyboard/webpack/runtime/define property getters","webpack://react-simple-keyboard/SimpleKeyboard/webpack/runtime/hasOwnProperty shorthand","webpack://react-simple-keyboard/SimpleKeyboard/webpack/runtime/make namespace object","webpack://react-simple-keyboard/SimpleKeyboard/src/lib/services/Utilities.ts","webpack://react-simple-keyboard/SimpleKeyboard/src/lib/services/PhysicalKeyboard.ts","webpack://react-simple-keyboard/SimpleKeyboard/src/lib/services/KeyboardLayout.ts","webpack://react-simple-keyboard/SimpleKeyboard/src/lib/components/CandidateBox.ts","webpack://react-simple-keyboard/SimpleKeyboard/src/lib/components/Keyboard.ts","webpack://react-simple-keyboard/SimpleKeyboard/src/lib/index.modern.ts","webpack://react-simple-keyboard/webpack/bootstrap","webpack://react-simple-keyboard/webpack/runtime/compat get default export","webpack://react-simple-keyboard/webpack/runtime/define property getters","webpack://react-simple-keyboard/webpack/runtime/hasOwnProperty shorthand","webpack://react-simple-keyboard/webpack/runtime/node module decorator","webpack://react-simple-keyboard/external module {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\",\"module\":\"react\"}","webpack://react-simple-keyboard/./src/lib/services/Utilities.ts","webpack://react-simple-keyboard/./src/lib/components/KeyboardModern.tsx","webpack://react-simple-keyboard/./src/lib/index.modern.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboard\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboard\"] = factory();\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { KeyboardInput } from \"./../interfaces\";\r\nimport { KeyboardOptions, UtilitiesParams } from \"../interfaces\";\r\n\r\n/**\r\n * Utility Service\r\n */\r\nclass Utilities {\r\n  getOptions: () => KeyboardOptions;\r\n  getCaretPosition: () => number | null;\r\n  getCaretPositionEnd: () => number | null;\r\n  dispatch: any;\r\n  maxLengthReached!: boolean;\r\n\r\n  /**\r\n   * Creates an instance of the Utility service\r\n   */\r\n  constructor({ getOptions, getCaretPosition, getCaretPositionEnd, dispatch }: UtilitiesParams) {\r\n    this.getOptions = getOptions;\r\n    this.getCaretPosition = getCaretPosition;\r\n    this.getCaretPositionEnd = getCaretPositionEnd;\r\n    this.dispatch = dispatch;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(Utilities, this);\r\n  }\r\n\r\n  /**\r\n   * Retrieve button type\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The button type\r\n   */\r\n  getButtonType(button: string): string {\r\n    return button.includes(\"{\") && button.includes(\"}\") && button !== \"{//}\" ? \"functionBtn\" : \"standardBtn\";\r\n  }\r\n\r\n  /**\r\n   * Adds default classes to a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The classes to be added to the button\r\n   */\r\n  getButtonClass(button: string): string {\r\n    const buttonTypeClass = this.getButtonType(button);\r\n    const buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    let buttonNormalized = \"\";\r\n\r\n    if (buttonTypeClass !== \"standardBtn\") buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\r\n\r\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\r\n  }\r\n\r\n  /**\r\n   * Default button display labels\r\n   */\r\n  getDefaultDisplay() {\r\n    return {\r\n      \"{bksp}\": \"backspace\",\r\n      \"{backspace}\": \"backspace\",\r\n      \"{enter}\": \"< enter\",\r\n      \"{shift}\": \"shift\",\r\n      \"{shiftleft}\": \"shift\",\r\n      \"{shiftright}\": \"shift\",\r\n      \"{alt}\": \"alt\",\r\n      \"{s}\": \"shift\",\r\n      \"{tab}\": \"tab\",\r\n      \"{lock}\": \"caps\",\r\n      \"{capslock}\": \"caps\",\r\n      \"{accept}\": \"Submit\",\r\n      \"{space}\": \" \",\r\n      \"{//}\": \" \",\r\n      \"{esc}\": \"esc\",\r\n      \"{escape}\": \"esc\",\r\n      \"{f1}\": \"f1\",\r\n      \"{f2}\": \"f2\",\r\n      \"{f3}\": \"f3\",\r\n      \"{f4}\": \"f4\",\r\n      \"{f5}\": \"f5\",\r\n      \"{f6}\": \"f6\",\r\n      \"{f7}\": \"f7\",\r\n      \"{f8}\": \"f8\",\r\n      \"{f9}\": \"f9\",\r\n      \"{f10}\": \"f10\",\r\n      \"{f11}\": \"f11\",\r\n      \"{f12}\": \"f12\",\r\n      \"{numpaddivide}\": \"/\",\r\n      \"{numlock}\": \"lock\",\r\n      \"{arrowup}\": \"↑\",\r\n      \"{arrowleft}\": \"←\",\r\n      \"{arrowdown}\": \"↓\",\r\n      \"{arrowright}\": \"→\",\r\n      \"{prtscr}\": \"print\",\r\n      \"{scrolllock}\": \"scroll\",\r\n      \"{pause}\": \"pause\",\r\n      \"{insert}\": \"ins\",\r\n      \"{home}\": \"home\",\r\n      \"{pageup}\": \"up\",\r\n      \"{delete}\": \"del\",\r\n      \"{forwarddelete}\": \"del\",\r\n      \"{end}\": \"end\",\r\n      \"{pagedown}\": \"down\",\r\n      \"{numpadmultiply}\": \"*\",\r\n      \"{numpadsubtract}\": \"-\",\r\n      \"{numpadadd}\": \"+\",\r\n      \"{numpadenter}\": \"enter\",\r\n      \"{period}\": \".\",\r\n      \"{numpaddecimal}\": \".\",\r\n      \"{numpad0}\": \"0\",\r\n      \"{numpad1}\": \"1\",\r\n      \"{numpad2}\": \"2\",\r\n      \"{numpad3}\": \"3\",\r\n      \"{numpad4}\": \"4\",\r\n      \"{numpad5}\": \"5\",\r\n      \"{numpad6}\": \"6\",\r\n      \"{numpad7}\": \"7\",\r\n      \"{numpad8}\": \"8\",\r\n      \"{numpad9}\": \"9\",\r\n    };\r\n  }\r\n  /**\r\n   * Returns the display (label) name for a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {object} display The provided display option\r\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\r\n   */\r\n  getButtonDisplayName(button: string, display: KeyboardOptions[\"display\"], mergeDisplay = false) {\r\n    if (mergeDisplay) {\r\n      display = Object.assign({}, this.getDefaultDisplay(), display);\r\n    } else {\r\n      display = display || this.getDefaultDisplay();\r\n    }\r\n\r\n    return display[button] || button;\r\n  }\r\n\r\n  /**\r\n   * Returns the updated input resulting from clicking a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {string} input The input string\r\n   * @param  {number} caretPos The cursor's current position\r\n   * @param  {number} caretPosEnd The cursor's current end position\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  getUpdatedInput(button: string, input: string, caretPos: any, caretPosEnd = caretPos, moveCaret = false) {\r\n    const options = this.getOptions();\r\n    const commonParams: [number | undefined, number | undefined, boolean] = [caretPos, caretPosEnd, moveCaret];\r\n\r\n    let output = input;\r\n\r\n    if ((button === \"{bksp}\" || button === \"{backspace}\") && output.length > 0) {\r\n      output = this.removeAt(output, ...commonParams);\r\n    } else if ((button === \"{delete}\" || button === \"{forwarddelete}\") && output.length > 0) {\r\n      output = this.removeForwardsAt(output, ...commonParams);\r\n    } else if (button === \"{space}\") output = this.addStringAt(output, \" \", ...commonParams);\r\n    else if (button === \"{tab}\" && !(typeof options.tabCharOnTab === \"boolean\" && options.tabCharOnTab === false)) {\r\n      output = this.addStringAt(output, \"\\t\", ...commonParams);\r\n    } else if ((button === \"{enter}\" || button === \"{numpadenter}\") && options.newLineOnEnter)\r\n      output = this.addStringAt(output, \"\\n\", ...commonParams);\r\n    else if (button.includes(\"numpad\") && Number.isInteger(Number(button[button.length - 2]))) {\r\n      output = this.addStringAt(output, button[button.length - 2], ...commonParams);\r\n    } else if (button === \"{numpaddivide}\") output = this.addStringAt(output, \"/\", ...commonParams);\r\n    else if (button === \"{numpadmultiply}\") output = this.addStringAt(output, \"*\", ...commonParams);\r\n    else if (button === \"{numpadsubtract}\") output = this.addStringAt(output, \"-\", ...commonParams);\r\n    else if (button === \"{numpadadd}\") output = this.addStringAt(output, \"+\", ...commonParams);\r\n    else if (button === \"{numpaddecimal}\") output = this.addStringAt(output, \".\", ...commonParams);\r\n    else if (button === \"{\" || button === \"}\") output = this.addStringAt(output, button, ...commonParams);\r\n    else if (!button.includes(\"{\") && !button.includes(\"}\")) output = this.addStringAt(output, button, ...commonParams);\r\n\r\n    if (options.debug) {\r\n      console.log(\"Input will be: \" + output);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Moves the cursor position by a given amount\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPos(length: number, minus = false) {\r\n    const newCaretPos = this.updateCaretPosAction(length, minus);\r\n\r\n    this.dispatch((instance: any) => {\r\n      instance.setCaretPosition(newCaretPos);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Action method of updateCaretPos\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPosAction(length: number, minus = false) {\r\n    const options = this.getOptions();\r\n    let caretPosition = this.getCaretPosition();\r\n\r\n    if (caretPosition != null) {\r\n      if (minus) {\r\n        if (caretPosition > 0) caretPosition = caretPosition - length;\r\n      } else {\r\n        caretPosition = caretPosition + length;\r\n      }\r\n    }\r\n\r\n    if (options.debug) {\r\n      console.log(\"Caret at:\", caretPosition);\r\n    }\r\n\r\n    return caretPosition;\r\n  }\r\n\r\n  /**\r\n   * Adds a string to the input at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {string} str The string to add\r\n   * @param  {number} position The (cursor) position where the string should be added\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  addStringAt(source: string, str: string, position = source.length, positionEnd = source.length, moveCaret = false) {\r\n    let output;\r\n\r\n    if (!position && position !== 0) {\r\n      output = source + str;\r\n    } else {\r\n      output = [source.slice(0, position), str, source.slice(positionEnd)].join(\"\");\r\n\r\n      /**\r\n       * Avoid caret position change when maxLength is set\r\n       */\r\n      if (!this.isMaxLengthReached()) {\r\n        if (moveCaret) this.updateCaretPos(str.length);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Check whether the button is a standard button\r\n   */\r\n  isStandardButton = (button: string) => button && !(button[0] === \"{\" && button[button.length - 1] === \"}\");\r\n\r\n  /**\r\n   * Removes an amount of characters before a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  removeAt(source: string, position = source.length, positionEnd = source.length, moveCaret = false) {\r\n    if (position === 0 && positionEnd === 0) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      let prevTwoChars;\r\n      let emojiMatched;\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      if (position && position >= 0) {\r\n        prevTwoChars = source.substring(position - 2, position);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.substr(0, position - 2) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.substr(0, position - 1) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      } else {\r\n        prevTwoChars = source.slice(-2);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.slice(0, -2);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.slice(0, -1);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Removes an amount of characters after a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   */\r\n  removeForwardsAt(\r\n    source: string,\r\n    position: number = source.length,\r\n    positionEnd: number = source.length,\r\n    moveCaret = false\r\n  ) {\r\n    if (!source?.length || position === null) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      const nextTwoChars = source.substring(position, position + 2);\r\n      const emojiMatched = nextTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.substr(0, position) + source.substr(position + 2);\r\n      } else {\r\n        output = source.substr(0, position) + source.substr(position + 1);\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\r\n   *\r\n   * @param  {object} inputObj\r\n   * @param  {string} updatedInput\r\n   */\r\n  handleMaxLength(inputObj: KeyboardInput, updatedInput: string) {\r\n    const options = this.getOptions();\r\n    const maxLength = options.maxLength;\r\n    const currentInput = inputObj[options.inputName || \"default\"];\r\n    const condition = updatedInput.length - 1 >= maxLength;\r\n\r\n    if (\r\n      /**\r\n       * If pressing this button won't add more characters\r\n       * We exit out of this limiter function\r\n       */\r\n      updatedInput.length <= currentInput.length\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (Number.isInteger(maxLength)) {\r\n      if (options.debug) {\r\n        console.log(\"maxLength (num) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        /**\r\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\r\n         */\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (typeof maxLength === \"object\") {\r\n      const condition = updatedInput.length - 1 >= maxLength[options.inputName || \"default\"];\r\n\r\n      if (options.debug) {\r\n        console.log(\"maxLength (obj) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of maxLengthReached\r\n   */\r\n  isMaxLengthReached() {\r\n    return Boolean(this.maxLengthReached);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a touch device is being used\r\n   */\r\n  isTouchDevice() {\r\n    return \"ontouchstart\" in window || navigator.maxTouchPoints;\r\n  }\r\n\r\n  /**\r\n   * Determines whether pointer events are supported\r\n   */\r\n  pointerEventsSupported() {\r\n    return !!window.PointerEvent;\r\n  }\r\n\r\n  /**\r\n   * Bind all methods in a given class\r\n   */\r\n\r\n  static bindMethods(myClass: any, instance: any) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (const myMethod of Object.getOwnPropertyNames(myClass.prototype)) {\r\n      const excludeMethod = myMethod === \"constructor\" || myMethod === \"bindMethods\";\r\n      if (!excludeMethod) {\r\n        instance[myMethod] = instance[myMethod].bind(instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transforms an arbitrary string to camelCase\r\n   *\r\n   * @param  {string} str The string to transform.\r\n   */\r\n  camelCase(str: string): string {\r\n    if (!str) return \"\";\r\n\r\n    return str\r\n      .toLowerCase()\r\n      .trim()\r\n      .split(/[.\\-_\\s]/g)\r\n      .reduce((str, word) => (word.length ? str + word[0].toUpperCase() + word.slice(1) : str));\r\n  }\r\n\r\n  /**\r\n   * Split array into chunks\r\n   */\r\n  chunkArray<T>(arr: T[], size: number): T[][] {\r\n    return [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));\r\n  }\r\n\r\n  /**\r\n   * Escape regex input\r\n   */\r\n  escapeRegex(str: string) {\r\n    return str.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\r\n  }\r\n\r\n  /**\r\n   * Calculate caret position offset when using rtl option\r\n   */\r\n  getRtlOffset(index: number, input: string) {\r\n    let newIndex = index;\r\n    const startMarkerIndex = input.indexOf(\"\\u202B\");\r\n    const endMarkerIndex = input.indexOf(\"\\u202C\");\r\n\r\n    if (startMarkerIndex < index && startMarkerIndex != -1) {\r\n      newIndex--;\r\n    }\r\n    if (endMarkerIndex < index && startMarkerIndex != -1) {\r\n      newIndex--;\r\n    }\r\n\r\n    return newIndex < 0 ? 0 : newIndex;\r\n  }\r\n\r\n  /**\r\n   * Reusable empty function\r\n   */\r\n  static noop = () => {};\r\n}\r\n\r\nexport default Utilities;\r\n","import { KeyboardOptions, PhysicalKeyboardParams } from \"../interfaces\";\r\nimport Utilities from \"../services/Utilities\";\r\nimport { getDefaultLayout } from \"../services/KeyboardLayout\";\r\n\r\n/**\r\n * Layout Key Mapping Interface\r\n */\r\ninterface LayoutKeyMapping {\r\n  normal: string | number;\r\n  shift: string | number;\r\n}\r\n\r\n/**\r\n * Physical Keyboard Service\r\n */\r\nclass PhysicalKeyboard {\r\n  getOptions: () => KeyboardOptions;\r\n  dispatch: any;\r\n  layoutJSON: Record<string, LayoutKeyMapping> | null = null;\r\n  lastLayout = \"\";\r\n  shiftActive = false;\r\n  capslockActive = false;\r\n\r\n  /**\r\n   * Creates an instance of the PhysicalKeyboard service\r\n   */\r\n  constructor({ dispatch, getOptions }: PhysicalKeyboardParams) {\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.dispatch = dispatch;\r\n    this.getOptions = getOptions;\r\n\r\n    if (this.getOptions() && this.getOptions().layout) {\r\n      this.lastLayout = this.getOptions()?.layout?.default?.[1] || \"\";\r\n      const layout = this.getOptions().layout;\r\n      if (layout) {\r\n        this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(layout));\r\n      }\r\n    } else {\r\n      this.lastLayout = getDefaultLayout().default[1];\r\n      this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(getDefaultLayout()));\r\n    }\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(PhysicalKeyboard, this);\r\n  }\r\n\r\n  handleHighlightKeyDown(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    // if (options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)) {\r\n    //   e.preventDefault();\r\n    //   e.stopImmediatePropagation();\r\n    // }\r\n\r\n    if ((e.code === \"ShiftLeft\" || e.code === \"ShiftRight\") && !this.shiftActive) {\r\n      this.shiftActive = !this.shiftActive;\r\n    }\r\n\r\n    if (e.code === \"CapsLock\") {\r\n      this.capslockActive = !this.capslockActive;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const standardButtonPressed = instance.getButtonElement(buttonPressed);\r\n      const functionButtonPressed = instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      let buttonDOM;\r\n      let buttonName: string;\r\n\r\n      if (standardButtonPressed) {\r\n        buttonDOM = standardButtonPressed;\r\n        buttonName = buttonPressed;\r\n      } else if (functionButtonPressed) {\r\n        buttonDOM = functionButtonPressed;\r\n        buttonName = `{${buttonPressed}}`;\r\n      } else {\r\n        return;\r\n      }\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        buttonElement.style.background = options.physicalKeyboardHighlightBgColor || \"#dadce4\";\r\n        buttonElement.style.color = options.physicalKeyboardHighlightTextColor || \"black\";\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM[0]?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM[0]?.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  handleHighlightKeyUp(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    // if (options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)) {\r\n    //   e.preventDefault();\r\n    //   e.stopImmediatePropagation();\r\n    // }\r\n\r\n    if (e.code === \"ShiftLeft\" || e.code === \"ShiftRight\") {\r\n      this.shiftActive = false;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const buttonDOM = instance.getButtonElement(buttonPressed) || instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        if (buttonElement.removeAttribute) {\r\n          buttonElement.removeAttribute(\"style\");\r\n        }\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM[0]?.onpointerup?.(e);\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM?.onpointerup?.(e);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\r\n   * @param  {object} e The KeyboardEvent\r\n   * @returns {string} The simple-keyboard layout key\r\n   */\r\n  getSimpleKeyboardLayoutKey(e: KeyboardEvent): string {\r\n    let output = \"\";\r\n\r\n    const options = this.getOptions();\r\n    const currentLayout = options?.layout?.default?.[1] ?? getDefaultLayout().default[1];\r\n    if (this.lastLayout !== currentLayout) {\r\n      this.lastLayout = currentLayout || \"\";\r\n\r\n      const layout = options?.layout ?? getDefaultLayout();\r\n      this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(layout));\r\n    }\r\n\r\n    if (this.layoutJSON && this.layoutJSON[e.code]) {\r\n      // Determine whether to use normal or shift based on Shift & CapsLock state\r\n      output =\r\n        this.shiftActive || this.capslockActive\r\n          ? this.layoutJSON[e.code].shift.toString()\r\n          : this.layoutJSON[e.code].normal.toString();\r\n    } else {\r\n      output = e.key && e.key !== \"Unidentified\" ? e.key : this.keyCodeToKey(e?.keyCode);\r\n    }\r\n\r\n    // Normalize left/right variations\r\n    const normalizeKeyMap: Record<string, string> = {\r\n      ShiftLeft: \"shift\",\r\n      ShiftRight: \"shift\",\r\n      ControlLeft: \"ctrl\",\r\n      ControlRight: \"ctrl\",\r\n      AltLeft: \"alt\",\r\n      AltRight: \"alt\",\r\n      MetaLeft: \"meta\",\r\n      MetaRight: \"meta\",\r\n      Backspace: \"bksp\",\r\n      CapsLock: \"lock\",\r\n      Enter: \"enter\",\r\n      Tab: \"tab\",\r\n    };\r\n\r\n    return normalizeKeyMap[output] || (output.length > 1 ? output.toLowerCase() : output);\r\n  }\r\n\r\n  /**\r\n   * Retrieve key from keyCode\r\n   */\r\n  keyCodeToKey(keyCode: number): string {\r\n    return (\r\n      {\r\n        8: \"Backspace\",\r\n        9: \"Tab\",\r\n        13: \"Enter\",\r\n        16: \"Shift\",\r\n        17: \"Ctrl\",\r\n        18: \"Alt\",\r\n        19: \"Pause\",\r\n        20: \"CapsLock\",\r\n        27: \"Esc\",\r\n        32: \"Space\",\r\n        33: \"PageUp\",\r\n        34: \"PageDown\",\r\n        35: \"End\",\r\n        36: \"Home\",\r\n        37: \"ArrowLeft\",\r\n        38: \"ArrowUp\",\r\n        39: \"ArrowRight\",\r\n        40: \"ArrowDown\",\r\n        45: \"Insert\",\r\n        46: \"Delete\",\r\n        48: \"0\",\r\n        49: \"1\",\r\n        50: \"2\",\r\n        51: \"3\",\r\n        52: \"4\",\r\n        53: \"5\",\r\n        54: \"6\",\r\n        55: \"7\",\r\n        56: \"8\",\r\n        57: \"9\",\r\n        65: \"A\",\r\n        66: \"B\",\r\n        67: \"C\",\r\n        68: \"D\",\r\n        69: \"E\",\r\n        70: \"F\",\r\n        71: \"G\",\r\n        72: \"H\",\r\n        73: \"I\",\r\n        74: \"J\",\r\n        75: \"K\",\r\n        76: \"L\",\r\n        77: \"M\",\r\n        78: \"N\",\r\n        79: \"O\",\r\n        80: \"P\",\r\n        81: \"Q\",\r\n        82: \"R\",\r\n        83: \"S\",\r\n        84: \"T\",\r\n        85: \"U\",\r\n        86: \"V\",\r\n        87: \"W\",\r\n        88: \"X\",\r\n        89: \"Y\",\r\n        90: \"Z\",\r\n        91: \"Meta\",\r\n        96: \"Numpad0\",\r\n        97: \"Numpad1\",\r\n        98: \"Numpad2\",\r\n        99: \"Numpad3\",\r\n        100: \"Numpad4\",\r\n        101: \"Numpad5\",\r\n        102: \"Numpad6\",\r\n        103: \"Numpad7\",\r\n        104: \"Numpad8\",\r\n        105: \"Numpad9\",\r\n        106: \"NumpadMultiply\",\r\n        107: \"NumpadAdd\",\r\n        109: \"NumpadSubtract\",\r\n        110: \"NumpadDecimal\",\r\n        111: \"NumpadDivide\",\r\n        112: \"F1\",\r\n        113: \"F2\",\r\n        114: \"F3\",\r\n        115: \"F4\",\r\n        116: \"F5\",\r\n        117: \"F6\",\r\n        118: \"F7\",\r\n        119: \"F8\",\r\n        120: \"F9\",\r\n        121: \"F10\",\r\n        122: \"F11\",\r\n        123: \"F12\",\r\n        144: \"NumLock\",\r\n        145: \"ScrollLock\",\r\n        186: \";\",\r\n        187: \"=\",\r\n        188: \",\",\r\n        189: \"-\",\r\n        190: \".\",\r\n        191: \"/\",\r\n        192: \"`\",\r\n        219: \"[\",\r\n        220: \"\\\\\",\r\n        221: \"]\",\r\n        222: \"'\",\r\n      }[keyCode] || \"\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Extracts and pads a layout object\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with padding\r\n   */\r\n  extractAndPadLayout(layout: Record<string, string[]>): Record<string, (string | number)[][]> {\r\n    const qwertyRowLengths = [14, 14, 13, 12, 3]; // Number of keys per QWERTY row\r\n\r\n    const processedLayout: Record<string, (string | number)[][]> = { default: [], shift: [] };\r\n\r\n    for (const type of [\"default\", \"shift\"]) {\r\n      if (!layout[type]) continue; // Skip if layout type is missing\r\n\r\n      const rows = layout[type].map((row) => row.split(\" \"));\r\n\r\n      for (let i = 0; i < qwertyRowLengths.length; i++) {\r\n        processedLayout[type][i] = rows[i] ? [...rows[i]] : [];\r\n        while (processedLayout[type][i].length < qwertyRowLengths[i]) {\r\n          processedLayout[type][i].push(-1); // Fill missing spots\r\n        }\r\n      }\r\n    }\r\n\r\n    return processedLayout;\r\n  }\r\n\r\n  /**\r\n   * Maps a layout object to event codes\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with event codes\r\n   */\r\n\r\n  mapLayoutToEventCodes(layout: Record<string, (string | number)[][]>): Record<string, LayoutKeyMapping> {\r\n    const mappedLayout: Record<string, LayoutKeyMapping> = {};\r\n\r\n    const qwertyRows = [\r\n      [\r\n        \"Backquote\",\r\n        \"Digit1\",\r\n        \"Digit2\",\r\n        \"Digit3\",\r\n        \"Digit4\",\r\n        \"Digit5\",\r\n        \"Digit6\",\r\n        \"Digit7\",\r\n        \"Digit8\",\r\n        \"Digit9\",\r\n        \"Digit0\",\r\n        \"Minus\",\r\n        \"Equal\",\r\n        \"Backspace\",\r\n      ],\r\n      [\r\n        \"Tab\",\r\n        \"KeyQ\",\r\n        \"KeyW\",\r\n        \"KeyE\",\r\n        \"KeyR\",\r\n        \"KeyT\",\r\n        \"KeyY\",\r\n        \"KeyU\",\r\n        \"KeyI\",\r\n        \"KeyO\",\r\n        \"KeyP\",\r\n        \"BracketLeft\",\r\n        \"BracketRight\",\r\n        \"Backslash\",\r\n      ],\r\n      [\r\n        \"CapsLock\",\r\n        \"KeyA\",\r\n        \"KeyS\",\r\n        \"KeyD\",\r\n        \"KeyF\",\r\n        \"KeyG\",\r\n        \"KeyH\",\r\n        \"KeyJ\",\r\n        \"KeyK\",\r\n        \"KeyL\",\r\n        \"Semicolon\",\r\n        \"Quote\",\r\n        \"Enter\",\r\n      ],\r\n      [\"ShiftLeft\", \"KeyZ\", \"KeyX\", \"KeyC\", \"KeyV\", \"KeyB\", \"KeyN\", \"KeyM\", \"Comma\", \"Period\", \"Slash\", \"ShiftRight\"],\r\n      [\"ControlLeft\", \"AltLeft\", \"Space\"],\r\n    ];\r\n\r\n    for (let rowIndex = 0; rowIndex < qwertyRows.length; rowIndex++) {\r\n      for (let colIndex = 0; colIndex < qwertyRows[rowIndex].length; colIndex++) {\r\n        const eventCode = qwertyRows[rowIndex][colIndex];\r\n        const normalKey = layout.default[rowIndex][colIndex] ?? \"\";\r\n        const shiftKey = layout.shift[rowIndex][colIndex] ?? \"\";\r\n\r\n        mappedLayout[eventCode] = {\r\n          normal: normalKey !== -1 ? normalKey : \"\",\r\n          shift: shiftKey !== -1 ? shiftKey : \"\",\r\n        };\r\n      }\r\n    }\r\n\r\n    return mappedLayout;\r\n  }\r\n\r\n  isModifierKey = (e: KeyboardEvent): boolean => {\r\n    return (\r\n      e.altKey ||\r\n      e.ctrlKey ||\r\n      e.shiftKey ||\r\n      [\"Tab\", \"CapsLock\", \"Esc\", \"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].includes(\r\n        e.code || e.key || this.keyCodeToKey(e?.keyCode)\r\n      )\r\n    );\r\n  };\r\n}\r\n\r\nexport default PhysicalKeyboard;\r\n","import { KeyboardLayoutObject } from \"../interfaces\";\r\n\r\nexport const getDefaultLayout = (): KeyboardLayoutObject => {\r\n  return {\r\n    default: [\r\n      \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\r\n      \"{tab} q w e r t y u i o p [ ] \\\\\",\r\n      \"{lock} a s d f g h j k l ; ' {enter}\",\r\n      \"{shift} z x c v b n m , . / {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n    shift: [\r\n      \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\r\n      \"{tab} Q W E R T Y U I O P { } |\",\r\n      '{lock} A S D F G H J K L : \" {enter}',\r\n      \"{shift} Z X C V B N M < > ? {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n  };\r\n};\r\n","import \"./css/CandidateBox.css\";\r\n\r\nimport Utilities from \"../services/Utilities\";\r\nimport {\r\n  CandidateBoxParams,\r\n  CandidateBoxRenderParams,\r\n  CandidateBoxShowParams,\r\n  KeyboardOptions,\r\n} from \"./../interfaces\";\r\n\r\nclass CandidateBox {\r\n  utilities: Utilities;\r\n  options: KeyboardOptions;\r\n  candidateBoxElement!: HTMLDivElement;\r\n  pageIndex = 0;\r\n  pageSize: number;\r\n\r\n  constructor({ utilities, options }: CandidateBoxParams) {\r\n    this.utilities = utilities;\r\n    this.options = options;\r\n    Utilities.bindMethods(CandidateBox, this);\r\n    this.pageSize = this.utilities.getOptions().layoutCandidatesPageSize || 5;\r\n  }\r\n\r\n  destroy() {\r\n    if (this.candidateBoxElement) {\r\n      this.candidateBoxElement.remove();\r\n      this.pageIndex = 0;\r\n    }\r\n  }\r\n\r\n  show({\r\n    candidateValue,\r\n    targetElement,\r\n    onSelect,\r\n  }: CandidateBoxShowParams): void {\r\n    if (!candidateValue || !candidateValue.length) {\r\n      return;\r\n    }\r\n\r\n    const candidateListPages = this.utilities.chunkArray(\r\n      candidateValue.split(\" \"),\r\n      this.pageSize\r\n    );\r\n\r\n    this.renderPage({\r\n      candidateListPages,\r\n      targetElement,\r\n      pageIndex: this.pageIndex,\r\n      nbPages: candidateListPages.length,\r\n      onItemSelected: (selectedCandidate: string, e: MouseEvent) => {\r\n        onSelect(selectedCandidate, e);\r\n        this.destroy();\r\n      },\r\n    });\r\n  }\r\n\r\n  renderPage({\r\n    candidateListPages,\r\n    targetElement,\r\n    pageIndex,\r\n    nbPages,\r\n    onItemSelected,\r\n  }: CandidateBoxRenderParams) {\r\n    // Remove current candidate box, if any\r\n    this.candidateBoxElement?.remove();\r\n\r\n    // Create candidate box element\r\n    this.candidateBoxElement = document.createElement(\"div\");\r\n    this.candidateBoxElement.className = \"hg-candidate-box\";\r\n\r\n    // Candidate box list\r\n    const candidateListULElement = document.createElement(\"ul\");\r\n    candidateListULElement.className = \"hg-candidate-box-list\";\r\n\r\n    // Create Candidate box list items\r\n    candidateListPages[pageIndex].forEach((candidateListItem) => {\r\n      const candidateListLIElement = document.createElement(\"li\");\r\n      const getMouseEvent = () => {\r\n        const mouseEvent = new (this.options.useTouchEvents ? TouchEvent : MouseEvent)(\"click\");\r\n        Object.defineProperty(mouseEvent, \"target\", {\r\n          value: candidateListLIElement,\r\n        });\r\n        return mouseEvent;\r\n      };\r\n\r\n      candidateListLIElement.className = \"hg-candidate-box-list-item\";\r\n      candidateListLIElement.innerHTML = this.options.display?.[candidateListItem] || candidateListItem;\r\n\r\n      if(this.options.useTouchEvents) {\r\n        candidateListLIElement.ontouchstart = (e: any) =>\r\n          onItemSelected(candidateListItem, e || getMouseEvent());\r\n      } else {\r\n        candidateListLIElement.onclick = (e = getMouseEvent() as MouseEvent) =>\r\n          onItemSelected(candidateListItem, e);\r\n      }\r\n\r\n      // Append list item to ul\r\n      candidateListULElement.appendChild(candidateListLIElement);\r\n    });\r\n\r\n    // Add previous button\r\n    const isPrevBtnElementActive = pageIndex > 0;\r\n    const prevBtnElement = document.createElement(\"div\");\r\n    prevBtnElement.classList.add(\"hg-candidate-box-prev\");\r\n    isPrevBtnElementActive &&\r\n      prevBtnElement.classList.add(\"hg-candidate-box-btn-active\");\r\n\r\n    const prevBtnElementClickAction = () => {\r\n      if (!isPrevBtnElementActive) return;\r\n      this.renderPage({\r\n        candidateListPages,\r\n        targetElement,\r\n        pageIndex: pageIndex - 1,\r\n        nbPages,\r\n        onItemSelected,\r\n      });\r\n    };\r\n\r\n    if(this.options.useTouchEvents) {\r\n      prevBtnElement.ontouchstart = prevBtnElementClickAction;\r\n    } else {\r\n      prevBtnElement.onclick = prevBtnElementClickAction;\r\n    }\r\n    \r\n    this.candidateBoxElement.appendChild(prevBtnElement);\r\n\r\n    // Add elements to container\r\n    this.candidateBoxElement.appendChild(candidateListULElement);\r\n\r\n    // Add next button\r\n    const isNextBtnElementActive = pageIndex < nbPages - 1;\r\n    const nextBtnElement = document.createElement(\"div\");\r\n    nextBtnElement.classList.add(\"hg-candidate-box-next\");\r\n    isNextBtnElementActive &&\r\n      nextBtnElement.classList.add(\"hg-candidate-box-btn-active\");\r\n\r\n    const nextBtnElementClickAction = () => {\r\n      if (!isNextBtnElementActive) return;\r\n      this.renderPage({\r\n        candidateListPages,\r\n        targetElement,\r\n        pageIndex: pageIndex + 1,\r\n        nbPages,\r\n        onItemSelected,\r\n      });\r\n    };\r\n\r\n    if(this.options.useTouchEvents) {\r\n      nextBtnElement.ontouchstart = nextBtnElementClickAction;\r\n    } else {\r\n      nextBtnElement.onclick = nextBtnElementClickAction;\r\n    }\r\n\r\n    this.candidateBoxElement.appendChild(nextBtnElement);\r\n\r\n    // Append candidate box to target element\r\n    targetElement.prepend(this.candidateBoxElement);\r\n  }\r\n}\r\n\r\nexport default CandidateBox;\r\n","import \"./css/Keyboard.css\";\r\n\r\nimport { getDefaultLayout } from \"../services/KeyboardLayout\";\r\nimport PhysicalKeyboard from \"../services/PhysicalKeyboard\";\r\nimport Utilities from \"../services/Utilities\";\r\nimport {\r\n  KeyboardOptions,\r\n  KeyboardInput,\r\n  KeyboardButtonElements,\r\n  KeyboardHandlerEvent,\r\n  KeyboardElement,\r\n  SKWindow,\r\n} from \"../interfaces\";\r\nimport CandidateBox from \"./CandidateBox\";\r\n\r\n/**\r\n * Root class for simple-keyboard.\r\n * This class:\r\n * - Parses the options\r\n * - Renders the rows and buttons\r\n * - Handles button functionality\r\n */\r\nclass SimpleKeyboard {\r\n  input!: KeyboardInput;\r\n  options!: KeyboardOptions;\r\n  utilities!: Utilities;\r\n  caretPosition!: number | null;\r\n  caretPositionEnd!: number | null;\r\n  keyboardDOM!: KeyboardElement;\r\n  keyboardPluginClasses!: string;\r\n  keyboardDOMClass!: string;\r\n  buttonElements!: KeyboardButtonElements;\r\n  currentInstanceName!: string;\r\n  allKeyboardInstances!: { [key: string]: SimpleKeyboard };\r\n  keyboardInstanceNames!: string[];\r\n  isFirstKeyboardInstance!: boolean;\r\n  physicalKeyboard!: PhysicalKeyboard;\r\n  modules!: { [key: string]: any };\r\n  activeButtonClass!: string;\r\n  holdInteractionTimeout!: number;\r\n  holdTimeout!: number;\r\n  isMouseHold!: boolean;\r\n  initialized!: boolean;\r\n  candidateBox!: CandidateBox | null;\r\n  keyboardRowsDOM!: KeyboardElement;\r\n  defaultName = \"default\";\r\n  activeInputElement: HTMLInputElement | HTMLTextAreaElement | null = null;\r\n  listenersAdded = false;\r\n\r\n  /**\r\n   * Creates an instance of SimpleKeyboard\r\n   * @param {Array} selectorOrOptions If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\r\n   */\r\n  constructor(selectorOrOptions?: string | HTMLDivElement | KeyboardOptions, keyboardOptions?: KeyboardOptions) {\r\n    if (typeof window === \"undefined\") return;\r\n\r\n    const { keyboardDOMClass, keyboardDOM, options = {} } = this.handleParams(selectorOrOptions, keyboardOptions);\r\n\r\n    /**\r\n     * Initializing Utilities\r\n     */\r\n    this.utilities = new Utilities({\r\n      getOptions: this.getOptions,\r\n      getCaretPosition: this.getCaretPosition,\r\n      getCaretPositionEnd: this.getCaretPositionEnd,\r\n      dispatch: this.dispatch,\r\n    });\r\n\r\n    /**\r\n     * Caret position\r\n     */\r\n    this.caretPosition = null;\r\n\r\n    /**\r\n     * Caret position end\r\n     */\r\n    this.caretPositionEnd = null;\r\n\r\n    /**\r\n     * Processing options\r\n     */\r\n    this.keyboardDOM = keyboardDOM;\r\n\r\n    /**\r\n     * @type {object}\r\n     * @property {object} layout Modify the keyboard layout.\r\n     * @property {string} layoutName Specifies which layout should be used.\r\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\r\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\r\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\r\n     * @property {array} buttonTheme A prop to add your own css classes to one or several buttons.\r\n     * @property {array} buttonAttributes A prop to add your own attributes to one or several buttons.\r\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\r\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\r\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\r\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\r\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\r\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\r\n     * @property {boolean} physicalKeyboardHighlightPress Presses keys highlighted by physicalKeyboardHighlight\r\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\r\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\r\n     * @property {boolean} physicalKeyboardHighlightPressUseClick Whether physicalKeyboardHighlightPress should use clicks to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPressUsePointerEvents Whether physicalKeyboardHighlightPress should use pointer events to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPreventDefault Whether physicalKeyboardHighlight should use preventDefault to disable default browser actions.\r\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\r\n     * @property {boolean} preventMouseUpDefault Calling preventDefault for the mouseup events.\r\n     * @property {boolean} stopMouseDownPropagation Stops pointer down events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {boolean} stopMouseUpPropagation Stops pointer up events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\r\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\r\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n     * @property {function(keyboard: Keyboard):void} beforeInputUpdate Perform an action before any input change\r\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\r\n     * @property {boolean} useButtonTag Render buttons as a button element instead of a div element.\r\n     * @property {boolean} disableCaretPositioning A prop to ensure characters are always be added/removed at the end of the string.\r\n     * @property {object} inputPattern Restrains input(s) change to the defined regular expression pattern.\r\n     * @property {boolean} useTouchEvents Instructs simple-keyboard to use touch events instead of click events.\r\n     * @property {boolean} autoUseTouchEvents Enable useTouchEvents automatically when touch device is detected.\r\n     * @property {boolean} useMouseEvents Opt out of PointerEvents handling, falling back to the prior mouse event logic.\r\n     * @property {function} destroy Clears keyboard listeners and DOM elements.\r\n     * @property {boolean} disableButtonHold Disable button hold action.\r\n     * @property {boolean} rtl Adds unicode right-to-left control characters to input return values.\r\n     * @property {function} onKeyReleased Executes the callback function on key release.\r\n     * @property {array} modules Module classes to be loaded by simple-keyboard.\r\n     * @property {boolean} enableLayoutCandidates Enable input method editor candidate list support.\r\n     * @property {object} excludeFromLayout Buttons to exclude from layout\r\n     * @property {number} layoutCandidatesPageSize Determines size of layout candidate list\r\n     * @property {boolean} layoutCandidatesCaseSensitiveMatch Determines whether layout candidate match should be case sensitive.\r\n     * @property {boolean} disableCandidateNormalization Disables the automatic normalization for selected layout candidates\r\n     * @property {boolean} enableLayoutCandidatesKeyPress Enables onKeyPress triggering for layoutCandidate items\r\n     * @property {boolean} updateCaretOnSelectionChange Updates caret when selectionchange event is fired\r\n     * @property {boolean} clickOnMouseDown When useMouseEvents is enabled, this option allows you to trigger a button click event on mousedown\r\n     */\r\n    this.options = {\r\n      layoutName: \"default\",\r\n      theme: \"hg-theme-default\",\r\n      inputName: \"default\",\r\n      preventMouseDownDefault: false,\r\n      enableLayoutCandidates: true,\r\n      excludeFromLayout: {},\r\n      ...options,\r\n    };\r\n\r\n    /**\r\n     * @type {object} Classes identifying loaded plugins\r\n     */\r\n    this.keyboardPluginClasses = \"\";\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(SimpleKeyboard, this);\r\n\r\n    /**\r\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\r\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\r\n     * @example\r\n     * // To get entered input\r\n     * const input = keyboard.getInput();\r\n     *\r\n     * // To clear entered input.\r\n     * keyboard.clearInput();\r\n     *\r\n     * @type {object}\r\n     * @property {object} default Default SimpleKeyboard internal input.\r\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\r\n     */\r\n    const { inputName = this.defaultName } = this.options;\r\n    this.input = {};\r\n    this.input[inputName] = \"\";\r\n\r\n    /**\r\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\r\n     */\r\n    this.keyboardDOMClass = keyboardDOMClass;\r\n\r\n    /**\r\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\r\n     */\r\n    this.buttonElements = {};\r\n\r\n    /**\r\n     * Simple-keyboard Instances\r\n     * This enables multiple simple-keyboard support with easier management\r\n     */\r\n    if (!(window as SKWindow)[\"SimpleKeyboardInstances\"]) (window as SKWindow)[\"SimpleKeyboardInstances\"] = {};\r\n\r\n    this.currentInstanceName = this.utilities.camelCase(this.keyboardDOMClass);\r\n    (window as SKWindow)[\"SimpleKeyboardInstances\"][this.currentInstanceName] = this;\r\n\r\n    /**\r\n     * Instance vars\r\n     */\r\n    this.allKeyboardInstances = (window as SKWindow)[\"SimpleKeyboardInstances\"];\r\n    this.keyboardInstanceNames = Object.keys((window as SKWindow)[\"SimpleKeyboardInstances\"]);\r\n    this.isFirstKeyboardInstance = this.keyboardInstanceNames[0] === this.currentInstanceName;\r\n\r\n    /**\r\n     * Physical Keyboard support\r\n     */\r\n    this.physicalKeyboard = new PhysicalKeyboard({\r\n      dispatch: this.dispatch,\r\n      getOptions: this.getOptions,\r\n    });\r\n\r\n    /**\r\n     * Initializing CandidateBox\r\n     */\r\n    this.candidateBox = this.options.enableLayoutCandidates\r\n      ? new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        })\r\n      : null;\r\n\r\n    /**\r\n     * Rendering keyboard\r\n     */\r\n    if (this.keyboardDOM) this.render();\r\n    else {\r\n      console.warn(`\".${keyboardDOMClass}\" was not found in the DOM.`);\r\n      throw new Error(\"KEYBOARD_DOM_ERROR\");\r\n    }\r\n\r\n    /**\r\n     * Modules\r\n     */\r\n    this.modules = {};\r\n    this.loadModules();\r\n  }\r\n\r\n  /**\r\n   * parseParams\r\n   */\r\n  handleParams = (\r\n    selectorOrOptions?: string | HTMLDivElement | KeyboardOptions,\r\n    keyboardOptions?: KeyboardOptions\r\n  ): {\r\n    keyboardDOMClass: string;\r\n    keyboardDOM: KeyboardElement;\r\n    options: Partial<KeyboardOptions | undefined>;\r\n  } => {\r\n    let keyboardDOMClass;\r\n    let keyboardDOM;\r\n    let options;\r\n\r\n    /**\r\n     * If first parameter is a string:\r\n     * Consider it as an element's class\r\n     */\r\n    if (typeof selectorOrOptions === \"string\") {\r\n      keyboardDOMClass = selectorOrOptions.split(\".\").join(\"\");\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * If first parameter is an KeyboardElement\r\n       * Consider it as the keyboard DOM element\r\n       */\r\n    } else if (selectorOrOptions instanceof HTMLDivElement) {\r\n      /**\r\n       * This element must have a class, otherwise throw\r\n       */\r\n      if (!selectorOrOptions.className) {\r\n        console.warn(\"Any DOM element passed as parameter must have a class.\");\r\n        throw new Error(\"KEYBOARD_DOM_CLASS_ERROR\");\r\n      }\r\n\r\n      keyboardDOMClass = selectorOrOptions.className.split(\" \")[0];\r\n      keyboardDOM = selectorOrOptions;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * Otherwise, search for .simple-keyboard DOM element\r\n       */\r\n    } else {\r\n      keyboardDOMClass = \"simple-keyboard\";\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = selectorOrOptions;\r\n    }\r\n\r\n    return {\r\n      keyboardDOMClass,\r\n      keyboardDOM,\r\n      options,\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Getters\r\n   */\r\n  getOptions = (): KeyboardOptions => this.options;\r\n  getCaretPosition = (): number | null => this.caretPosition;\r\n  getCaretPositionEnd = (): number | null => this.caretPositionEnd;\r\n\r\n  /**\r\n   * Changes the internal caret position\r\n   * @param {number} position The caret's start position\r\n   * @param {number} positionEnd The caret's end position\r\n   */\r\n  setCaretPosition(position: number | null, endPosition = position): void {\r\n    this.caretPosition = position;\r\n    this.caretPositionEnd = endPosition;\r\n  }\r\n\r\n  /**\r\n   * Retrieve the candidates for a given input\r\n   * @param input The input string to check\r\n   */\r\n  getInputCandidates(input: string): { candidateKey: string; candidateValue: string } | Record<string, never> {\r\n    const { layoutCandidates: layoutCandidatesObj, layoutCandidatesCaseSensitiveMatch } = this.options;\r\n\r\n    if (!layoutCandidatesObj || typeof layoutCandidatesObj !== \"object\") {\r\n      return {};\r\n    }\r\n\r\n    const layoutCandidates = Object.keys(layoutCandidatesObj).filter((layoutCandidate: string) => {\r\n      const inputSubstr = input.substring(0, this.getCaretPositionEnd() || 0) || input;\r\n      const regexp = new RegExp(\r\n        `${this.utilities.escapeRegex(layoutCandidate)}$`,\r\n        layoutCandidatesCaseSensitiveMatch ? \"g\" : \"gi\"\r\n      );\r\n      const matches = [...inputSubstr.matchAll(regexp)];\r\n      return !!matches.length;\r\n    });\r\n\r\n    if (layoutCandidates.length > 1) {\r\n      const candidateKey = layoutCandidates.sort((a, b) => b.length - a.length)[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else if (layoutCandidates.length) {\r\n      const candidateKey = layoutCandidates[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows a suggestion box with a list of candidate words\r\n   * @param candidates The chosen candidates string as defined in the layoutCandidates option\r\n   * @param targetElement The element next to which the candidates box will be shown\r\n   */\r\n  showCandidatesBox(candidateKey: string, candidateValue: string, targetElement: KeyboardElement): void {\r\n    if (this.candidateBox) {\r\n      this.candidateBox.show({\r\n        candidateValue,\r\n        targetElement,\r\n        onSelect: (selectedCandidate: string, e: MouseEvent) => {\r\n          const { layoutCandidatesCaseSensitiveMatch, disableCandidateNormalization, enableLayoutCandidatesKeyPress } =\r\n            this.options;\r\n\r\n          let candidateStr = selectedCandidate;\r\n\r\n          if (!disableCandidateNormalization) {\r\n            /**\r\n             * Making sure that our suggestions are not composed characters\r\n             */\r\n            candidateStr = selectedCandidate.normalize(\"NFD\");\r\n          }\r\n\r\n          /**\r\n           * Perform an action before any input change\r\n           */\r\n          if (typeof this.options.beforeInputUpdate === \"function\") {\r\n            this.options.beforeInputUpdate(this);\r\n          }\r\n\r\n          const currentInput = this.getInput(this.options.inputName, true);\r\n          const initialCaretPosition = this.getCaretPositionEnd() || 0;\r\n          const inputSubstr = currentInput.substring(0, initialCaretPosition || 0) || currentInput;\r\n\r\n          const regexp = new RegExp(\r\n            `${this.utilities.escapeRegex(candidateKey)}$`,\r\n            layoutCandidatesCaseSensitiveMatch ? \"g\" : \"gi\"\r\n          );\r\n          const newInputSubstr = inputSubstr.replace(regexp, candidateStr);\r\n          const newInput = currentInput.replace(inputSubstr, newInputSubstr);\r\n\r\n          const caretPositionDiff = newInputSubstr.length - inputSubstr.length;\r\n          let newCaretPosition = (initialCaretPosition || currentInput.length) + caretPositionDiff;\r\n\r\n          if (newCaretPosition < 0) newCaretPosition = 0;\r\n\r\n          this.setInput(newInput, this.options.inputName, true);\r\n          this.setCaretPosition(newCaretPosition);\r\n\r\n          /**\r\n           * Calling onKeyPress\r\n           * We pass in the composed candidate instead of the decomposed one\r\n           * To prevent confusion for users\r\n           */\r\n          if (enableLayoutCandidatesKeyPress && typeof this.options.onKeyPress === \"function\") {\r\n            this.options.onKeyPress(selectedCandidate, e);\r\n          }\r\n\r\n          if (typeof this.options.onChange === \"function\") {\r\n            this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n          }\r\n\r\n          /**\r\n           * Calling onChangeAll\r\n           */\r\n          if (typeof this.options.onChangeAll === \"function\") this.options.onChangeAll(this.getAllInputs(), e);\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles clicks made to keyboard buttons\r\n   * @param  {string} button The button's layout name.\r\n   */\r\n  handleButtonClicked(button: string, e?: KeyboardHandlerEvent): void {\r\n    const { inputName = this.defaultName, debug } = this.options;\r\n    /**\r\n     * Ignoring placeholder buttons\r\n     */\r\n    if (button === \"{//}\") return;\r\n\r\n    /**\r\n     * Creating inputName if it doesn't exist\r\n     */\r\n    if (!this.input[inputName]) this.input[inputName] = \"\";\r\n\r\n    /**\r\n     * Perform an action before any input change\r\n     */\r\n    if (typeof this.options.beforeInputUpdate === \"function\") {\r\n      this.options.beforeInputUpdate(this);\r\n    }\r\n\r\n    /**\r\n     * Calculating new input\r\n     */\r\n    const updatedInput = this.utilities.getUpdatedInput(\r\n      button,\r\n      this.input[inputName],\r\n      this.caretPosition,\r\n      this.caretPositionEnd\r\n    );\r\n\r\n    /**\r\n     * EDGE CASE: Check for whole input selection changes that will yield same updatedInput\r\n     */\r\n    if (this.utilities.isStandardButton(button) && this.activeInputElement) {\r\n      const isEntireInputSelection =\r\n        this.input[inputName] &&\r\n        this.input[inputName] === updatedInput &&\r\n        this.caretPosition === 0 &&\r\n        this.caretPositionEnd === updatedInput.length;\r\n\r\n      if (isEntireInputSelection) {\r\n        this.setInput(\"\", this.options.inputName, true);\r\n        this.setCaretPosition(0);\r\n        this.activeInputElement.value = \"\";\r\n        this.activeInputElement.setSelectionRange(0, 0);\r\n        this.handleButtonClicked(button, e);\r\n        return;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Calling onKeyPress\r\n     */\r\n    if (typeof this.options.onKeyPress === \"function\") this.options.onKeyPress(button, e);\r\n\r\n    if (\r\n      // If input will change as a result of this button press\r\n      this.input[inputName] !== updatedInput &&\r\n      // This pertains to the \"inputPattern\" option:\r\n      // If inputPattern isn't set\r\n      (!this.options.inputPattern ||\r\n        // Or, if it is set and if the pattern is valid - we proceed.\r\n        (this.options.inputPattern && this.inputPatternIsValid(updatedInput)))\r\n    ) {\r\n      /**\r\n       * If maxLength and handleMaxLength yield true, halting\r\n       */\r\n      if (this.options.maxLength && this.utilities.handleMaxLength(this.input, updatedInput)) {\r\n        return;\r\n      }\r\n\r\n      /**\r\n       * Updating input\r\n       */\r\n      const newInputValue = this.utilities.getUpdatedInput(\r\n        button,\r\n        this.input[inputName],\r\n        this.caretPosition,\r\n        this.caretPositionEnd,\r\n        true\r\n      );\r\n\r\n      this.setInput(newInputValue, this.options.inputName, true);\r\n\r\n      if (debug) console.log(\"Input changed:\", this.getAllInputs());\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          \"Caret at: \",\r\n          this.getCaretPosition(),\r\n          this.getCaretPositionEnd(),\r\n          `(${this.keyboardDOMClass})`,\r\n          e?.type\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Enforce syncInstanceInputs, if set\r\n       */\r\n      if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n\r\n      /**\r\n       * Calling onChange\r\n       */\r\n      if (typeof this.options.onChange === \"function\")\r\n        this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n\r\n      /**\r\n       * Calling onChangeAll\r\n       */\r\n      if (typeof this.options.onChangeAll === \"function\") this.options.onChangeAll(this.getAllInputs(), e);\r\n\r\n      /**\r\n       * Check if this new input has candidates (suggested words)\r\n       */\r\n      if (e?.target && this.options.enableLayoutCandidates) {\r\n        const { candidateKey, candidateValue } = this.getInputCandidates(updatedInput);\r\n\r\n        if (candidateKey && candidateValue) {\r\n          this.showCandidatesBox(candidateKey, candidateValue, this.keyboardDOM);\r\n        } else {\r\n          this.candidateBox?.destroy();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * After a button is clicked the selection (if any) will disappear\r\n     * we should reflect this in our state, as applicable\r\n     */\r\n    if (this.caretPositionEnd && this.caretPosition !== this.caretPositionEnd) {\r\n      this.setCaretPosition(this.caretPositionEnd, this.caretPositionEnd);\r\n\r\n      if (this.activeInputElement) {\r\n        this.activeInputElement.setSelectionRange(this.caretPositionEnd, this.caretPositionEnd);\r\n      }\r\n\r\n      if (this.options.debug) {\r\n        console.log(\"Caret position aligned\", this.caretPosition);\r\n      }\r\n    }\r\n\r\n    if (debug) {\r\n      console.log(\"Key pressed:\", button);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get mouse hold state\r\n   */\r\n  getMouseHold() {\r\n    return this.isMouseHold;\r\n  }\r\n\r\n  /**\r\n   * Mark mouse hold state as set\r\n   */\r\n  setMouseHold(value: boolean) {\r\n    if (this.options.syncInstanceInputs) {\r\n      this.dispatch((instance: SimpleKeyboard) => {\r\n        instance.isMouseHold = value;\r\n      });\r\n    } else {\r\n      this.isMouseHold = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mousedown\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonMouseDown(button: string, e: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseDownDefault) e.preventDefault();\r\n      if (this.options.stopMouseDownPropagation) e.stopPropagation();\r\n\r\n      /**\r\n       * Add active class\r\n       */\r\n      e.target.classList.add(this.activeButtonClass);\r\n    }\r\n\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n    if (this.holdTimeout) clearTimeout(this.holdTimeout);\r\n\r\n    /**\r\n     * @type {boolean} Whether the mouse is being held onKeyPress\r\n     */\r\n    this.setMouseHold(true);\r\n\r\n    /**\r\n     * @type {object} Time to wait until a key hold is detected\r\n     */\r\n    if (!this.options.disableButtonHold) {\r\n      this.holdTimeout = window.setTimeout(() => {\r\n        if (\r\n          (this.getMouseHold() &&\r\n            // TODO: This needs to be configurable through options\r\n            ((!button.includes(\"{\") && !button.includes(\"}\")) ||\r\n              button === \"{delete}\" ||\r\n              button === \"{backspace}\" ||\r\n              button === \"{bksp}\" ||\r\n              button === \"{space}\" ||\r\n              button === \"{tab}\")) ||\r\n          button === \"{arrowright}\" ||\r\n          button === \"{arrowleft}\" ||\r\n          button === \"{arrowup}\" ||\r\n          button === \"{arrowdown}\"\r\n        ) {\r\n          if (this.options.debug) console.log(\"Button held:\", button);\r\n\r\n          this.handleButtonHold(button);\r\n        }\r\n        clearTimeout(this.holdTimeout);\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mouseup\r\n   */\r\n  handleButtonMouseUp(button?: string, e?: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseUpDefault && e.preventDefault) e.preventDefault();\r\n      if (this.options.stopMouseUpPropagation && e.stopPropagation) e.stopPropagation();\r\n\r\n      /* istanbul ignore next */\r\n      const isKeyboard =\r\n        e.target === this.keyboardDOM ||\r\n        (e.target && this.keyboardDOM.contains(e.target)) ||\r\n        (this.candidateBox &&\r\n          this.candidateBox.candidateBoxElement &&\r\n          (e.target === this.candidateBox.candidateBoxElement ||\r\n            (e.target && this.candidateBox.candidateBoxElement.contains(e.target))));\r\n\r\n      /**\r\n       * On click outside, remove candidateBox\r\n       */\r\n      if (!isKeyboard && this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Remove active class\r\n     */\r\n    this.recurseButtons((buttonElement: Element) => {\r\n      buttonElement.classList.remove(this.activeButtonClass);\r\n    });\r\n\r\n    this.setMouseHold(false);\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * Calling onKeyReleased\r\n     */\r\n    if (button && typeof this.options.onKeyReleased === \"function\") this.options.onKeyReleased(button, e);\r\n  }\r\n\r\n  /**\r\n   * Handles container mousedown\r\n   */\r\n  handleKeyboardContainerMouseDown(e: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Handle event options\r\n     */\r\n    if (this.options.preventMouseDownDefault) e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Handles button hold\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonHold(button: string): void {\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * @type {object} Timeout dictating the speed of key hold iterations\r\n     */\r\n    this.holdInteractionTimeout = window.setTimeout(() => {\r\n      if (this.getMouseHold()) {\r\n        this.handleButtonClicked(button);\r\n        this.handleButtonHold(button);\r\n      } else {\r\n        clearTimeout(this.holdInteractionTimeout);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances (if you have several instances).\r\n   */\r\n  syncInstanceInputs(): void {\r\n    this.dispatch((instance: SimpleKeyboard) => {\r\n      instance.replaceInput(this.input);\r\n      instance.setCaretPosition(this.caretPosition, this.caretPositionEnd);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the keyboard’s input.\r\n   * @param {string} [inputName] optional - the internal input to select\r\n   */\r\n  clearInput(inputName: string = this.options.inputName || this.defaultName): void {\r\n    this.input[inputName] = \"\";\r\n\r\n    /**\r\n     * Reset caretPosition\r\n     */\r\n    this.setCaretPosition(0);\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Get the keyboard’s input (You can also get it from the onChange prop).\r\n   * @param  {string} [inputName] optional - the internal input to select\r\n   */\r\n  getInput(inputName: string = this.options.inputName || this.defaultName, skipSync = false): string {\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs && !skipSync) this.syncInstanceInputs();\r\n\r\n    if (this.options.rtl) {\r\n      // Remove existing control chars\r\n      const inputWithoutRTLControl = this.input[inputName].replace(\"\\u202B\", \"\").replace(\"\\u202C\", \"\");\r\n\r\n      return \"\\u202B\" + inputWithoutRTLControl + \"\\u202C\";\r\n    } else {\r\n      return this.input[inputName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all simple-keyboard inputs\r\n   */\r\n  getAllInputs(): KeyboardInput {\r\n    const output = {} as KeyboardInput;\r\n    const inputNames = Object.keys(this.input);\r\n\r\n    inputNames.forEach((inputName) => {\r\n      output[inputName] = this.getInput(inputName, true);\r\n    });\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Set the keyboard’s input.\r\n   * @param  {string} input the input value\r\n   * @param  {string} inputName optional - the internal input to select\r\n   */\r\n  setInput(input: string, inputName: string = this.options.inputName || this.defaultName, skipSync?: boolean): void {\r\n    this.input[inputName] = input;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (!skipSync && this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Replace the input object (`keyboard.input`)\r\n   * @param  {object} inputObj The input object\r\n   */\r\n  replaceInput(inputObj: KeyboardInput): void {\r\n    this.input = inputObj;\r\n  }\r\n\r\n  /**\r\n   * Set new option or modify existing ones after initialization.\r\n   * @param  {object} options The options to set\r\n   */\r\n  setOptions(options = {}): void {\r\n    const changedOptions = this.changedOptions(options);\r\n    this.options = Object.assign(this.options, options);\r\n\r\n    if (changedOptions.length) {\r\n      if (this.options.debug) {\r\n        console.log(\"changedOptions\", changedOptions);\r\n      }\r\n\r\n      /**\r\n       * Some option changes require adjustments before re-render\r\n       */\r\n      this.onSetOptions(changedOptions);\r\n\r\n      /**\r\n       * Rendering\r\n       */\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detecting changes to non-function options\r\n   * This allows us to ascertain whether a button re-render is needed\r\n   */\r\n  changedOptions(newOptions: Partial<KeyboardOptions>): string[] {\r\n    return Object.keys(newOptions).filter(\r\n      (optionName) => JSON.stringify(newOptions[optionName]) !== JSON.stringify(this.options[optionName])\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Executing actions depending on changed options\r\n   * @param  {object} options The options to set\r\n   */\r\n  onSetOptions(changedOptions: string[] = []): void {\r\n    /**\r\n     * Changed: layoutName\r\n     */\r\n    if (changedOptions.includes(\"layoutName\")) {\r\n      /**\r\n       * Reset candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Changed: layoutCandidatesPageSize, layoutCandidates\r\n     */\r\n    if (changedOptions.includes(\"layoutCandidatesPageSize\") || changedOptions.includes(\"layoutCandidates\")) {\r\n      /**\r\n       * Reset and recreate candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n        this.candidateBox = new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all keyboard rows and reset keyboard values.\r\n   * Used internally between re-renders.\r\n   */\r\n  resetRows(): void {\r\n    if (this.keyboardRowsDOM) {\r\n      this.keyboardRowsDOM.remove();\r\n    }\r\n\r\n    this.keyboardDOM.className = this.keyboardDOMClass;\r\n    this.keyboardDOM.setAttribute(\"data-skInstance\", this.currentInstanceName);\r\n    this.buttonElements = {};\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\r\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\r\n   */\r\n  // eslint-disable-next-line no-unused-vars\r\n  dispatch(callback: (instance: SimpleKeyboard, key?: string) => void): void {\r\n    if (!(window as SKWindow)[\"SimpleKeyboardInstances\"]) {\r\n      console.warn(`SimpleKeyboardInstances is not defined. Dispatch cannot be called.`);\r\n      throw new Error(\"INSTANCES_VAR_ERROR\");\r\n    }\r\n\r\n    return Object.keys((window as SKWindow)[\"SimpleKeyboardInstances\"]).forEach((key) => {\r\n      callback((window as SKWindow)[\"SimpleKeyboardInstances\"][key], key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  addButtonTheme(buttons: string, className: string): void {\r\n    if (!className || !buttons) return;\r\n\r\n    buttons.split(\" \").forEach((button) => {\r\n      className.split(\" \").forEach((classNameItem) => {\r\n        if (!this.options.buttonTheme) this.options.buttonTheme = [];\r\n\r\n        let classNameFound = false;\r\n\r\n        /**\r\n         * If class is already defined, we add button to class definition\r\n         */\r\n        this.options.buttonTheme.map((buttonTheme) => {\r\n          if (buttonTheme?.class.split(\" \").includes(classNameItem)) {\r\n            classNameFound = true;\r\n\r\n            const buttonThemeArray = buttonTheme.buttons.split(\" \");\r\n            if (!buttonThemeArray.includes(button)) {\r\n              classNameFound = true;\r\n              buttonThemeArray.push(button);\r\n              buttonTheme.buttons = buttonThemeArray.join(\" \");\r\n            }\r\n          }\r\n          return buttonTheme;\r\n        });\r\n\r\n        /**\r\n         * If class is not defined, we create a new entry\r\n         */\r\n        if (!classNameFound) {\r\n          this.options.buttonTheme.push({\r\n            class: classNameItem,\r\n            buttons: buttons,\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  removeButtonTheme(buttons: string, className: string): void {\r\n    /**\r\n     * When called with empty parameters, remove all button themes\r\n     */\r\n    if (!buttons && !className) {\r\n      this.options.buttonTheme = [];\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * If buttons are passed and buttonTheme has items\r\n     */\r\n    if (buttons && Array.isArray(this.options.buttonTheme) && this.options.buttonTheme.length) {\r\n      const buttonArray = buttons.split(\" \");\r\n      buttonArray.forEach((button) => {\r\n        this.options?.buttonTheme?.map((buttonTheme, index) => {\r\n          /**\r\n           * If className is set, we affect the buttons only for that class\r\n           * Otherwise, we afect all classes\r\n           */\r\n          if ((buttonTheme && className && className.includes(buttonTheme.class)) || !className) {\r\n            const filteredButtonArray = buttonTheme?.buttons.split(\" \").filter((item) => item !== button);\r\n\r\n            /**\r\n             * If buttons left, return them, otherwise, remove button Theme\r\n             */\r\n            if (buttonTheme && filteredButtonArray?.length) {\r\n              buttonTheme.buttons = filteredButtonArray.join(\" \");\r\n            } else {\r\n              this.options.buttonTheme?.splice(index, 1);\r\n              buttonTheme = null;\r\n            }\r\n          }\r\n\r\n          return buttonTheme;\r\n        });\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\r\n   * @param  {string} button The button layout name to select\r\n   */\r\n  getButtonElement(button: string): KeyboardElement | KeyboardElement[] | undefined {\r\n    let output;\r\n\r\n    const buttonArr = this.buttonElements[button];\r\n    if (buttonArr) {\r\n      if (buttonArr.length > 1) {\r\n        output = buttonArr;\r\n      } else {\r\n        output = buttonArr[0];\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * This handles the \"inputPattern\" option\r\n   * by checking if the provided inputPattern passes\r\n   */\r\n  inputPatternIsValid(inputVal: string): boolean {\r\n    const inputPatternRaw = this.options.inputPattern;\r\n    let inputPattern;\r\n\r\n    /**\r\n     * Check if input pattern is global or targeted to individual inputs\r\n     */\r\n    if (inputPatternRaw instanceof RegExp) {\r\n      inputPattern = inputPatternRaw;\r\n    } else {\r\n      inputPattern = inputPatternRaw[this.options.inputName || this.defaultName];\r\n    }\r\n\r\n    if (inputPattern && inputVal) {\r\n      const didInputMatch = inputPattern.test(inputVal);\r\n\r\n      if (this.options.debug) {\r\n        console.log(`inputPattern (\"${inputPattern}\"): ${didInputMatch ? \"passed\" : \"did not pass!\"}`);\r\n      }\r\n\r\n      return didInputMatch;\r\n    } else {\r\n      /**\r\n       * inputPattern doesn't seem to be set for the current input, or input is empty. Pass.\r\n       */\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the removal of event listers before initializing new ones\r\n   * This is useful when changing options that require a fresh set of event listeners\r\n   */\r\n  handleKeyDownBound!: (event: KeyboardEvent) => void;\r\n  handleKeyUpBound!: (event: KeyboardEvent) => void;\r\n  handleMouseDownBound!: (event: MouseEvent) => void;\r\n  handleMouseUpBound!: (event: MouseEvent) => void;\r\n  handleTouchEndBound!: (event: TouchEvent) => void;\r\n  handleSelectBound!: (event: Event) => void;\r\n  handleSelectionChangeBound!: (event: Event) => void;\r\n\r\n  removeEventListeners(): void {\r\n    console.log(\"Removing event listeners...\");\r\n\r\n    document.removeEventListener(\"keydown\", this.handleKeyDownBound);\r\n    document.removeEventListener(\"keyup\", this.handleKeyUpBound);\r\n    document.removeEventListener(\"mouseup\", this.handleMouseUpBound);\r\n    document.removeEventListener(\"touchend\", this.handleTouchEndBound);\r\n    document.removeEventListener(\"select\", this.handleSelectBound);\r\n\r\n    if (this.options.updateCaretOnSelectionChange) {\r\n      document.removeEventListener(\"selectionchange\", this.handleSelectionChangeBound);\r\n    }\r\n\r\n    this.listenersAdded = false; // Allow re-adding if necessary\r\n  }\r\n  /**\r\n   * Handles simple-keyboard event listeners\r\n   */\r\n  setEventListeners(): void {\r\n    /**\r\n     * Only first instance should set the event listeners\r\n     */\r\n    if (this.isFirstKeyboardInstance || !this.allKeyboardInstances) {\r\n      if (this.options.debug) {\r\n        console.log(`Caret handling started (${this.keyboardDOMClass})`);\r\n      }\r\n\r\n      const { physicalKeyboardHighlightPreventDefault = false } = this.options;\r\n\r\n      // LPJr: Prevent duplicate listeners\r\n      if (this.listenersAdded) {\r\n        console.log(\"Event listeners already set. Skipping...\");\r\n        return;\r\n      }\r\n\r\n      // Ensure existing listeners are removed before adding new ones\r\n      this.removeEventListeners();\r\n\r\n      // LPJr: moved event listeners to the keyboardDOM element from the document\r\n      this.keyboardDOM.tabIndex = 0;\r\n      this.keyboardDOM.style.outline = \"none\";\r\n\r\n      // LPJr: added named event handlers instead of anonymous functions\r\n      this.handleKeyDownBound = this.handleKeyDown.bind(this);\r\n      this.handleKeyUpBound = this.handleKeyUp.bind(this);\r\n      this.handleMouseUpBound = this.handleMouseUp.bind(this);\r\n      this.handleTouchEndBound = () => this.handleTouchEnd(this);\r\n      this.handleSelectBound = () => this.handleSelect(this);\r\n      this.handleSelectionChangeBound = this.handleSelectionChange.bind(this);\r\n\r\n      document.addEventListener(\"keydown\", this.handleKeyDownBound, physicalKeyboardHighlightPreventDefault);\r\n      document.addEventListener(\"keyup\", this.handleKeyUpBound, physicalKeyboardHighlightPreventDefault);\r\n      document.addEventListener(\"mouseup\", this.handleMouseUpBound);\r\n      document.addEventListener(\"touchend\", this.handleTouchEndBound);\r\n\r\n      if (this.options.updateCaretOnSelectionChange) {\r\n        document.addEventListener(\"selectionchange\", this.handleSelectionChangeBound);\r\n      }\r\n\r\n      document.addEventListener(\"select\", this.handleSelectBound);\r\n\r\n      // Mark listeners as added to prevent duplicates\r\n      this.listenersAdded = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyUp\r\n   */\r\n  handleKeyUp(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyUp(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyDown\r\n   */\r\n  handleKeyDown(event: KeyboardHandlerEvent): void {\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyDown(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: MouseUp\r\n   */\r\n  handleMouseUp(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: TouchEnd\r\n   */\r\n  /* istanbul ignore next */\r\n  handleTouchEnd(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: Select\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelect(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: SelectionChange\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelectionChange(event: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Firefox is not reporting the correct caret position through this event\r\n     * https://github.com/hodgef/simple-keyboard/issues/1839\r\n     */\r\n    if (navigator.userAgent.includes(\"Firefox\")) {\r\n      return;\r\n    }\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Called by {@link setEventListeners} when an event that warrants a cursor position update is triggered\r\n   */\r\n  caretEventHandler(event: KeyboardHandlerEvent): void {\r\n    let targetTagName: string;\r\n    if (event.target.tagName) {\r\n      targetTagName = event.target.tagName.toLowerCase();\r\n    }\r\n\r\n    this.dispatch((instance) => {\r\n      let isKeyboard =\r\n        event.target === instance.keyboardDOM || (event.target && instance.keyboardDOM.contains(event.target));\r\n\r\n      /**\r\n       * If syncInstanceInputs option is enabled, make isKeyboard match any instance\r\n       * not just the current one\r\n       */\r\n      if (this.options.syncInstanceInputs && Array.isArray(event.path)) {\r\n        isKeyboard = event.path.some((item: HTMLElement) => item?.hasAttribute?.(\"data-skInstance\"));\r\n      }\r\n\r\n      if (\r\n        (targetTagName === \"textarea\" ||\r\n          (targetTagName === \"input\" && [\"text\", \"search\", \"url\", \"tel\", \"password\"].includes(event.target.type))) &&\r\n        !instance.options.disableCaretPositioning\r\n      ) {\r\n        /**\r\n         * Tracks current cursor position\r\n         * As keys are pressed, text will be added/removed at that position within the input.\r\n         */\r\n        let selectionStart = event.target.selectionStart;\r\n        let selectionEnd = event.target.selectionEnd;\r\n\r\n        if (instance.options.rtl) {\r\n          selectionStart = instance.utilities.getRtlOffset(selectionStart, instance.getInput());\r\n          selectionEnd = instance.utilities.getRtlOffset(selectionEnd, instance.getInput());\r\n        }\r\n\r\n        instance.setCaretPosition(selectionStart, selectionEnd);\r\n\r\n        /**\r\n         * Tracking current input in order to handle caret positioning edge cases\r\n         */\r\n        instance.activeInputElement = event.target;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(\r\n            \"Caret at: \",\r\n            instance.getCaretPosition(),\r\n            instance.getCaretPositionEnd(),\r\n            event && event.target.tagName.toLowerCase(),\r\n            `(${instance.keyboardDOMClass})`,\r\n            event?.type\r\n          );\r\n        }\r\n      } else if ((instance.options.disableCaretPositioning || !isKeyboard) && event?.type !== \"selectionchange\") {\r\n        /**\r\n         * If we toggled off disableCaretPositioning, we must ensure caretPosition doesn't persist once reactivated.\r\n         */\r\n        instance.setCaretPosition(null);\r\n\r\n        /**\r\n         * Resetting activeInputElement\r\n         */\r\n        instance.activeInputElement = null;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(`Caret position reset due to \"${event?.type}\" event`, event);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute an operation on each button\r\n   */\r\n  recurseButtons(fn: any): void {\r\n    if (!fn) return;\r\n\r\n    Object.keys(this.buttonElements).forEach((buttonName) => this.buttonElements[buttonName].forEach(fn));\r\n  }\r\n\r\n  /**\r\n   * Destroy keyboard listeners and DOM elements\r\n   */\r\n  destroy(): void {\r\n    if (this.options.debug) console.log(`Destroying simple-keyboard instance: ${this.currentInstanceName}`);\r\n\r\n    const { physicalKeyboardHighlightPreventDefault = false } = this.options;\r\n\r\n    /**\r\n     * Remove document listeners\r\n     */\r\n    document.removeEventListener(\"keyup\", this.handleKeyUpBound);\r\n    document.removeEventListener(\"keydown\", this.handleKeyDownBound);\r\n    document.removeEventListener(\"mouseup\", this.handleMouseUpBound);\r\n    document.removeEventListener(\"touchend\", this.handleTouchEndBound);\r\n    document.removeEventListener(\"select\", this.handleSelectBound);\r\n\r\n    // selectionchange is causing caret update issues on Chrome\r\n    // https://github.com/hodgef/simple-keyboard/issues/2346\r\n    if (this.options.updateCaretOnSelectionChange) {\r\n      document.removeEventListener(\"selectionchange\", this.handleSelectionChangeBound);\r\n    }\r\n\r\n    document.onpointerup = null;\r\n    document.ontouchend = null;\r\n    document.ontouchcancel = null;\r\n    document.onmouseup = null;\r\n\r\n    /**\r\n     * Remove buttons\r\n     */\r\n    const deleteButton = (buttonElement: KeyboardElement | null) => {\r\n      if (buttonElement) {\r\n        buttonElement.onpointerdown = null;\r\n        buttonElement.onpointerup = null;\r\n        buttonElement.onpointercancel = null;\r\n        buttonElement.ontouchstart = null;\r\n        buttonElement.ontouchend = null;\r\n        buttonElement.ontouchcancel = null;\r\n        buttonElement.onclick = null;\r\n        buttonElement.onmousedown = null;\r\n        buttonElement.onmouseup = null;\r\n\r\n        buttonElement.remove();\r\n        buttonElement = null;\r\n      }\r\n    };\r\n\r\n    this.recurseButtons(deleteButton);\r\n\r\n    /**\r\n     * Remove wrapper events\r\n     */\r\n    this.keyboardDOM.onpointerdown = null;\r\n    this.keyboardDOM.ontouchstart = null;\r\n    this.keyboardDOM.onmousedown = null;\r\n\r\n    /**\r\n     * Clearing keyboard rows\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Candidate box\r\n     */\r\n    if (this.candidateBox) {\r\n      this.candidateBox.destroy();\r\n      this.candidateBox = null;\r\n    }\r\n\r\n    /**\r\n     * Clearing activeInputElement\r\n     */\r\n    this.activeInputElement = null;\r\n\r\n    /**\r\n     * Removing instance attribute\r\n     */\r\n    this.keyboardDOM.removeAttribute(\"data-skInstance\");\r\n\r\n    /**\r\n     * Clearing keyboardDOM\r\n     */\r\n    this.keyboardDOM.innerHTML = \"\";\r\n\r\n    /**\r\n     * Remove instance\r\n     */\r\n    (window as SKWindow)[\"SimpleKeyboardInstances\"][this.currentInstanceName] = null;\r\n    delete (window as SKWindow)[\"SimpleKeyboardInstances\"][this.currentInstanceName];\r\n\r\n    /**\r\n     * Reset initialized flag\r\n     */\r\n    this.initialized = false;\r\n  }\r\n\r\n  /**\r\n   * Process buttonTheme option\r\n   */\r\n  getButtonThemeClasses(button: string): string[] {\r\n    const buttonTheme = this.options.buttonTheme;\r\n    let buttonClasses: string[] = [];\r\n\r\n    if (Array.isArray(buttonTheme)) {\r\n      buttonTheme.forEach((themeObj) => {\r\n        if (\r\n          themeObj &&\r\n          themeObj.class &&\r\n          typeof themeObj.class === \"string\" &&\r\n          themeObj.buttons &&\r\n          typeof themeObj.buttons === \"string\"\r\n        ) {\r\n          const themeObjClasses = themeObj.class.split(\" \");\r\n          const themeObjButtons = themeObj.buttons.split(\" \");\r\n\r\n          if (themeObjButtons.includes(button)) {\r\n            buttonClasses = [...buttonClasses, ...themeObjClasses];\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonTheme\". Please check the documentation.`, themeObj);\r\n        }\r\n      });\r\n    }\r\n\r\n    return buttonClasses;\r\n  }\r\n\r\n  /**\r\n   * Process buttonAttributes option\r\n   */\r\n  setDOMButtonAttributes(button: string, callback: any): void {\r\n    const buttonAttributes = this.options.buttonAttributes;\r\n\r\n    if (Array.isArray(buttonAttributes)) {\r\n      buttonAttributes.forEach((attrObj) => {\r\n        if (\r\n          attrObj.attribute &&\r\n          typeof attrObj.attribute === \"string\" &&\r\n          attrObj.value &&\r\n          typeof attrObj.value === \"string\" &&\r\n          attrObj.buttons &&\r\n          typeof attrObj.buttons === \"string\"\r\n        ) {\r\n          const attrObjButtons = attrObj.buttons.split(\" \");\r\n\r\n          if (attrObjButtons.includes(button)) {\r\n            callback(attrObj.attribute, attrObj.value);\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonAttributes\". Please check the documentation.`, attrObj);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onTouchDeviceDetected() {\r\n    /**\r\n     * Processing autoTouchEvents\r\n     */\r\n    this.processAutoTouchEvents();\r\n\r\n    /**\r\n     * Disabling contextual window on touch devices\r\n     */\r\n    this.disableContextualWindow();\r\n  }\r\n\r\n  /**\r\n   * Disabling contextual window for hg-button\r\n   */\r\n  /* istanbul ignore next */\r\n  disableContextualWindow() {\r\n    window.oncontextmenu = (event: KeyboardHandlerEvent) => {\r\n      if (event.target.classList.contains(\"hg-button\")) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process autoTouchEvents option\r\n   */\r\n  processAutoTouchEvents() {\r\n    if (this.options.autoUseTouchEvents) {\r\n      this.options.useTouchEvents = true;\r\n\r\n      if (this.options.debug) {\r\n        console.log(`autoUseTouchEvents: Touch device detected, useTouchEvents enabled.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n   */\r\n  onInit() {\r\n    if (this.options.debug) {\r\n      console.log(`${this.keyboardDOMClass} Initialized`);\r\n    }\r\n\r\n    /**\r\n     * setEventListeners\r\n     */\r\n    this.setEventListeners();\r\n\r\n    if (typeof this.options.onInit === \"function\") this.options.onInit(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeFirstRender() {\r\n    /**\r\n     * Performing actions when touch device detected\r\n     */\r\n    if (this.utilities.isTouchDevice()) {\r\n      this.onTouchDeviceDetected();\r\n    }\r\n\r\n    if (typeof this.options.beforeFirstRender === \"function\") this.options.beforeFirstRender(this);\r\n\r\n    /**\r\n     * Notify about PointerEvents usage\r\n     */\r\n    if (\r\n      this.isFirstKeyboardInstance &&\r\n      this.utilities.pointerEventsSupported() &&\r\n      !this.options.useTouchEvents &&\r\n      !this.options.useMouseEvents\r\n    ) {\r\n      if (this.options.debug) {\r\n        console.log(\"Using PointerEvents as it is supported by this browser\");\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Notify about touch events usage\r\n     */\r\n    if (this.options.useTouchEvents) {\r\n      if (this.options.debug) {\r\n        console.log(\"useTouchEvents has been enabled. Only touch events will be used.\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeRender() {\r\n    if (typeof this.options.beforeRender === \"function\") this.options.beforeRender(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n   */\r\n  onRender() {\r\n    if (typeof this.options.onRender === \"function\") this.options.onRender(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once all modules have been loaded\r\n   */\r\n  onModulesLoaded() {\r\n    if (typeof this.options.onModulesLoaded === \"function\") this.options.onModulesLoaded(this);\r\n  }\r\n\r\n  /**\r\n   * Register module\r\n   */\r\n  registerModule = (name: string, initCallback: any) => {\r\n    if (!this.modules[name]) this.modules[name] = {};\r\n\r\n    initCallback(this.modules[name]);\r\n  };\r\n\r\n  /**\r\n   * Load modules\r\n   */\r\n  loadModules() {\r\n    if (Array.isArray(this.options.modules)) {\r\n      this.options.modules.forEach((KeyboardModule) => {\r\n        const keyboardModule = new KeyboardModule(this);\r\n        keyboardModule.init && keyboardModule.init(this);\r\n      });\r\n\r\n      this.keyboardPluginClasses = \"modules-loaded\";\r\n\r\n      this.render();\r\n      this.onModulesLoaded();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get module prop\r\n   */\r\n  getModuleProp(name: string, prop: string) {\r\n    if (!this.modules[name]) return false;\r\n\r\n    return this.modules[name][prop];\r\n  }\r\n\r\n  /**\r\n   * getModulesList\r\n   */\r\n  getModulesList() {\r\n    return Object.keys(this.modules);\r\n  }\r\n\r\n  /**\r\n   * Parse Row DOM containers\r\n   */\r\n  parseRowDOMContainers(\r\n    rowDOM: HTMLDivElement,\r\n    rowIndex: number,\r\n    containerStartIndexes: number[],\r\n    containerEndIndexes: number[]\r\n  ) {\r\n    const rowDOMArray = Array.from(rowDOM.children);\r\n    let removedElements = 0;\r\n\r\n    if (rowDOMArray.length) {\r\n      containerStartIndexes.forEach((startIndex, arrIndex) => {\r\n        const endIndex = containerEndIndexes[arrIndex];\r\n\r\n        /**\r\n         * If there exists a respective end index\r\n         * if end index comes after start index\r\n         */\r\n        if (!endIndex || !(endIndex > startIndex)) {\r\n          return false;\r\n        }\r\n\r\n        /**\r\n         * Updated startIndex, endIndex\r\n         * This is since the removal of buttons to place a single button container\r\n         * results in a modified array size\r\n         */\r\n        const updated_startIndex = startIndex - removedElements;\r\n        const updated_endIndex = endIndex - removedElements;\r\n\r\n        /**\r\n         * Create button container\r\n         */\r\n        const containerDOM = document.createElement(\"div\");\r\n        containerDOM.className += \"hg-button-container\";\r\n        const containerUID = `${this.options.layoutName}-r${rowIndex}c${arrIndex}`;\r\n        containerDOM.setAttribute(\"data-skUID\", containerUID);\r\n\r\n        /**\r\n         * Taking elements due to be inserted into container\r\n         */\r\n        const containedElements = rowDOMArray.splice(updated_startIndex, updated_endIndex - updated_startIndex + 1);\r\n        removedElements += updated_endIndex - updated_startIndex;\r\n\r\n        /**\r\n         * Inserting elements to container\r\n         */\r\n        containedElements.forEach((element) => containerDOM.appendChild(element));\r\n\r\n        /**\r\n         * Adding container at correct position within rowDOMArray\r\n         */\r\n        rowDOMArray.splice(updated_startIndex, 0, containerDOM);\r\n\r\n        /**\r\n         * Clearing old rowDOM children structure\r\n         */\r\n        rowDOM.innerHTML = \"\";\r\n\r\n        /**\r\n         * Appending rowDOM new children list\r\n         */\r\n        rowDOMArray.forEach((element) => rowDOM.appendChild(element));\r\n\r\n        if (this.options.debug) {\r\n          console.log(\"rowDOMContainer\", containedElements, updated_startIndex, updated_endIndex, removedElements + 1);\r\n        }\r\n      });\r\n    }\r\n\r\n    return rowDOM;\r\n  }\r\n\r\n  /**\r\n   * getKeyboardClassString\r\n   */\r\n  getKeyboardClassString = (...baseDOMClasses: any[]) => {\r\n    const keyboardClasses = [this.keyboardDOMClass, ...baseDOMClasses].filter((DOMClass) => !!DOMClass);\r\n\r\n    return keyboardClasses.join(\" \");\r\n  };\r\n\r\n  /**\r\n   * Renders rows and buttons as per options\r\n   */\r\n  render() {\r\n    /**\r\n     * Clear keyboard\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Calling beforeFirstRender\r\n     */\r\n    if (!this.initialized) {\r\n      this.beforeFirstRender();\r\n    }\r\n\r\n    /**\r\n     * Calling beforeRender\r\n     */\r\n    this.beforeRender();\r\n\r\n    const layoutClass = `hg-layout-${this.options.layoutName}`;\r\n    const layout = this.options.layout || getDefaultLayout();\r\n    const useTouchEvents = this.options.useTouchEvents || false;\r\n    const useTouchEventsClass = useTouchEvents ? \"hg-touch-events\" : \"\";\r\n    const useMouseEvents = this.options.useMouseEvents || false;\r\n    const disableRowButtonContainers = this.options.disableRowButtonContainers;\r\n\r\n    /**\r\n     * Adding themeClass, layoutClass to keyboardDOM\r\n     */\r\n    this.keyboardDOM.className = this.getKeyboardClassString(\r\n      this.options.theme,\r\n      layoutClass,\r\n      this.keyboardPluginClasses,\r\n      useTouchEventsClass\r\n    );\r\n\r\n    /**\r\n     * Adding keyboard identifier\r\n     */\r\n    this.keyboardDOM.setAttribute(\"data-skInstance\", this.currentInstanceName);\r\n\r\n    /**\r\n     * Create row wrapper\r\n     */\r\n    this.keyboardRowsDOM = document.createElement(\"div\");\r\n    this.keyboardRowsDOM.className = \"hg-rows\";\r\n\r\n    /**\r\n     * Iterating through each row\r\n     */\r\n    layout[this.options.layoutName || this.defaultName].forEach((row: string, rIndex: number) => {\r\n      let rowArray = row.split(\" \");\r\n\r\n      /**\r\n       * Enforce excludeFromLayout\r\n       */\r\n      if (\r\n        this.options.excludeFromLayout &&\r\n        this.options.excludeFromLayout[this.options.layoutName || this.defaultName]\r\n      ) {\r\n        rowArray = rowArray.filter(\r\n          (buttonName) =>\r\n            this.options.excludeFromLayout &&\r\n            !this.options.excludeFromLayout[this.options.layoutName || this.defaultName].includes(buttonName)\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Creating empty row\r\n       */\r\n      let rowDOM = document.createElement(\"div\");\r\n      rowDOM.className += \"hg-row\";\r\n\r\n      /**\r\n       * Tracking container indicators in rows\r\n       */\r\n      const containerStartIndexes: number[] = [];\r\n      const containerEndIndexes: number[] = [];\r\n\r\n      /**\r\n       * Iterating through each button in row\r\n       */\r\n      rowArray.forEach((button, bIndex) => {\r\n        /**\r\n         * Check if button has a container indicator\r\n         */\r\n        const buttonHasContainerStart =\r\n          !disableRowButtonContainers && typeof button === \"string\" && button.length > 1 && button.indexOf(\"[\") === 0;\r\n\r\n        const buttonHasContainerEnd =\r\n          !disableRowButtonContainers &&\r\n          typeof button === \"string\" &&\r\n          button.length > 1 &&\r\n          button.indexOf(\"]\") === button.length - 1;\r\n\r\n        /**\r\n         * Save container start index, if applicable\r\n         */\r\n        if (buttonHasContainerStart) {\r\n          containerStartIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\[/g, \"\");\r\n        }\r\n\r\n        if (buttonHasContainerEnd) {\r\n          containerEndIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\]/g, \"\");\r\n        }\r\n\r\n        /**\r\n         * Processing button options\r\n         */\r\n        const fctBtnClass = this.utilities.getButtonClass(button);\r\n        const buttonDisplayName = this.utilities.getButtonDisplayName(\r\n          button,\r\n          this.options.display,\r\n          this.options.mergeDisplay\r\n        );\r\n\r\n        /**\r\n         * Creating button\r\n         */\r\n        const buttonType = this.options.useButtonTag ? \"button\" : \"div\";\r\n        const buttonDOM = document.createElement(buttonType);\r\n        buttonDOM.className += `hg-button ${fctBtnClass}`;\r\n\r\n        /**\r\n         * Adding buttonTheme\r\n         */\r\n        buttonDOM.classList.add(...this.getButtonThemeClasses(button));\r\n\r\n        /**\r\n         * Adding buttonAttributes\r\n         */\r\n        this.setDOMButtonAttributes(button, (attribute: string, value: string) => {\r\n          buttonDOM.setAttribute(attribute, value);\r\n        });\r\n\r\n        this.activeButtonClass = \"hg-activeButton\";\r\n\r\n        /**\r\n         * Handle button click event\r\n         */\r\n        /* istanbul ignore next */\r\n        if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n          /**\r\n           * Handle PointerEvents\r\n           */\r\n          buttonDOM.onpointerdown = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonClicked(button, e);\r\n            this.handleButtonMouseDown(button, e);\r\n          };\r\n          buttonDOM.onpointerup = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n          buttonDOM.onpointercancel = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n        } else {\r\n          /**\r\n           * Fallback for browsers not supporting PointerEvents\r\n           */\r\n          if (useTouchEvents) {\r\n            /**\r\n             * Handle touch events\r\n             */\r\n            buttonDOM.ontouchstart = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonClicked(button, e);\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.ontouchend = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n            buttonDOM.ontouchcancel = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          } else {\r\n            /**\r\n             * Handle mouse events\r\n             */\r\n            buttonDOM.onclick = (e: KeyboardHandlerEvent) => {\r\n              this.setMouseHold(false);\r\n              /**\r\n               * Fire button handler in onclick for compatibility reasons\r\n               * This fires handler before onKeyReleased, therefore when that option is set we will fire the handler\r\n               * in onmousedown instead\r\n               */\r\n              if (\r\n                typeof this.options.onKeyReleased !== \"function\" &&\r\n                !(this.options.useMouseEvents && this.options.clickOnMouseDown)\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n            };\r\n            buttonDOM.onmousedown = (e: KeyboardHandlerEvent) => {\r\n              /**\r\n               * Fire button handler for onKeyReleased use-case\r\n               */\r\n              if (\r\n                (typeof this.options.onKeyReleased === \"function\" ||\r\n                  (this.options.useMouseEvents && this.options.clickOnMouseDown)) &&\r\n                !this.isMouseHold\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.onmouseup = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          }\r\n        }\r\n\r\n        /**\r\n         * Adding identifier\r\n         */\r\n        buttonDOM.setAttribute(\"data-skBtn\", button);\r\n\r\n        /**\r\n         * Adding unique id\r\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\r\n         */\r\n        const buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\r\n        buttonDOM.setAttribute(\"data-skBtnUID\", buttonUID);\r\n\r\n        /**\r\n         * Adding button label to button\r\n         */\r\n        const buttonSpanDOM = document.createElement(\"span\");\r\n        buttonSpanDOM.innerHTML = buttonDisplayName;\r\n        buttonDOM.appendChild(buttonSpanDOM);\r\n\r\n        /**\r\n         * Adding to buttonElements\r\n         */\r\n        if (!this.buttonElements[button]) this.buttonElements[button] = [];\r\n\r\n        this.buttonElements[button].push(buttonDOM);\r\n\r\n        /**\r\n         * Appending button to row\r\n         */\r\n        rowDOM.appendChild(buttonDOM);\r\n      });\r\n\r\n      /**\r\n       * Parse containers in row\r\n       */\r\n      rowDOM = this.parseRowDOMContainers(rowDOM, rIndex, containerStartIndexes, containerEndIndexes);\r\n\r\n      /**\r\n       * Appending row to hg-rows\r\n       */\r\n      this.keyboardRowsDOM.appendChild(rowDOM);\r\n    });\r\n\r\n    /**\r\n     * Appending row to keyboard\r\n     */\r\n    this.keyboardDOM.appendChild(this.keyboardRowsDOM);\r\n\r\n    /**\r\n     * Calling onRender\r\n     */\r\n    this.onRender();\r\n\r\n    if (!this.initialized) {\r\n      /**\r\n       * Ensures that onInit and beforeFirstRender are only called once per instantiation\r\n       */\r\n      this.initialized = true;\r\n\r\n      /**\r\n       * Handling parent events\r\n       */\r\n      /* istanbul ignore next */\r\n      if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n        document.onpointerup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onpointerdown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (useTouchEvents) {\r\n        /**\r\n         * Handling ontouchend, ontouchcancel\r\n         */\r\n        document.ontouchend = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        document.ontouchcancel = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n\r\n        this.keyboardDOM.ontouchstart = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (!useTouchEvents) {\r\n        /**\r\n         * Handling mouseup\r\n         */\r\n        document.onmouseup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onmousedown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      }\r\n\r\n      /**\r\n       * Calling onInit\r\n       */\r\n      this.onInit();\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboard;\r\n","import SimpleKeyboard from \"./components/Keyboard\";\r\nexport { SimpleKeyboard };\r\nexport default SimpleKeyboard;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"createElement\"]: () => (__WEBPACK_EXTERNAL_MODULE_react__.createElement), [\"useEffect\"]: () => (__WEBPACK_EXTERNAL_MODULE_react__.useEffect), [\"useRef\"]: () => (__WEBPACK_EXTERNAL_MODULE_react__.useRef) });","import { KeyboardReactInterface } from \"../interfaces\";\r\n\r\nexport const parseProps = (props: KeyboardReactInterface[\"options\"]) => ({\r\n  ...props,\r\n  theme: `simple-keyboard ${props.theme || \"hg-theme-default\"}`,\r\n});\r\n\r\nconst cleanProps = (sourceObj: KeyboardReactInterface[\"options\"]) => ({\r\n  ...sourceObj,\r\n  keyboardRef: null,\r\n});\r\n\r\nexport const changedProps = (\r\n  prevProps: KeyboardReactInterface[\"options\"],\r\n  props: KeyboardReactInterface[\"options\"]\r\n) => {\r\n  const cleanedProps = cleanProps(props);\r\n  const cleanedPrevProps = cleanProps(prevProps);\r\n\r\n  return Object.keys(cleanedProps).filter(\r\n    (propName) => cleanedProps[propName] !== cleanedPrevProps[propName]\r\n  );\r\n};\r\n","/* eslint-disable no-unused-vars */\r\nimport * as React from \"react\";\r\nimport { parseProps, changedProps } from \"../services/Utilities\";\r\nimport \"simple-keyboard/build/css/index.css\";\r\nimport { KeyboardReactInterface } from \"../interfaces\";\r\nimport Keyboard from \"simple-keyboard/build/index.modern\";\r\n\r\nconst KeyboardReact = (props: KeyboardReactInterface[\"options\"]) => {\r\n  const cssClass = props.baseClass || \"react-simple-keyboard\";\r\n  const initRef = React.useRef<null | boolean>(null);\r\n  const targetElemRef = React.useRef<null | HTMLDivElement>(null);\r\n  const keyboardRef = React.useRef<null | KeyboardReactInterface>(null);\r\n  const previousProps = React.useRef(props);\r\n\r\n  React.useEffect(() => {\r\n    /**\r\n     * Whenever this component is unmounted, ensure that Keyboard object that\r\n     * it created is destroyed so that it removes any event handlers that it\r\n     * may have installed.\r\n     */\r\n    return () => {\r\n      if (keyboardRef.current) {\r\n        keyboardRef.current.destroy();\r\n      }\r\n      initRef.current = false;\r\n    };\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    const parsedProps = parseProps(props) as any;\r\n\r\n    /**\r\n     * Initialize simple-keyboard\r\n     */\r\n    if (!initRef.current) {\r\n      initRef.current = true;\r\n      parsedProps.debug && console.log(\"ReactSimpleKeyboard: Init\");\r\n      const targetElem = targetElemRef.current as HTMLDivElement;\r\n      const targetClass = `.${cssClass}`;\r\n      keyboardRef.current = new Keyboard(\r\n        targetElem || targetClass,\r\n        parsedProps\r\n      ) as KeyboardReactInterface;\r\n      parsedProps.keyboardRef && parsedProps.keyboardRef(keyboardRef.current);\r\n    }\r\n\r\n    const updatedProps = changedProps(previousProps.current, parsedProps);\r\n\r\n    /**\r\n     * Only trigger render if props changed\r\n     */\r\n    if (updatedProps.length) {\r\n      const keyboard = keyboardRef.current;\r\n      previousProps.current = parsedProps;\r\n      keyboard?.setOptions(parsedProps);\r\n      parsedProps.debug &&\r\n        console.log(\r\n          \"ReactSimpleKeyboard - setOptions called due to updated props:\",\r\n          updatedProps\r\n        );\r\n    }\r\n  }, [initRef, cssClass, previousProps, props]);\r\n\r\n  return <div className={cssClass} ref={targetElemRef} />;\r\n};\r\n\r\nexport default KeyboardReact;\r\n","import KeyboardReact from \"./components/KeyboardModern\";\r\nexport * from \"./interfaces.d\";\r\nexport { KeyboardReact };\r\nexport default KeyboardReact;\r\n"],"names":["e","t","d","n","o","Object","defineProperty","enumerable","get","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","l","getOptions","getCaretPosition","i","getCaretPositionEnd","s","dispatch","length","this","bindMethods","key","includes","getButtonType","replace","concat","arguments","assign","getDefaultDisplay","a","removeAt","apply","removeForwardsAt","addStringAt","tabCharOnTab","newLineOnEnter","Number","isInteger","debug","console","log","updateCaretPosAction","setCaretPosition","slice","join","isMaxLengthReached","updateCaretPos","substring","match","substr","maxLength","inputName","maxLengthReached","Boolean","window","navigator","maxTouchPoints","PointerEvent","toLowerCase","trim","split","reduce","toUpperCase","Array","Math","ceil","map","indexOf","getOwnPropertyNames","done","bind","f","c","g","y","altKey","ctrlKey","shiftKey","code","keyCodeToKey","keyCode","layout","lastLayout","layoutJSON","mapLayoutToEventCodes","extractAndPadLayout","default","shift","shiftActive","capslockActive","getSimpleKeyboardLayoutKey","getButtonElement","u","h","style","background","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","isArray","forEach","physicalKeyboardHighlightPress","physicalKeyboardHighlightPressUsePointerEvents","onpointerdown","physicalKeyboardHighlightPressUseClick","p","click","handleButtonClicked","removeAttribute","onpointerup","ShiftLeft","ShiftRight","ControlLeft","ControlRight","AltLeft","AltRight","MetaLeft","MetaRight","Backspace","CapsLock","Enter","Tab","toString","normal","push","w","utilities","options","k","pageSize","layoutCandidatesPageSize","candidateBoxElement","remove","pageIndex","candidateValue","targetElement","onSelect","chunkArray","renderPage","candidateListPages","nbPages","onItemSelected","destroy","document","createElement","className","useTouchEvents","TouchEvent","MouseEvent","innerHTML","display","ontouchstart","onclick","appendChild","classList","add","prepend","C","A","B","querySelector","HTMLDivElement","warn","Error","keyboardDOMClass","keyboardDOM","caretPosition","caretPositionEnd","modules","filter","handleParams","layoutName","theme","preventMouseDownDefault","enableLayoutCandidates","excludeFromLayout","keyboardPluginClasses","defaultName","input","buttonElements","SimpleKeyboardInstances","currentInstanceName","camelCase","allKeyboardInstances","keyboardInstanceNames","keys","isFirstKeyboardInstance","physicalKeyboard","candidateBox","render","loadModules","layoutCandidates","layoutCandidatesCaseSensitiveMatch","S","RegExp","escapeRegex","P","matchAll","sort","candidateKey","show","disableCandidateNormalization","enableLayoutCandidatesKeyPress","normalize","beforeInputUpdate","getInput","v","setInput","onKeyPress","onChange","onChangeAll","getAllInputs","getUpdatedInput","isStandardButton","activeInputElement","setSelectionRange","inputPattern","inputPatternIsValid","handleMaxLength","type","syncInstanceInputs","target","getInputCandidates","showCandidatesBox","isMouseHold","preventDefault","stopMouseDownPropagation","stopPropagation","activeButtonClass","holdInteractionTimeout","clearTimeout","holdTimeout","setMouseHold","disableButtonHold","setTimeout","getMouseHold","handleButtonHold","preventMouseUpDefault","stopMouseUpPropagation","contains","recurseButtons","onKeyReleased","replaceInput","rtl","changedOptions","onSetOptions","JSON","stringify","keyboardRowsDOM","setAttribute","buttonTheme","buttons","class","splice","test","removeEventListener","handleKeyDownBound","handleKeyUpBound","handleMouseUpBound","handleTouchEndBound","handleSelectBound","updateCaretOnSelectionChange","handleSelectionChangeBound","listenersAdded","physicalKeyboardHighlightPreventDefault","removeEventListeners","tabIndex","outline","handleKeyDown","handleKeyUp","handleMouseUp","handleTouchEnd","handleSelect","handleSelectionChange","addEventListener","caretEventHandler","physicalKeyboardHighlight","handleHighlightKeyUp","handleHighlightKeyDown","userAgent","tagName","path","some","hasAttribute","disableCaretPositioning","selectionStart","selectionEnd","getRtlOffset","ontouchend","ontouchcancel","onmouseup","onpointercancel","onmousedown","resetRows","initialized","buttonAttributes","attribute","processAutoTouchEvents","disableContextualWindow","oncontextmenu","autoUseTouchEvents","setEventListeners","onInit","isTouchDevice","onTouchDeviceDetected","beforeFirstRender","pointerEventsSupported","useMouseEvents","beforeRender","onRender","onModulesLoaded","init","from","children","disableRowButtonContainers","getKeyboardClassString","getButtonClass","getButtonDisplayName","mergeDisplay","useButtonTag","getButtonThemeClasses","setDOMButtonAttributes","handleButtonMouseDown","handleButtonMouseUp","clickOnMouseDown","m","parseRowDOMContainers","handleKeyboardContainerMouseDown","K","L","_typeof","exports","module","define","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","id","loaded","__webpack_modules__","getter","__esModule","definition","obj","prop","nmd","paths","x","__WEBPACK_EXTERNAL_MODULE_react__","cleanProps","sourceObj","_objectSpread","keyboardRef","props","cssClass","baseClass","initRef","React","targetElemRef","previousProps","current","parsedProps","parseProps","targetElem","targetClass","Keyboard","updatedProps","prevProps","cleanedProps","cleanedPrevProps","propName","changedProps","keyboard","setOptions","ref"],"sourceRoot":""}