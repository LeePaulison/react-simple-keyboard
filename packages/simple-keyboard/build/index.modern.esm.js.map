{"version":3,"file":"index.modern.esm.js","mappings":"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","sources":["webpack://simple-keyboard/./src/lib/services/Utilities.ts","webpack://simple-keyboard/./src/lib/services/PhysicalKeyboard.ts","webpack://simple-keyboard/./src/lib/services/KeyboardLayout.ts","webpack://simple-keyboard/./src/lib/components/CandidateBox.ts","webpack://simple-keyboard/./src/lib/components/Keyboard.ts","webpack://simple-keyboard/./src/lib/index.modern.ts"],"sourcesContent":["import { KeyboardInput } from \"./../interfaces\";\r\nimport { KeyboardOptions, UtilitiesParams } from \"../interfaces\";\r\n\r\n/**\r\n * Utility Service\r\n */\r\nclass Utilities {\r\n  getOptions: () => KeyboardOptions;\r\n  getCaretPosition: () => number | null;\r\n  getCaretPositionEnd: () => number | null;\r\n  dispatch: any;\r\n  maxLengthReached!: boolean;\r\n\r\n  /**\r\n   * Creates an instance of the Utility service\r\n   */\r\n  constructor({ getOptions, getCaretPosition, getCaretPositionEnd, dispatch }: UtilitiesParams) {\r\n    this.getOptions = getOptions;\r\n    this.getCaretPosition = getCaretPosition;\r\n    this.getCaretPositionEnd = getCaretPositionEnd;\r\n    this.dispatch = dispatch;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(Utilities, this);\r\n  }\r\n\r\n  /**\r\n   * Retrieve button type\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The button type\r\n   */\r\n  getButtonType(button: string): string {\r\n    return button.includes(\"{\") && button.includes(\"}\") && button !== \"{//}\" ? \"functionBtn\" : \"standardBtn\";\r\n  }\r\n\r\n  /**\r\n   * Adds default classes to a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The classes to be added to the button\r\n   */\r\n  getButtonClass(button: string): string {\r\n    const buttonTypeClass = this.getButtonType(button);\r\n    const buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    let buttonNormalized = \"\";\r\n\r\n    if (buttonTypeClass !== \"standardBtn\") buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\r\n\r\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\r\n  }\r\n\r\n  /**\r\n   * Default button display labels\r\n   */\r\n  getDefaultDisplay() {\r\n    return {\r\n      \"{bksp}\": \"backspace\",\r\n      \"{backspace}\": \"backspace\",\r\n      \"{enter}\": \"< enter\",\r\n      \"{shift}\": \"shift\",\r\n      \"{shiftleft}\": \"shift\",\r\n      \"{shiftright}\": \"shift\",\r\n      \"{alt}\": \"alt\",\r\n      \"{s}\": \"shift\",\r\n      \"{tab}\": \"tab\",\r\n      \"{lock}\": \"caps\",\r\n      \"{capslock}\": \"caps\",\r\n      \"{accept}\": \"Submit\",\r\n      \"{space}\": \" \",\r\n      \"{//}\": \" \",\r\n      \"{esc}\": \"esc\",\r\n      \"{escape}\": \"esc\",\r\n      \"{f1}\": \"f1\",\r\n      \"{f2}\": \"f2\",\r\n      \"{f3}\": \"f3\",\r\n      \"{f4}\": \"f4\",\r\n      \"{f5}\": \"f5\",\r\n      \"{f6}\": \"f6\",\r\n      \"{f7}\": \"f7\",\r\n      \"{f8}\": \"f8\",\r\n      \"{f9}\": \"f9\",\r\n      \"{f10}\": \"f10\",\r\n      \"{f11}\": \"f11\",\r\n      \"{f12}\": \"f12\",\r\n      \"{numpaddivide}\": \"/\",\r\n      \"{numlock}\": \"lock\",\r\n      \"{arrowup}\": \"↑\",\r\n      \"{arrowleft}\": \"←\",\r\n      \"{arrowdown}\": \"↓\",\r\n      \"{arrowright}\": \"→\",\r\n      \"{prtscr}\": \"print\",\r\n      \"{scrolllock}\": \"scroll\",\r\n      \"{pause}\": \"pause\",\r\n      \"{insert}\": \"ins\",\r\n      \"{home}\": \"home\",\r\n      \"{pageup}\": \"up\",\r\n      \"{delete}\": \"del\",\r\n      \"{forwarddelete}\": \"del\",\r\n      \"{end}\": \"end\",\r\n      \"{pagedown}\": \"down\",\r\n      \"{numpadmultiply}\": \"*\",\r\n      \"{numpadsubtract}\": \"-\",\r\n      \"{numpadadd}\": \"+\",\r\n      \"{numpadenter}\": \"enter\",\r\n      \"{period}\": \".\",\r\n      \"{numpaddecimal}\": \".\",\r\n      \"{numpad0}\": \"0\",\r\n      \"{numpad1}\": \"1\",\r\n      \"{numpad2}\": \"2\",\r\n      \"{numpad3}\": \"3\",\r\n      \"{numpad4}\": \"4\",\r\n      \"{numpad5}\": \"5\",\r\n      \"{numpad6}\": \"6\",\r\n      \"{numpad7}\": \"7\",\r\n      \"{numpad8}\": \"8\",\r\n      \"{numpad9}\": \"9\",\r\n    };\r\n  }\r\n  /**\r\n   * Returns the display (label) name for a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {object} display The provided display option\r\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\r\n   */\r\n  getButtonDisplayName(button: string, display: KeyboardOptions[\"display\"], mergeDisplay = false) {\r\n    if (mergeDisplay) {\r\n      display = Object.assign({}, this.getDefaultDisplay(), display);\r\n    } else {\r\n      display = display || this.getDefaultDisplay();\r\n    }\r\n\r\n    return display[button] || button;\r\n  }\r\n\r\n  /**\r\n   * Returns the updated input resulting from clicking a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {string} input The input string\r\n   * @param  {number} caretPos The cursor's current position\r\n   * @param  {number} caretPosEnd The cursor's current end position\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  getUpdatedInput(button: string, input: string, caretPos: any, caretPosEnd = caretPos, moveCaret = false) {\r\n    const options = this.getOptions();\r\n    const commonParams: [number | undefined, number | undefined, boolean] = [caretPos, caretPosEnd, moveCaret];\r\n\r\n    let output = input;\r\n\r\n    if ((button === \"{bksp}\" || button === \"{backspace}\") && output.length > 0) {\r\n      output = this.removeAt(output, ...commonParams);\r\n    } else if ((button === \"{delete}\" || button === \"{forwarddelete}\") && output.length > 0) {\r\n      output = this.removeForwardsAt(output, ...commonParams);\r\n    } else if (button === \"{space}\") output = this.addStringAt(output, \" \", ...commonParams);\r\n    else if (button === \"{tab}\" && !(typeof options.tabCharOnTab === \"boolean\" && options.tabCharOnTab === false)) {\r\n      output = this.addStringAt(output, \"\\t\", ...commonParams);\r\n    } else if ((button === \"{enter}\" || button === \"{numpadenter}\") && options.newLineOnEnter)\r\n      output = this.addStringAt(output, \"\\n\", ...commonParams);\r\n    else if (button.includes(\"numpad\") && Number.isInteger(Number(button[button.length - 2]))) {\r\n      output = this.addStringAt(output, button[button.length - 2], ...commonParams);\r\n    } else if (button === \"{numpaddivide}\") output = this.addStringAt(output, \"/\", ...commonParams);\r\n    else if (button === \"{numpadmultiply}\") output = this.addStringAt(output, \"*\", ...commonParams);\r\n    else if (button === \"{numpadsubtract}\") output = this.addStringAt(output, \"-\", ...commonParams);\r\n    else if (button === \"{numpadadd}\") output = this.addStringAt(output, \"+\", ...commonParams);\r\n    else if (button === \"{numpaddecimal}\") output = this.addStringAt(output, \".\", ...commonParams);\r\n    else if (button === \"{\" || button === \"}\") output = this.addStringAt(output, button, ...commonParams);\r\n    else if (!button.includes(\"{\") && !button.includes(\"}\")) output = this.addStringAt(output, button, ...commonParams);\r\n\r\n    if (options.debug) {\r\n      console.log(\"Input will be: \" + output);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Moves the cursor position by a given amount\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPos(length: number, minus = false) {\r\n    const newCaretPos = this.updateCaretPosAction(length, minus);\r\n\r\n    this.dispatch((instance: any) => {\r\n      instance.setCaretPosition(newCaretPos);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Action method of updateCaretPos\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPosAction(length: number, minus = false) {\r\n    const options = this.getOptions();\r\n    let caretPosition = this.getCaretPosition();\r\n\r\n    if (caretPosition != null) {\r\n      if (minus) {\r\n        if (caretPosition > 0) caretPosition = caretPosition - length;\r\n      } else {\r\n        caretPosition = caretPosition + length;\r\n      }\r\n    }\r\n\r\n    if (options.debug) {\r\n      console.log(\"Caret at:\", caretPosition);\r\n    }\r\n\r\n    return caretPosition;\r\n  }\r\n\r\n  /**\r\n   * Adds a string to the input at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {string} str The string to add\r\n   * @param  {number} position The (cursor) position where the string should be added\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  addStringAt(source: string, str: string, position = source.length, positionEnd = source.length, moveCaret = false) {\r\n    let output;\r\n\r\n    if (!position && position !== 0) {\r\n      output = source + str;\r\n    } else {\r\n      output = [source.slice(0, position), str, source.slice(positionEnd)].join(\"\");\r\n\r\n      /**\r\n       * Avoid caret position change when maxLength is set\r\n       */\r\n      if (!this.isMaxLengthReached()) {\r\n        if (moveCaret) this.updateCaretPos(str.length);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Check whether the button is a standard button\r\n   */\r\n  isStandardButton = (button: string) => button && !(button[0] === \"{\" && button[button.length - 1] === \"}\");\r\n\r\n  /**\r\n   * Removes an amount of characters before a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  removeAt(source: string, position = source.length, positionEnd = source.length, moveCaret = false) {\r\n    if (position === 0 && positionEnd === 0) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      let prevTwoChars;\r\n      let emojiMatched;\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      if (position && position >= 0) {\r\n        prevTwoChars = source.substring(position - 2, position);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.substr(0, position - 2) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.substr(0, position - 1) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      } else {\r\n        prevTwoChars = source.slice(-2);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.slice(0, -2);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.slice(0, -1);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Removes an amount of characters after a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   */\r\n  removeForwardsAt(\r\n    source: string,\r\n    position: number = source.length,\r\n    positionEnd: number = source.length,\r\n    moveCaret = false\r\n  ) {\r\n    if (!source?.length || position === null) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      const nextTwoChars = source.substring(position, position + 2);\r\n      const emojiMatched = nextTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.substr(0, position) + source.substr(position + 2);\r\n      } else {\r\n        output = source.substr(0, position) + source.substr(position + 1);\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\r\n   *\r\n   * @param  {object} inputObj\r\n   * @param  {string} updatedInput\r\n   */\r\n  handleMaxLength(inputObj: KeyboardInput, updatedInput: string) {\r\n    const options = this.getOptions();\r\n    const maxLength = options.maxLength;\r\n    const currentInput = inputObj[options.inputName || \"default\"];\r\n    const condition = updatedInput.length - 1 >= maxLength;\r\n\r\n    if (\r\n      /**\r\n       * If pressing this button won't add more characters\r\n       * We exit out of this limiter function\r\n       */\r\n      updatedInput.length <= currentInput.length\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (Number.isInteger(maxLength)) {\r\n      if (options.debug) {\r\n        console.log(\"maxLength (num) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        /**\r\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\r\n         */\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (typeof maxLength === \"object\") {\r\n      const condition = updatedInput.length - 1 >= maxLength[options.inputName || \"default\"];\r\n\r\n      if (options.debug) {\r\n        console.log(\"maxLength (obj) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of maxLengthReached\r\n   */\r\n  isMaxLengthReached() {\r\n    return Boolean(this.maxLengthReached);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a touch device is being used\r\n   */\r\n  isTouchDevice() {\r\n    return \"ontouchstart\" in window || navigator.maxTouchPoints;\r\n  }\r\n\r\n  /**\r\n   * Determines whether pointer events are supported\r\n   */\r\n  pointerEventsSupported() {\r\n    return !!window.PointerEvent;\r\n  }\r\n\r\n  /**\r\n   * Bind all methods in a given class\r\n   */\r\n\r\n  static bindMethods(myClass: any, instance: any) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (const myMethod of Object.getOwnPropertyNames(myClass.prototype)) {\r\n      const excludeMethod = myMethod === \"constructor\" || myMethod === \"bindMethods\";\r\n      if (!excludeMethod) {\r\n        instance[myMethod] = instance[myMethod].bind(instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transforms an arbitrary string to camelCase\r\n   *\r\n   * @param  {string} str The string to transform.\r\n   */\r\n  camelCase(str: string): string {\r\n    if (!str) return \"\";\r\n\r\n    return str\r\n      .toLowerCase()\r\n      .trim()\r\n      .split(/[.\\-_\\s]/g)\r\n      .reduce((str, word) => (word.length ? str + word[0].toUpperCase() + word.slice(1) : str));\r\n  }\r\n\r\n  /**\r\n   * Split array into chunks\r\n   */\r\n  chunkArray<T>(arr: T[], size: number): T[][] {\r\n    return [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));\r\n  }\r\n\r\n  /**\r\n   * Escape regex input\r\n   */\r\n  escapeRegex(str: string) {\r\n    return str.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\r\n  }\r\n\r\n  /**\r\n   * Calculate caret position offset when using rtl option\r\n   */\r\n  getRtlOffset(index: number, input: string) {\r\n    let newIndex = index;\r\n    const startMarkerIndex = input.indexOf(\"\\u202B\");\r\n    const endMarkerIndex = input.indexOf(\"\\u202C\");\r\n\r\n    if (startMarkerIndex < index && startMarkerIndex != -1) {\r\n      newIndex--;\r\n    }\r\n    if (endMarkerIndex < index && startMarkerIndex != -1) {\r\n      newIndex--;\r\n    }\r\n\r\n    return newIndex < 0 ? 0 : newIndex;\r\n  }\r\n\r\n  /**\r\n   * Reusable empty function\r\n   */\r\n  static noop = () => {};\r\n\r\n  /**\r\n   * Check if a function is a constructor\r\n   */\r\n  isConstructor(f: any) {\r\n    try {\r\n      Reflect.construct(String, [], f);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default Utilities;\r\n","import { KeyboardOptions, PhysicalKeyboardParams } from '../interfaces';\r\nimport Utilities from '../services/Utilities';\r\nimport { getDefaultLayout } from '../services/KeyboardLayout';\r\n\r\n/**\r\n * Layout Key Mapping Interface\r\n */\r\ninterface LayoutKeyMapping {\r\n  normal: string | number;\r\n  shift: string | number;\r\n}\r\n\r\n/**\r\n * Physical Keyboard Service\r\n */\r\nclass PhysicalKeyboard {\r\n  getOptions: () => KeyboardOptions;\r\n  dispatch: any;\r\n  layoutJSON: Record<string, LayoutKeyMapping> | null = null;\r\n  lastLayout = '';\r\n  shiftActive = false;\r\n  capslockActive = false;\r\n\r\n  /**\r\n   * Creates an instance of the PhysicalKeyboard service\r\n   */\r\n  constructor({ dispatch, getOptions }: PhysicalKeyboardParams) {\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.dispatch = dispatch;\r\n    this.getOptions = getOptions;\r\n\r\n    if (this.getOptions() && this.getOptions().layout) {\r\n      this.lastLayout = this.getOptions()?.layout?.default?.[1] || '';\r\n      const layout = this.getOptions().layout;\r\n      if (layout) {\r\n        this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(layout));\r\n      }\r\n    } else {\r\n      this.lastLayout = getDefaultLayout().default[1];\r\n      this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(getDefaultLayout()));\r\n    }\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(PhysicalKeyboard, this);\r\n  }\r\n\r\n  handleHighlightKeyDown(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    // if (options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)) {\r\n    //   e.preventDefault();\r\n    //   e.stopImmediatePropagation();\r\n    // }\r\n\r\n    if ((e.code === 'ShiftLeft' || e.code === 'ShiftRight') && !this.shiftActive) {\r\n      this.shiftActive = !this.shiftActive;\r\n    }\r\n\r\n    if (e.code === 'CapsLock') {\r\n      this.capslockActive = !this.capslockActive;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const standardButtonPressed = instance.getButtonElement(buttonPressed);\r\n      const functionButtonPressed = instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      let buttonDOM;\r\n      let buttonName: string;\r\n\r\n      if (standardButtonPressed) {\r\n        buttonDOM = standardButtonPressed;\r\n        buttonName = buttonPressed;\r\n      } else if (functionButtonPressed) {\r\n        buttonDOM = functionButtonPressed;\r\n        buttonName = `{${buttonPressed}}`;\r\n      } else {\r\n        return;\r\n      }\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        buttonElement.style.background = options.physicalKeyboardHighlightBgColor || '#dadce4';\r\n        buttonElement.style.color = options.physicalKeyboardHighlightTextColor || 'black';\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM[0]?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM[0]?.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  handleHighlightKeyUp(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    // if (options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)) {\r\n    //   e.preventDefault();\r\n    //   e.stopImmediatePropagation();\r\n    // }\r\n\r\n    if (e.code === 'ShiftLeft' || e.code === 'ShiftRight') {\r\n      this.shiftActive = false;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const buttonDOM = instance.getButtonElement(buttonPressed) || instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        if (buttonElement.removeAttribute) {\r\n          buttonElement.removeAttribute('style');\r\n        }\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM[0]?.onpointerup?.(e);\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM?.onpointerup?.(e);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\r\n   * @param  {object} e The KeyboardEvent\r\n   * @returns {string} The simple-keyboard layout key\r\n   */\r\n  getSimpleKeyboardLayoutKey(e: KeyboardEvent): string {\r\n    let output = '';\r\n\r\n    const options = this.getOptions();\r\n    const currentLayout = options?.layout?.default?.[1] ?? getDefaultLayout().default[1];\r\n    if (this.lastLayout !== currentLayout) {\r\n      this.lastLayout = currentLayout || '';\r\n\r\n      const layout = options?.layout ?? getDefaultLayout();\r\n      this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(layout));\r\n    }\r\n\r\n    if (this.layoutJSON && this.layoutJSON[e.code]) {\r\n      // Determine whether to use normal or shift based on Shift & CapsLock state\r\n      output =\r\n        this.shiftActive || this.capslockActive\r\n          ? this.layoutJSON[e.code].shift.toString()\r\n          : this.layoutJSON[e.code].normal.toString();\r\n    } else {\r\n      output = e.key && e.key !== 'Unidentified' ? e.key : this.keyCodeToKey(e?.keyCode);\r\n    }\r\n\r\n    // Normalize left/right variations\r\n    const normalizeKeyMap: Record<string, string> = {\r\n      ShiftLeft: 'shift',\r\n      ShiftRight: 'shift',\r\n      ControlLeft: 'ctrl',\r\n      ControlRight: 'ctrl',\r\n      AltLeft: 'alt',\r\n      AltRight: 'alt',\r\n      MetaLeft: 'meta',\r\n      MetaRight: 'meta',\r\n      Backspace: 'bksp',\r\n      CapsLock: 'lock',\r\n      Enter: 'enter',\r\n      Tab: 'tab',\r\n    };\r\n\r\n    return normalizeKeyMap[output] || (output.length > 1 ? output.toLowerCase() : output);\r\n  }\r\n\r\n  /**\r\n   * Retrieve key from keyCode\r\n   */\r\n  keyCodeToKey(keyCode: number): string {\r\n    return (\r\n      {\r\n        8: 'Backspace',\r\n        9: 'Tab',\r\n        13: 'Enter',\r\n        16: 'Shift',\r\n        17: 'Ctrl',\r\n        18: 'Alt',\r\n        19: 'Pause',\r\n        20: 'CapsLock',\r\n        27: 'Esc',\r\n        32: 'Space',\r\n        33: 'PageUp',\r\n        34: 'PageDown',\r\n        35: 'End',\r\n        36: 'Home',\r\n        37: 'ArrowLeft',\r\n        38: 'ArrowUp',\r\n        39: 'ArrowRight',\r\n        40: 'ArrowDown',\r\n        45: 'Insert',\r\n        46: 'Delete',\r\n        48: '0',\r\n        49: '1',\r\n        50: '2',\r\n        51: '3',\r\n        52: '4',\r\n        53: '5',\r\n        54: '6',\r\n        55: '7',\r\n        56: '8',\r\n        57: '9',\r\n        65: 'A',\r\n        66: 'B',\r\n        67: 'C',\r\n        68: 'D',\r\n        69: 'E',\r\n        70: 'F',\r\n        71: 'G',\r\n        72: 'H',\r\n        73: 'I',\r\n        74: 'J',\r\n        75: 'K',\r\n        76: 'L',\r\n        77: 'M',\r\n        78: 'N',\r\n        79: 'O',\r\n        80: 'P',\r\n        81: 'Q',\r\n        82: 'R',\r\n        83: 'S',\r\n        84: 'T',\r\n        85: 'U',\r\n        86: 'V',\r\n        87: 'W',\r\n        88: 'X',\r\n        89: 'Y',\r\n        90: 'Z',\r\n        91: 'Meta',\r\n        96: 'Numpad0',\r\n        97: 'Numpad1',\r\n        98: 'Numpad2',\r\n        99: 'Numpad3',\r\n        100: 'Numpad4',\r\n        101: 'Numpad5',\r\n        102: 'Numpad6',\r\n        103: 'Numpad7',\r\n        104: 'Numpad8',\r\n        105: 'Numpad9',\r\n        106: 'NumpadMultiply',\r\n        107: 'NumpadAdd',\r\n        109: 'NumpadSubtract',\r\n        110: 'NumpadDecimal',\r\n        111: 'NumpadDivide',\r\n        112: 'F1',\r\n        113: 'F2',\r\n        114: 'F3',\r\n        115: 'F4',\r\n        116: 'F5',\r\n        117: 'F6',\r\n        118: 'F7',\r\n        119: 'F8',\r\n        120: 'F9',\r\n        121: 'F10',\r\n        122: 'F11',\r\n        123: 'F12',\r\n        144: 'NumLock',\r\n        145: 'ScrollLock',\r\n        186: ';',\r\n        187: '=',\r\n        188: ',',\r\n        189: '-',\r\n        190: '.',\r\n        191: '/',\r\n        192: '`',\r\n        219: '[',\r\n        220: '\\\\',\r\n        221: ']',\r\n        222: \"'\",\r\n      }[keyCode] || ''\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Extracts and pads a layout object\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with padding\r\n   */\r\n  extractAndPadLayout(layout: Record<string, string[]>): Record<string, (string | number)[][]> {\r\n    const qwertyRowLengths = [14, 14, 13, 12, 3]; // Number of keys per QWERTY row\r\n\r\n    const processedLayout: Record<string, (string | number)[][]> = { default: [], shift: [] };\r\n\r\n    for (const type of ['default', 'shift']) {\r\n      if (!layout[type]) continue; // Skip if layout type is missing\r\n\r\n      const rows = layout[type].map((row) => row.split(' '));\r\n\r\n      for (let i = 0; i < qwertyRowLengths.length; i++) {\r\n        processedLayout[type][i] = rows[i] ? [...rows[i]] : [];\r\n        while (processedLayout[type][i].length < qwertyRowLengths[i]) {\r\n          processedLayout[type][i].push(-1); // Fill missing spots\r\n        }\r\n      }\r\n    }\r\n\r\n    return processedLayout;\r\n  }\r\n\r\n  /**\r\n   * Maps a layout object to event codes\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with event codes\r\n   */\r\n\r\n  mapLayoutToEventCodes(layout: Record<string, (string | number)[][]>): Record<string, LayoutKeyMapping> {\r\n    const mappedLayout: Record<string, LayoutKeyMapping> = {};\r\n\r\n    const qwertyRows = [\r\n      [\r\n        'Backquote',\r\n        'Digit1',\r\n        'Digit2',\r\n        'Digit3',\r\n        'Digit4',\r\n        'Digit5',\r\n        'Digit6',\r\n        'Digit7',\r\n        'Digit8',\r\n        'Digit9',\r\n        'Digit0',\r\n        'Minus',\r\n        'Equal',\r\n        'Backspace',\r\n      ],\r\n      [\r\n        'Tab',\r\n        'KeyQ',\r\n        'KeyW',\r\n        'KeyE',\r\n        'KeyR',\r\n        'KeyT',\r\n        'KeyY',\r\n        'KeyU',\r\n        'KeyI',\r\n        'KeyO',\r\n        'KeyP',\r\n        'BracketLeft',\r\n        'BracketRight',\r\n        'Backslash',\r\n      ],\r\n      [\r\n        'CapsLock',\r\n        'KeyA',\r\n        'KeyS',\r\n        'KeyD',\r\n        'KeyF',\r\n        'KeyG',\r\n        'KeyH',\r\n        'KeyJ',\r\n        'KeyK',\r\n        'KeyL',\r\n        'Semicolon',\r\n        'Quote',\r\n        'Enter',\r\n      ],\r\n      ['ShiftLeft', 'KeyZ', 'KeyX', 'KeyC', 'KeyV', 'KeyB', 'KeyN', 'KeyM', 'Comma', 'Period', 'Slash', 'ShiftRight'],\r\n      ['ControlLeft', 'AltLeft', 'Space'],\r\n    ];\r\n\r\n    for (let rowIndex = 0; rowIndex < qwertyRows.length; rowIndex++) {\r\n      for (let colIndex = 0; colIndex < qwertyRows[rowIndex].length; colIndex++) {\r\n        const eventCode = qwertyRows[rowIndex][colIndex];\r\n        const normalKey = layout.default[rowIndex][colIndex] ?? '';\r\n        const shiftKey = layout.shift[rowIndex][colIndex] ?? '';\r\n\r\n        mappedLayout[eventCode] = {\r\n          normal: normalKey !== -1 ? normalKey : '',\r\n          shift: shiftKey !== -1 ? shiftKey : '',\r\n        };\r\n      }\r\n    }\r\n\r\n    return mappedLayout;\r\n  }\r\n\r\n  isModifierKey = (e: KeyboardEvent): boolean => {\r\n    return (\r\n      e.altKey ||\r\n      e.ctrlKey ||\r\n      e.shiftKey ||\r\n      ['Tab', 'CapsLock', 'Esc', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(\r\n        e.code || e.key || this.keyCodeToKey(e?.keyCode)\r\n      )\r\n    );\r\n  };\r\n}\r\n\r\nexport default PhysicalKeyboard;\r\n","import { KeyboardLayoutObject } from \"../interfaces\";\r\n\r\nexport const getDefaultLayout = (): KeyboardLayoutObject => {\r\n  return {\r\n    default: [\r\n      \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\r\n      \"{tab} q w e r t y u i o p [ ] \\\\\",\r\n      \"{lock} a s d f g h j k l ; ' {enter}\",\r\n      \"{shift} z x c v b n m , . / {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n    shift: [\r\n      \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\r\n      \"{tab} Q W E R T Y U I O P { } |\",\r\n      '{lock} A S D F G H J K L : \" {enter}',\r\n      \"{shift} Z X C V B N M < > ? {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n  };\r\n};\r\n","import \"./css/CandidateBox.css\";\r\n\r\nimport Utilities from \"../services/Utilities\";\r\nimport {\r\n  CandidateBoxParams,\r\n  CandidateBoxRenderParams,\r\n  CandidateBoxShowParams,\r\n  KeyboardOptions,\r\n} from \"./../interfaces\";\r\n\r\nclass CandidateBox {\r\n  utilities: Utilities;\r\n  options: KeyboardOptions;\r\n  candidateBoxElement!: HTMLDivElement;\r\n  pageIndex = 0;\r\n  pageSize: number;\r\n\r\n  constructor({ utilities, options }: CandidateBoxParams) {\r\n    this.utilities = utilities;\r\n    this.options = options;\r\n    Utilities.bindMethods(CandidateBox, this);\r\n    this.pageSize = this.utilities.getOptions().layoutCandidatesPageSize || 5;\r\n  }\r\n\r\n  destroy() {\r\n    if (this.candidateBoxElement) {\r\n      this.candidateBoxElement.remove();\r\n      this.pageIndex = 0;\r\n    }\r\n  }\r\n\r\n  show({\r\n    candidateValue,\r\n    targetElement,\r\n    onSelect,\r\n  }: CandidateBoxShowParams): void {\r\n    if (!candidateValue || !candidateValue.length) {\r\n      return;\r\n    }\r\n\r\n    const candidateListPages = this.utilities.chunkArray(\r\n      candidateValue.split(\" \"),\r\n      this.pageSize\r\n    );\r\n\r\n    this.renderPage({\r\n      candidateListPages,\r\n      targetElement,\r\n      pageIndex: this.pageIndex,\r\n      nbPages: candidateListPages.length,\r\n      onItemSelected: (selectedCandidate: string, e: MouseEvent) => {\r\n        onSelect(selectedCandidate, e);\r\n        this.destroy();\r\n      },\r\n    });\r\n  }\r\n\r\n  renderPage({\r\n    candidateListPages,\r\n    targetElement,\r\n    pageIndex,\r\n    nbPages,\r\n    onItemSelected,\r\n  }: CandidateBoxRenderParams) {\r\n    // Remove current candidate box, if any\r\n    this.candidateBoxElement?.remove();\r\n\r\n    // Create candidate box element\r\n    this.candidateBoxElement = document.createElement(\"div\");\r\n    this.candidateBoxElement.className = \"hg-candidate-box\";\r\n\r\n    // Candidate box list\r\n    const candidateListULElement = document.createElement(\"ul\");\r\n    candidateListULElement.className = \"hg-candidate-box-list\";\r\n\r\n    // Create Candidate box list items\r\n    candidateListPages[pageIndex].forEach((candidateListItem) => {\r\n      const candidateListLIElement = document.createElement(\"li\");\r\n      const getMouseEvent = () => {\r\n        const mouseEvent = new (this.options.useTouchEvents ? TouchEvent : MouseEvent)(\"click\");\r\n        Object.defineProperty(mouseEvent, \"target\", {\r\n          value: candidateListLIElement,\r\n        });\r\n        return mouseEvent;\r\n      };\r\n\r\n      candidateListLIElement.className = \"hg-candidate-box-list-item\";\r\n      candidateListLIElement.innerHTML = this.options.display?.[candidateListItem] || candidateListItem;\r\n\r\n      if(this.options.useTouchEvents) {\r\n        candidateListLIElement.ontouchstart = (e: any) =>\r\n          onItemSelected(candidateListItem, e || getMouseEvent());\r\n      } else {\r\n        candidateListLIElement.onclick = (e = getMouseEvent() as MouseEvent) =>\r\n          onItemSelected(candidateListItem, e);\r\n      }\r\n\r\n      // Append list item to ul\r\n      candidateListULElement.appendChild(candidateListLIElement);\r\n    });\r\n\r\n    // Add previous button\r\n    const isPrevBtnElementActive = pageIndex > 0;\r\n    const prevBtnElement = document.createElement(\"div\");\r\n    prevBtnElement.classList.add(\"hg-candidate-box-prev\");\r\n    isPrevBtnElementActive &&\r\n      prevBtnElement.classList.add(\"hg-candidate-box-btn-active\");\r\n\r\n    const prevBtnElementClickAction = () => {\r\n      if (!isPrevBtnElementActive) return;\r\n      this.renderPage({\r\n        candidateListPages,\r\n        targetElement,\r\n        pageIndex: pageIndex - 1,\r\n        nbPages,\r\n        onItemSelected,\r\n      });\r\n    };\r\n\r\n    if(this.options.useTouchEvents) {\r\n      prevBtnElement.ontouchstart = prevBtnElementClickAction;\r\n    } else {\r\n      prevBtnElement.onclick = prevBtnElementClickAction;\r\n    }\r\n    \r\n    this.candidateBoxElement.appendChild(prevBtnElement);\r\n\r\n    // Add elements to container\r\n    this.candidateBoxElement.appendChild(candidateListULElement);\r\n\r\n    // Add next button\r\n    const isNextBtnElementActive = pageIndex < nbPages - 1;\r\n    const nextBtnElement = document.createElement(\"div\");\r\n    nextBtnElement.classList.add(\"hg-candidate-box-next\");\r\n    isNextBtnElementActive &&\r\n      nextBtnElement.classList.add(\"hg-candidate-box-btn-active\");\r\n\r\n    const nextBtnElementClickAction = () => {\r\n      if (!isNextBtnElementActive) return;\r\n      this.renderPage({\r\n        candidateListPages,\r\n        targetElement,\r\n        pageIndex: pageIndex + 1,\r\n        nbPages,\r\n        onItemSelected,\r\n      });\r\n    };\r\n\r\n    if(this.options.useTouchEvents) {\r\n      nextBtnElement.ontouchstart = nextBtnElementClickAction;\r\n    } else {\r\n      nextBtnElement.onclick = nextBtnElementClickAction;\r\n    }\r\n\r\n    this.candidateBoxElement.appendChild(nextBtnElement);\r\n\r\n    // Append candidate box to target element\r\n    targetElement.prepend(this.candidateBoxElement);\r\n  }\r\n}\r\n\r\nexport default CandidateBox;\r\n","import './css/Keyboard.css';\r\n\r\nimport { getDefaultLayout } from '../services/KeyboardLayout';\r\nimport PhysicalKeyboard from '../services/PhysicalKeyboard';\r\nimport Utilities from '../services/Utilities';\r\nimport {\r\n  KeyboardOptions,\r\n  KeyboardInput,\r\n  KeyboardButtonElements,\r\n  KeyboardHandlerEvent,\r\n  KeyboardElement,\r\n  SKWindow,\r\n} from '../interfaces';\r\nimport CandidateBox from './CandidateBox';\r\n\r\n/**\r\n * Root class for simple-keyboard.\r\n * This class:\r\n * - Parses the options\r\n * - Renders the rows and buttons\r\n * - Handles button functionality\r\n */\r\nclass SimpleKeyboard {\r\n  input!: KeyboardInput;\r\n  options!: KeyboardOptions;\r\n  utilities!: Utilities;\r\n  caretPosition!: number | null;\r\n  caretPositionEnd!: number | null;\r\n  keyboardDOM!: KeyboardElement;\r\n  keyboardPluginClasses!: string;\r\n  keyboardDOMClass!: string;\r\n  buttonElements!: KeyboardButtonElements;\r\n  currentInstanceName!: string;\r\n  allKeyboardInstances!: { [key: string]: SimpleKeyboard };\r\n  keyboardInstanceNames!: string[];\r\n  isFirstKeyboardInstance!: boolean;\r\n  physicalKeyboard!: PhysicalKeyboard;\r\n  modules!: { [key: string]: any };\r\n  activeButtonClass!: string;\r\n  holdInteractionTimeout!: number;\r\n  holdTimeout!: number;\r\n  isMouseHold!: boolean;\r\n  initialized!: boolean;\r\n  candidateBox!: CandidateBox | null;\r\n  keyboardRowsDOM!: KeyboardElement;\r\n  defaultName = 'default';\r\n  activeInputElement: HTMLInputElement | HTMLTextAreaElement | null = null;\r\n  listenersAdded = false;\r\n\r\n  /**\r\n   * Creates an instance of SimpleKeyboard\r\n   * @param {Array} selectorOrOptions If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\r\n   */\r\n  constructor(selectorOrOptions?: string | HTMLDivElement | KeyboardOptions, keyboardOptions?: KeyboardOptions) {\r\n    if (typeof window === 'undefined') return;\r\n\r\n    const { keyboardDOMClass, keyboardDOM, options = {} } = this.handleParams(selectorOrOptions, keyboardOptions);\r\n\r\n    /**\r\n     * Initializing Utilities\r\n     */\r\n    this.utilities = new Utilities({\r\n      getOptions: this.getOptions,\r\n      getCaretPosition: this.getCaretPosition,\r\n      getCaretPositionEnd: this.getCaretPositionEnd,\r\n      dispatch: this.dispatch,\r\n    });\r\n\r\n    /**\r\n     * Caret position\r\n     */\r\n    this.caretPosition = null;\r\n\r\n    /**\r\n     * Caret position end\r\n     */\r\n    this.caretPositionEnd = null;\r\n\r\n    /**\r\n     * Processing options\r\n     */\r\n    this.keyboardDOM = keyboardDOM;\r\n\r\n    /**\r\n     * @type {object}\r\n     * @property {object} layout Modify the keyboard layout.\r\n     * @property {string} layoutName Specifies which layout should be used.\r\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\r\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\r\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\r\n     * @property {array} buttonTheme A prop to add your own css classes to one or several buttons.\r\n     * @property {array} buttonAttributes A prop to add your own attributes to one or several buttons.\r\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\r\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\r\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\r\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\r\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\r\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\r\n     * @property {boolean} physicalKeyboardHighlightPress Presses keys highlighted by physicalKeyboardHighlight\r\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\r\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\r\n     * @property {boolean} physicalKeyboardHighlightPressUseClick Whether physicalKeyboardHighlightPress should use clicks to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPressUsePointerEvents Whether physicalKeyboardHighlightPress should use pointer events to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPreventDefault Whether physicalKeyboardHighlight should use preventDefault to disable default browser actions.\r\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\r\n     * @property {boolean} preventMouseUpDefault Calling preventDefault for the mouseup events.\r\n     * @property {boolean} stopMouseDownPropagation Stops pointer down events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {boolean} stopMouseUpPropagation Stops pointer up events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\r\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\r\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n     * @property {function(keyboard: Keyboard):void} beforeInputUpdate Perform an action before any input change\r\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\r\n     * @property {boolean} useButtonTag Render buttons as a button element instead of a div element.\r\n     * @property {boolean} disableCaretPositioning A prop to ensure characters are always be added/removed at the end of the string.\r\n     * @property {object} inputPattern Restrains input(s) change to the defined regular expression pattern.\r\n     * @property {boolean} useTouchEvents Instructs simple-keyboard to use touch events instead of click events.\r\n     * @property {boolean} autoUseTouchEvents Enable useTouchEvents automatically when touch device is detected.\r\n     * @property {boolean} useMouseEvents Opt out of PointerEvents handling, falling back to the prior mouse event logic.\r\n     * @property {function} destroy Clears keyboard listeners and DOM elements.\r\n     * @property {boolean} disableButtonHold Disable button hold action.\r\n     * @property {boolean} rtl Adds unicode right-to-left control characters to input return values.\r\n     * @property {function} onKeyReleased Executes the callback function on key release.\r\n     * @property {array} modules Module classes to be loaded by simple-keyboard.\r\n     * @property {boolean} enableLayoutCandidates Enable input method editor candidate list support.\r\n     * @property {object} excludeFromLayout Buttons to exclude from layout\r\n     * @property {number} layoutCandidatesPageSize Determines size of layout candidate list\r\n     * @property {boolean} layoutCandidatesCaseSensitiveMatch Determines whether layout candidate match should be case sensitive.\r\n     * @property {boolean} disableCandidateNormalization Disables the automatic normalization for selected layout candidates\r\n     * @property {boolean} enableLayoutCandidatesKeyPress Enables onKeyPress triggering for layoutCandidate items\r\n     * @property {boolean} updateCaretOnSelectionChange Updates caret when selectionchange event is fired\r\n     * @property {boolean} clickOnMouseDown When useMouseEvents is enabled, this option allows you to trigger a button click event on mousedown\r\n     */\r\n    this.options = {\r\n      layoutName: 'default',\r\n      theme: 'hg-theme-default',\r\n      inputName: 'default',\r\n      preventMouseDownDefault: false,\r\n      enableLayoutCandidates: true,\r\n      excludeFromLayout: {},\r\n      ...options,\r\n    };\r\n\r\n    /**\r\n     * @type {object} Classes identifying loaded plugins\r\n     */\r\n    this.keyboardPluginClasses = '';\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(SimpleKeyboard, this);\r\n\r\n    /**\r\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\r\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\r\n     * @example\r\n     * // To get entered input\r\n     * const input = keyboard.getInput();\r\n     *\r\n     * // To clear entered input.\r\n     * keyboard.clearInput();\r\n     *\r\n     * @type {object}\r\n     * @property {object} default Default SimpleKeyboard internal input.\r\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\r\n     */\r\n    const { inputName = this.defaultName } = this.options;\r\n    this.input = {};\r\n    this.input[inputName] = '';\r\n\r\n    /**\r\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\r\n     */\r\n    this.keyboardDOMClass = keyboardDOMClass;\r\n\r\n    /**\r\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\r\n     */\r\n    this.buttonElements = {};\r\n\r\n    /**\r\n     * Simple-keyboard Instances\r\n     * This enables multiple simple-keyboard support with easier management\r\n     */\r\n    if (!(window as SKWindow)['SimpleKeyboardInstances']) (window as SKWindow)['SimpleKeyboardInstances'] = {};\r\n\r\n    this.currentInstanceName = this.utilities.camelCase(this.keyboardDOMClass);\r\n    (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName] = this;\r\n\r\n    /**\r\n     * Instance vars\r\n     */\r\n    this.allKeyboardInstances = (window as SKWindow)['SimpleKeyboardInstances'];\r\n    this.keyboardInstanceNames = Object.keys((window as SKWindow)['SimpleKeyboardInstances']);\r\n    this.isFirstKeyboardInstance = this.keyboardInstanceNames[0] === this.currentInstanceName;\r\n\r\n    /**\r\n     * Physical Keyboard support\r\n     */\r\n    this.physicalKeyboard = new PhysicalKeyboard({\r\n      dispatch: this.dispatch,\r\n      getOptions: this.getOptions,\r\n    });\r\n\r\n    /**\r\n     * Initializing CandidateBox\r\n     */\r\n    this.candidateBox = this.options.enableLayoutCandidates\r\n      ? new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        })\r\n      : null;\r\n\r\n    /**\r\n     * Rendering keyboard\r\n     */\r\n    if (this.keyboardDOM) this.render();\r\n    else {\r\n      console.warn(`\".${keyboardDOMClass}\" was not found in the DOM.`);\r\n      throw new Error('KEYBOARD_DOM_ERROR');\r\n    }\r\n\r\n    /**\r\n     * Modules\r\n     */\r\n    this.modules = {};\r\n    this.loadModules();\r\n  }\r\n\r\n  /**\r\n   * parseParams\r\n   */\r\n  handleParams = (\r\n    selectorOrOptions?: string | HTMLDivElement | KeyboardOptions,\r\n    keyboardOptions?: KeyboardOptions\r\n  ): {\r\n    keyboardDOMClass: string;\r\n    keyboardDOM: KeyboardElement;\r\n    options: Partial<KeyboardOptions | undefined>;\r\n  } => {\r\n    let keyboardDOMClass;\r\n    let keyboardDOM;\r\n    let options;\r\n\r\n    /**\r\n     * If first parameter is a string:\r\n     * Consider it as an element's class\r\n     */\r\n    if (typeof selectorOrOptions === 'string') {\r\n      keyboardDOMClass = selectorOrOptions.split('.').join('');\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * If first parameter is an KeyboardElement\r\n       * Consider it as the keyboard DOM element\r\n       */\r\n    } else if (selectorOrOptions instanceof HTMLDivElement) {\r\n      /**\r\n       * This element must have a class, otherwise throw\r\n       */\r\n      if (!selectorOrOptions.className) {\r\n        console.warn('Any DOM element passed as parameter must have a class.');\r\n        throw new Error('KEYBOARD_DOM_CLASS_ERROR');\r\n      }\r\n\r\n      keyboardDOMClass = selectorOrOptions.className.split(' ')[0];\r\n      keyboardDOM = selectorOrOptions;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * Otherwise, search for .simple-keyboard DOM element\r\n       */\r\n    } else {\r\n      keyboardDOMClass = 'simple-keyboard';\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = selectorOrOptions;\r\n    }\r\n\r\n    return {\r\n      keyboardDOMClass,\r\n      keyboardDOM,\r\n      options,\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Getters\r\n   */\r\n  getOptions = (): KeyboardOptions => this.options;\r\n  getCaretPosition = (): number | null => this.caretPosition;\r\n  getCaretPositionEnd = (): number | null => this.caretPositionEnd;\r\n\r\n  /**\r\n   * Changes the internal caret position\r\n   * @param {number} position The caret's start position\r\n   * @param {number} positionEnd The caret's end position\r\n   */\r\n  setCaretPosition(position: number | null, endPosition = position): void {\r\n    this.caretPosition = position;\r\n    this.caretPositionEnd = endPosition;\r\n  }\r\n\r\n  /**\r\n   * Retrieve the candidates for a given input\r\n   * @param input The input string to check\r\n   */\r\n  getInputCandidates(input: string): { candidateKey: string; candidateValue: string } | Record<string, never> {\r\n    const { layoutCandidates: layoutCandidatesObj, layoutCandidatesCaseSensitiveMatch } = this.options;\r\n\r\n    if (!layoutCandidatesObj || typeof layoutCandidatesObj !== 'object') {\r\n      return {};\r\n    }\r\n\r\n    const layoutCandidates = Object.keys(layoutCandidatesObj).filter((layoutCandidate: string) => {\r\n      const inputSubstr = input.substring(0, this.getCaretPositionEnd() || 0) || input;\r\n      const regexp = new RegExp(\r\n        `${this.utilities.escapeRegex(layoutCandidate)}$`,\r\n        layoutCandidatesCaseSensitiveMatch ? 'g' : 'gi'\r\n      );\r\n      const matches = [...inputSubstr.matchAll(regexp)];\r\n      return !!matches.length;\r\n    });\r\n\r\n    if (layoutCandidates.length > 1) {\r\n      const candidateKey = layoutCandidates.sort((a, b) => b.length - a.length)[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else if (layoutCandidates.length) {\r\n      const candidateKey = layoutCandidates[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows a suggestion box with a list of candidate words\r\n   * @param candidates The chosen candidates string as defined in the layoutCandidates option\r\n   * @param targetElement The element next to which the candidates box will be shown\r\n   */\r\n  showCandidatesBox(candidateKey: string, candidateValue: string, targetElement: KeyboardElement): void {\r\n    if (this.candidateBox) {\r\n      this.candidateBox.show({\r\n        candidateValue,\r\n        targetElement,\r\n        onSelect: (selectedCandidate: string, e: MouseEvent) => {\r\n          const { layoutCandidatesCaseSensitiveMatch, disableCandidateNormalization, enableLayoutCandidatesKeyPress } =\r\n            this.options;\r\n\r\n          let candidateStr = selectedCandidate;\r\n\r\n          if (!disableCandidateNormalization) {\r\n            /**\r\n             * Making sure that our suggestions are not composed characters\r\n             */\r\n            candidateStr = selectedCandidate.normalize('NFD');\r\n          }\r\n\r\n          /**\r\n           * Perform an action before any input change\r\n           */\r\n          if (typeof this.options.beforeInputUpdate === 'function') {\r\n            this.options.beforeInputUpdate(this);\r\n          }\r\n\r\n          const currentInput = this.getInput(this.options.inputName, true);\r\n          const initialCaretPosition = this.getCaretPositionEnd() || 0;\r\n          const inputSubstr = currentInput.substring(0, initialCaretPosition || 0) || currentInput;\r\n\r\n          const regexp = new RegExp(\r\n            `${this.utilities.escapeRegex(candidateKey)}$`,\r\n            layoutCandidatesCaseSensitiveMatch ? 'g' : 'gi'\r\n          );\r\n          const newInputSubstr = inputSubstr.replace(regexp, candidateStr);\r\n          const newInput = currentInput.replace(inputSubstr, newInputSubstr);\r\n\r\n          const caretPositionDiff = newInputSubstr.length - inputSubstr.length;\r\n          let newCaretPosition = (initialCaretPosition || currentInput.length) + caretPositionDiff;\r\n\r\n          if (newCaretPosition < 0) newCaretPosition = 0;\r\n\r\n          this.setInput(newInput, this.options.inputName, true);\r\n          this.setCaretPosition(newCaretPosition);\r\n\r\n          /**\r\n           * Calling onKeyPress\r\n           * We pass in the composed candidate instead of the decomposed one\r\n           * To prevent confusion for users\r\n           */\r\n          if (enableLayoutCandidatesKeyPress && typeof this.options.onKeyPress === 'function') {\r\n            this.options.onKeyPress(selectedCandidate, e);\r\n          }\r\n\r\n          if (typeof this.options.onChange === 'function') {\r\n            this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n          }\r\n\r\n          /**\r\n           * Calling onChangeAll\r\n           */\r\n          if (typeof this.options.onChangeAll === 'function') this.options.onChangeAll(this.getAllInputs(), e);\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles clicks made to keyboard buttons\r\n   * @param  {string} button The button's layout name.\r\n   */\r\n  handleButtonClicked(button: string, e?: KeyboardHandlerEvent): void {\r\n    const { inputName = this.defaultName, debug } = this.options;\r\n    /**\r\n     * Ignoring placeholder buttons\r\n     */\r\n    if (button === '{//}') return;\r\n\r\n    /**\r\n     * Creating inputName if it doesn't exist\r\n     */\r\n    if (!this.input[inputName]) this.input[inputName] = '';\r\n\r\n    /**\r\n     * Perform an action before any input change\r\n     */\r\n    if (typeof this.options.beforeInputUpdate === 'function') {\r\n      this.options.beforeInputUpdate(this);\r\n    }\r\n\r\n    /**\r\n     * Calculating new input\r\n     */\r\n    const updatedInput = this.utilities.getUpdatedInput(\r\n      button,\r\n      this.input[inputName],\r\n      this.caretPosition,\r\n      this.caretPositionEnd\r\n    );\r\n\r\n    /**\r\n     * EDGE CASE: Check for whole input selection changes that will yield same updatedInput\r\n     */\r\n    if (this.utilities.isStandardButton(button) && this.activeInputElement) {\r\n      const isEntireInputSelection =\r\n        this.input[inputName] &&\r\n        this.input[inputName] === updatedInput &&\r\n        this.caretPosition === 0 &&\r\n        this.caretPositionEnd === updatedInput.length;\r\n\r\n      if (isEntireInputSelection) {\r\n        this.setInput('', this.options.inputName, true);\r\n        this.setCaretPosition(0);\r\n        this.activeInputElement.value = '';\r\n        this.activeInputElement.setSelectionRange(0, 0);\r\n        this.handleButtonClicked(button, e);\r\n        return;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Calling onKeyPress\r\n     */\r\n    if (typeof this.options.onKeyPress === 'function') this.options.onKeyPress(button, e);\r\n\r\n    if (\r\n      // If input will change as a result of this button press\r\n      this.input[inputName] !== updatedInput &&\r\n      // This pertains to the \"inputPattern\" option:\r\n      // If inputPattern isn't set\r\n      (!this.options.inputPattern ||\r\n        // Or, if it is set and if the pattern is valid - we proceed.\r\n        (this.options.inputPattern && this.inputPatternIsValid(updatedInput)))\r\n    ) {\r\n      /**\r\n       * If maxLength and handleMaxLength yield true, halting\r\n       */\r\n      if (this.options.maxLength && this.utilities.handleMaxLength(this.input, updatedInput)) {\r\n        return;\r\n      }\r\n\r\n      /**\r\n       * Updating input\r\n       */\r\n      const newInputValue = this.utilities.getUpdatedInput(\r\n        button,\r\n        this.input[inputName],\r\n        this.caretPosition,\r\n        this.caretPositionEnd,\r\n        true\r\n      );\r\n\r\n      this.setInput(newInputValue, this.options.inputName, true);\r\n\r\n      if (debug) console.log('Input changed:', this.getAllInputs());\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          'Caret at: ',\r\n          this.getCaretPosition(),\r\n          this.getCaretPositionEnd(),\r\n          `(${this.keyboardDOMClass})`,\r\n          e?.type\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Enforce syncInstanceInputs, if set\r\n       */\r\n      if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n\r\n      /**\r\n       * Calling onChange\r\n       */\r\n      if (typeof this.options.onChange === 'function')\r\n        this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n\r\n      /**\r\n       * Calling onChangeAll\r\n       */\r\n      if (typeof this.options.onChangeAll === 'function') this.options.onChangeAll(this.getAllInputs(), e);\r\n\r\n      /**\r\n       * Check if this new input has candidates (suggested words)\r\n       */\r\n      if (e?.target && this.options.enableLayoutCandidates) {\r\n        const { candidateKey, candidateValue } = this.getInputCandidates(updatedInput);\r\n\r\n        if (candidateKey && candidateValue) {\r\n          this.showCandidatesBox(candidateKey, candidateValue, this.keyboardDOM);\r\n        } else {\r\n          this.candidateBox?.destroy();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * After a button is clicked the selection (if any) will disappear\r\n     * we should reflect this in our state, as applicable\r\n     */\r\n    if (this.caretPositionEnd && this.caretPosition !== this.caretPositionEnd) {\r\n      this.setCaretPosition(this.caretPositionEnd, this.caretPositionEnd);\r\n\r\n      if (this.activeInputElement) {\r\n        this.activeInputElement.setSelectionRange(this.caretPositionEnd, this.caretPositionEnd);\r\n      }\r\n\r\n      if (this.options.debug) {\r\n        console.log('Caret position aligned', this.caretPosition);\r\n      }\r\n    }\r\n\r\n    if (debug) {\r\n      console.log('Key pressed:', button);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get mouse hold state\r\n   */\r\n  getMouseHold() {\r\n    return this.isMouseHold;\r\n  }\r\n\r\n  /**\r\n   * Mark mouse hold state as set\r\n   */\r\n  setMouseHold(value: boolean) {\r\n    if (this.options.syncInstanceInputs) {\r\n      this.dispatch((instance: SimpleKeyboard) => {\r\n        instance.isMouseHold = value;\r\n      });\r\n    } else {\r\n      this.isMouseHold = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mousedown\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonMouseDown(button: string, e: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseDownDefault) e.preventDefault();\r\n      if (this.options.stopMouseDownPropagation) e.stopPropagation();\r\n\r\n      /**\r\n       * Add active class\r\n       */\r\n      e.target.classList.add(this.activeButtonClass);\r\n    }\r\n\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n    if (this.holdTimeout) clearTimeout(this.holdTimeout);\r\n\r\n    /**\r\n     * @type {boolean} Whether the mouse is being held onKeyPress\r\n     */\r\n    this.setMouseHold(true);\r\n\r\n    /**\r\n     * @type {object} Time to wait until a key hold is detected\r\n     */\r\n    if (!this.options.disableButtonHold) {\r\n      this.holdTimeout = window.setTimeout(() => {\r\n        if (\r\n          (this.getMouseHold() &&\r\n            // TODO: This needs to be configurable through options\r\n            ((!button.includes('{') && !button.includes('}')) ||\r\n              button === '{delete}' ||\r\n              button === '{backspace}' ||\r\n              button === '{bksp}' ||\r\n              button === '{space}' ||\r\n              button === '{tab}')) ||\r\n          button === '{arrowright}' ||\r\n          button === '{arrowleft}' ||\r\n          button === '{arrowup}' ||\r\n          button === '{arrowdown}'\r\n        ) {\r\n          if (this.options.debug) console.log('Button held:', button);\r\n\r\n          this.handleButtonHold(button);\r\n        }\r\n        clearTimeout(this.holdTimeout);\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mouseup\r\n   */\r\n  handleButtonMouseUp(button?: string, e?: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseUpDefault && e.preventDefault) e.preventDefault();\r\n      if (this.options.stopMouseUpPropagation && e.stopPropagation) e.stopPropagation();\r\n\r\n      /* istanbul ignore next */\r\n      const isKeyboard =\r\n        e.target === this.keyboardDOM ||\r\n        (e.target && this.keyboardDOM.contains(e.target)) ||\r\n        (this.candidateBox &&\r\n          this.candidateBox.candidateBoxElement &&\r\n          (e.target === this.candidateBox.candidateBoxElement ||\r\n            (e.target && this.candidateBox.candidateBoxElement.contains(e.target))));\r\n\r\n      /**\r\n       * On click outside, remove candidateBox\r\n       */\r\n      if (!isKeyboard && this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Remove active class\r\n     */\r\n    this.recurseButtons((buttonElement: Element) => {\r\n      buttonElement.classList.remove(this.activeButtonClass);\r\n    });\r\n\r\n    this.setMouseHold(false);\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * Calling onKeyReleased\r\n     */\r\n    if (button && typeof this.options.onKeyReleased === 'function') this.options.onKeyReleased(button, e);\r\n  }\r\n\r\n  /**\r\n   * Handles container mousedown\r\n   */\r\n  handleKeyboardContainerMouseDown(e: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Handle event options\r\n     */\r\n    if (this.options.preventMouseDownDefault) e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Handles button hold\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonHold(button: string): void {\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * @type {object} Timeout dictating the speed of key hold iterations\r\n     */\r\n    this.holdInteractionTimeout = window.setTimeout(() => {\r\n      if (this.getMouseHold()) {\r\n        this.handleButtonClicked(button);\r\n        this.handleButtonHold(button);\r\n      } else {\r\n        clearTimeout(this.holdInteractionTimeout);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances (if you have several instances).\r\n   */\r\n  syncInstanceInputs(): void {\r\n    this.dispatch((instance: SimpleKeyboard) => {\r\n      instance.replaceInput(this.input);\r\n      instance.setCaretPosition(this.caretPosition, this.caretPositionEnd);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the keyboard’s input.\r\n   * @param {string} [inputName] optional - the internal input to select\r\n   */\r\n  clearInput(inputName: string = this.options.inputName || this.defaultName): void {\r\n    this.input[inputName] = '';\r\n\r\n    /**\r\n     * Reset caretPosition\r\n     */\r\n    this.setCaretPosition(0);\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Get the keyboard’s input (You can also get it from the onChange prop).\r\n   * @param  {string} [inputName] optional - the internal input to select\r\n   */\r\n  getInput(inputName: string = this.options.inputName || this.defaultName, skipSync = false): string {\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs && !skipSync) this.syncInstanceInputs();\r\n\r\n    if (this.options.rtl) {\r\n      // Remove existing control chars\r\n      const inputWithoutRTLControl = this.input[inputName].replace('\\u202B', '').replace('\\u202C', '');\r\n\r\n      return '\\u202B' + inputWithoutRTLControl + '\\u202C';\r\n    } else {\r\n      return this.input[inputName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all simple-keyboard inputs\r\n   */\r\n  getAllInputs(): KeyboardInput {\r\n    const output = {} as KeyboardInput;\r\n    const inputNames = Object.keys(this.input);\r\n\r\n    inputNames.forEach((inputName) => {\r\n      output[inputName] = this.getInput(inputName, true);\r\n    });\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Set the keyboard’s input.\r\n   * @param  {string} input the input value\r\n   * @param  {string} inputName optional - the internal input to select\r\n   */\r\n  setInput(input: string, inputName: string = this.options.inputName || this.defaultName, skipSync?: boolean): void {\r\n    this.input[inputName] = input;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (!skipSync && this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Replace the input object (`keyboard.input`)\r\n   * @param  {object} inputObj The input object\r\n   */\r\n  replaceInput(inputObj: KeyboardInput): void {\r\n    this.input = inputObj;\r\n  }\r\n\r\n  /**\r\n   * Set new option or modify existing ones after initialization.\r\n   * @param  {object} options The options to set\r\n   */\r\n  setOptions(options = {}): void {\r\n    const changedOptions = this.changedOptions(options);\r\n    this.options = Object.assign(this.options, options);\r\n\r\n    if (changedOptions.length) {\r\n      if (this.options.debug) {\r\n        console.log('changedOptions', changedOptions);\r\n      }\r\n\r\n      /**\r\n       * Some option changes require adjustments before re-render\r\n       */\r\n      this.onSetOptions(changedOptions);\r\n\r\n      /**\r\n       * Rendering\r\n       */\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detecting changes to non-function options\r\n   * This allows us to ascertain whether a button re-render is needed\r\n   */\r\n  changedOptions(newOptions: Partial<KeyboardOptions>): string[] {\r\n    return Object.keys(newOptions).filter(\r\n      (optionName) => JSON.stringify(newOptions[optionName]) !== JSON.stringify(this.options[optionName])\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Executing actions depending on changed options\r\n   * @param  {object} options The options to set\r\n   */\r\n  onSetOptions(changedOptions: string[] = []): void {\r\n    /**\r\n     * Changed: layoutName\r\n     */\r\n    if (changedOptions.includes('layoutName')) {\r\n      /**\r\n       * Reset candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Changed: layoutCandidatesPageSize, layoutCandidates\r\n     */\r\n    if (changedOptions.includes('layoutCandidatesPageSize') || changedOptions.includes('layoutCandidates')) {\r\n      /**\r\n       * Reset and recreate candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n        this.candidateBox = new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all keyboard rows and reset keyboard values.\r\n   * Used internally between re-renders.\r\n   */\r\n  resetRows(): void {\r\n    if (this.keyboardRowsDOM) {\r\n      this.keyboardRowsDOM.remove();\r\n    }\r\n\r\n    this.keyboardDOM.className = this.keyboardDOMClass;\r\n    this.keyboardDOM.setAttribute('data-skInstance', this.currentInstanceName);\r\n    this.buttonElements = {};\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\r\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\r\n   */\r\n  // eslint-disable-next-line no-unused-vars\r\n  dispatch(callback: (instance: SimpleKeyboard, key?: string) => void): void {\r\n    if (!(window as SKWindow)['SimpleKeyboardInstances']) {\r\n      console.warn(`SimpleKeyboardInstances is not defined. Dispatch cannot be called.`);\r\n      throw new Error('INSTANCES_VAR_ERROR');\r\n    }\r\n\r\n    return Object.keys((window as SKWindow)['SimpleKeyboardInstances']).forEach((key) => {\r\n      callback((window as SKWindow)['SimpleKeyboardInstances'][key], key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  addButtonTheme(buttons: string, className: string): void {\r\n    if (!className || !buttons) return;\r\n\r\n    buttons.split(' ').forEach((button) => {\r\n      className.split(' ').forEach((classNameItem) => {\r\n        if (!this.options.buttonTheme) this.options.buttonTheme = [];\r\n\r\n        let classNameFound = false;\r\n\r\n        /**\r\n         * If class is already defined, we add button to class definition\r\n         */\r\n        this.options.buttonTheme.map((buttonTheme) => {\r\n          if (buttonTheme?.class.split(' ').includes(classNameItem)) {\r\n            classNameFound = true;\r\n\r\n            const buttonThemeArray = buttonTheme.buttons.split(' ');\r\n            if (!buttonThemeArray.includes(button)) {\r\n              classNameFound = true;\r\n              buttonThemeArray.push(button);\r\n              buttonTheme.buttons = buttonThemeArray.join(' ');\r\n            }\r\n          }\r\n          return buttonTheme;\r\n        });\r\n\r\n        /**\r\n         * If class is not defined, we create a new entry\r\n         */\r\n        if (!classNameFound) {\r\n          this.options.buttonTheme.push({\r\n            class: classNameItem,\r\n            buttons: buttons,\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  removeButtonTheme(buttons: string, className: string): void {\r\n    /**\r\n     * When called with empty parameters, remove all button themes\r\n     */\r\n    if (!buttons && !className) {\r\n      this.options.buttonTheme = [];\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * If buttons are passed and buttonTheme has items\r\n     */\r\n    if (buttons && Array.isArray(this.options.buttonTheme) && this.options.buttonTheme.length) {\r\n      const buttonArray = buttons.split(' ');\r\n      buttonArray.forEach((button) => {\r\n        this.options?.buttonTheme?.map((buttonTheme, index) => {\r\n          /**\r\n           * If className is set, we affect the buttons only for that class\r\n           * Otherwise, we afect all classes\r\n           */\r\n          if ((buttonTheme && className && className.includes(buttonTheme.class)) || !className) {\r\n            const filteredButtonArray = buttonTheme?.buttons.split(' ').filter((item) => item !== button);\r\n\r\n            /**\r\n             * If buttons left, return them, otherwise, remove button Theme\r\n             */\r\n            if (buttonTheme && filteredButtonArray?.length) {\r\n              buttonTheme.buttons = filteredButtonArray.join(' ');\r\n            } else {\r\n              this.options.buttonTheme?.splice(index, 1);\r\n              buttonTheme = null;\r\n            }\r\n          }\r\n\r\n          return buttonTheme;\r\n        });\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\r\n   * @param  {string} button The button layout name to select\r\n   */\r\n  getButtonElement(button: string): KeyboardElement | KeyboardElement[] | undefined {\r\n    let output;\r\n\r\n    const buttonArr = this.buttonElements[button];\r\n    if (buttonArr) {\r\n      if (buttonArr.length > 1) {\r\n        output = buttonArr;\r\n      } else {\r\n        output = buttonArr[0];\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * This handles the \"inputPattern\" option\r\n   * by checking if the provided inputPattern passes\r\n   */\r\n  inputPatternIsValid(inputVal: string): boolean {\r\n    const inputPatternRaw = this.options.inputPattern;\r\n    let inputPattern;\r\n\r\n    /**\r\n     * Check if input pattern is global or targeted to individual inputs\r\n     */\r\n    if (inputPatternRaw instanceof RegExp) {\r\n      inputPattern = inputPatternRaw;\r\n    } else {\r\n      inputPattern = inputPatternRaw[this.options.inputName || this.defaultName];\r\n    }\r\n\r\n    if (inputPattern && inputVal) {\r\n      const didInputMatch = inputPattern.test(inputVal);\r\n\r\n      if (this.options.debug) {\r\n        console.log(`inputPattern (\"${inputPattern}\"): ${didInputMatch ? 'passed' : 'did not pass!'}`);\r\n      }\r\n\r\n      return didInputMatch;\r\n    } else {\r\n      /**\r\n       * inputPattern doesn't seem to be set for the current input, or input is empty. Pass.\r\n       */\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the removal of event listers before initializing new ones\r\n   * This is useful when changing options that require a fresh set of event listeners\r\n   */\r\n  handleKeyDownBound!: (event: KeyboardEvent) => void;\r\n  handleKeyUpBound!: (event: KeyboardEvent) => void;\r\n  handleMouseDownBound!: (event: MouseEvent) => void;\r\n  handleMouseUpBound!: (event: MouseEvent) => void;\r\n  handleTouchEndBound!: (event: TouchEvent) => void;\r\n  handleSelectBound!: (event: Event) => void;\r\n  handleSelectionChangeBound!: (event: Event) => void;\r\n\r\n  removeEventListeners(): void {\r\n    console.log('Removing event listeners...');\r\n\r\n    document.removeEventListener('keydown', this.handleKeyDownBound);\r\n    document.removeEventListener('keyup', this.handleKeyUpBound);\r\n    document.removeEventListener('mouseup', this.handleMouseUpBound);\r\n    document.removeEventListener('touchend', this.handleTouchEndBound);\r\n    document.removeEventListener('select', this.handleSelectBound);\r\n\r\n    if (this.options.updateCaretOnSelectionChange) {\r\n      document.removeEventListener('selectionchange', this.handleSelectionChangeBound);\r\n    }\r\n\r\n    this.listenersAdded = false; // Allow re-adding if necessary\r\n  }\r\n  /**\r\n   * Handles simple-keyboard event listeners\r\n   */\r\n  setEventListeners(): void {\r\n    /**\r\n     * Only first instance should set the event listeners\r\n     */\r\n    if (this.isFirstKeyboardInstance || !this.allKeyboardInstances) {\r\n      if (this.options.debug) {\r\n        console.log(`Caret handling started (${this.keyboardDOMClass})`);\r\n      }\r\n\r\n      // LPJr: Prevent duplicate listeners\r\n      if (this.listenersAdded) {\r\n        console.log('Event listeners already set. Skipping...');\r\n        return;\r\n      }\r\n\r\n      // Ensure existing listeners are removed before adding new ones\r\n      this.removeEventListeners();\r\n\r\n      // LPJr: added named event handlers instead of anonymous functions\r\n      this.handleKeyDownBound = this.handleKeyDown.bind(this);\r\n      this.handleKeyUpBound = this.handleKeyUp.bind(this);\r\n      this.handleMouseUpBound = this.handleMouseUp.bind(this);\r\n      this.handleTouchEndBound = () => this.handleTouchEnd(this);\r\n      this.handleSelectBound = () => this.handleSelect(this);\r\n      this.handleSelectionChangeBound = this.handleSelectionChange.bind(this);\r\n\r\n      document.addEventListener('keydown', this.handleKeyDownBound);\r\n      document.addEventListener('keyup', this.handleKeyUpBound);\r\n      document.addEventListener('mouseup', this.handleMouseUpBound);\r\n      document.addEventListener('touchend', this.handleTouchEndBound);\r\n\r\n      if (this.options.updateCaretOnSelectionChange) {\r\n        document.addEventListener('selectionchange', this.handleSelectionChangeBound);\r\n      }\r\n\r\n      document.addEventListener('select', this.handleSelectBound);\r\n\r\n      // Mark listeners as added to prevent duplicates\r\n      this.listenersAdded = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyUp\r\n   */\r\n  handleKeyUp(event: KeyboardHandlerEvent): void {\r\n    if (this.options.physicalKeyboardHighlightPreventDefault) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    this.caretEventHandler(event);\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyUp(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyDown\r\n   */\r\n  handleKeyDown(event: KeyboardHandlerEvent): void {\r\n    if (this.options.physicalKeyboardHighlightPreventDefault) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyDown(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: MouseUp\r\n   */\r\n  handleMouseUp(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: TouchEnd\r\n   */\r\n  /* istanbul ignore next */\r\n  handleTouchEnd(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: Select\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelect(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: SelectionChange\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelectionChange(event: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Firefox is not reporting the correct caret position through this event\r\n     * https://github.com/hodgef/simple-keyboard/issues/1839\r\n     */\r\n    if (navigator.userAgent.includes('Firefox')) {\r\n      return;\r\n    }\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Called by {@link setEventListeners} when an event that warrants a cursor position update is triggered\r\n   */\r\n  caretEventHandler(event: KeyboardHandlerEvent): void {\r\n    let targetTagName: string;\r\n    if (event.target.tagName) {\r\n      targetTagName = event.target.tagName.toLowerCase();\r\n    }\r\n\r\n    this.dispatch((instance) => {\r\n      let isKeyboard =\r\n        event.target === instance.keyboardDOM || (event.target && instance.keyboardDOM.contains(event.target));\r\n\r\n      /**\r\n       * If syncInstanceInputs option is enabled, make isKeyboard match any instance\r\n       * not just the current one\r\n       */\r\n      if (this.options.syncInstanceInputs && Array.isArray(event.path)) {\r\n        isKeyboard = event.path.some((item: HTMLElement) => item?.hasAttribute?.('data-skInstance'));\r\n      }\r\n\r\n      if (\r\n        (targetTagName === 'textarea' ||\r\n          (targetTagName === 'input' && ['text', 'search', 'url', 'tel', 'password'].includes(event.target.type))) &&\r\n        !instance.options.disableCaretPositioning\r\n      ) {\r\n        /**\r\n         * Tracks current cursor position\r\n         * As keys are pressed, text will be added/removed at that position within the input.\r\n         */\r\n        let selectionStart = event.target.selectionStart;\r\n        let selectionEnd = event.target.selectionEnd;\r\n\r\n        if (instance.options.rtl) {\r\n          selectionStart = instance.utilities.getRtlOffset(selectionStart, instance.getInput());\r\n          selectionEnd = instance.utilities.getRtlOffset(selectionEnd, instance.getInput());\r\n        }\r\n\r\n        instance.setCaretPosition(selectionStart, selectionEnd);\r\n\r\n        /**\r\n         * Tracking current input in order to handle caret positioning edge cases\r\n         */\r\n        instance.activeInputElement = event.target;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(\r\n            'Caret at: ',\r\n            instance.getCaretPosition(),\r\n            instance.getCaretPositionEnd(),\r\n            event && event.target.tagName.toLowerCase(),\r\n            `(${instance.keyboardDOMClass})`,\r\n            event?.type\r\n          );\r\n        }\r\n      } else if ((instance.options.disableCaretPositioning || !isKeyboard) && event?.type !== 'selectionchange') {\r\n        /**\r\n         * If we toggled off disableCaretPositioning, we must ensure caretPosition doesn't persist once reactivated.\r\n         */\r\n        instance.setCaretPosition(null);\r\n\r\n        /**\r\n         * Resetting activeInputElement\r\n         */\r\n        instance.activeInputElement = null;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(`Caret position reset due to \"${event?.type}\" event`, event);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute an operation on each button\r\n   */\r\n  recurseButtons(fn: any): void {\r\n    if (!fn) return;\r\n\r\n    Object.keys(this.buttonElements).forEach((buttonName) => this.buttonElements[buttonName].forEach(fn));\r\n  }\r\n\r\n  /**\r\n   * Destroy keyboard listeners and DOM elements\r\n   */\r\n  destroy(): void {\r\n    if (this.options.debug) console.log(`Destroying simple-keyboard instance: ${this.currentInstanceName}`);\r\n\r\n    const { physicalKeyboardHighlightPreventDefault = false } = this.options;\r\n\r\n    /**\r\n     * Remove document listeners\r\n     */\r\n    document.removeEventListener('keyup', this.handleKeyUpBound);\r\n    document.removeEventListener('keydown', this.handleKeyDownBound);\r\n    document.removeEventListener('mouseup', this.handleMouseUpBound);\r\n    document.removeEventListener('touchend', this.handleTouchEndBound);\r\n    document.removeEventListener('select', this.handleSelectBound);\r\n\r\n    // selectionchange is causing caret update issues on Chrome\r\n    // https://github.com/hodgef/simple-keyboard/issues/2346\r\n    if (this.options.updateCaretOnSelectionChange) {\r\n      document.removeEventListener('selectionchange', this.handleSelectionChangeBound);\r\n    }\r\n\r\n    document.onpointerup = null;\r\n    document.ontouchend = null;\r\n    document.ontouchcancel = null;\r\n    document.onmouseup = null;\r\n\r\n    /**\r\n     * Remove buttons\r\n     */\r\n    const deleteButton = (buttonElement: KeyboardElement | null) => {\r\n      if (buttonElement) {\r\n        buttonElement.onpointerdown = null;\r\n        buttonElement.onpointerup = null;\r\n        buttonElement.onpointercancel = null;\r\n        buttonElement.ontouchstart = null;\r\n        buttonElement.ontouchend = null;\r\n        buttonElement.ontouchcancel = null;\r\n        buttonElement.onclick = null;\r\n        buttonElement.onmousedown = null;\r\n        buttonElement.onmouseup = null;\r\n\r\n        buttonElement.remove();\r\n        buttonElement = null;\r\n      }\r\n    };\r\n\r\n    this.recurseButtons(deleteButton);\r\n\r\n    /**\r\n     * Remove wrapper events\r\n     */\r\n    this.keyboardDOM.onpointerdown = null;\r\n    this.keyboardDOM.ontouchstart = null;\r\n    this.keyboardDOM.onmousedown = null;\r\n\r\n    /**\r\n     * Clearing keyboard rows\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Candidate box\r\n     */\r\n    if (this.candidateBox) {\r\n      this.candidateBox.destroy();\r\n      this.candidateBox = null;\r\n    }\r\n\r\n    /**\r\n     * Clearing activeInputElement\r\n     */\r\n    this.activeInputElement = null;\r\n\r\n    /**\r\n     * Removing instance attribute\r\n     */\r\n    this.keyboardDOM.removeAttribute('data-skInstance');\r\n\r\n    /**\r\n     * Clearing keyboardDOM\r\n     */\r\n    this.keyboardDOM.innerHTML = '';\r\n\r\n    /**\r\n     * Remove instance\r\n     */\r\n    (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName] = null;\r\n    delete (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName];\r\n\r\n    /**\r\n     * Reset initialized flag\r\n     */\r\n    this.initialized = false;\r\n  }\r\n\r\n  /**\r\n   * Process buttonTheme option\r\n   */\r\n  getButtonThemeClasses(button: string): string[] {\r\n    const buttonTheme = this.options.buttonTheme;\r\n    let buttonClasses: string[] = [];\r\n\r\n    if (Array.isArray(buttonTheme)) {\r\n      buttonTheme.forEach((themeObj) => {\r\n        if (\r\n          themeObj &&\r\n          themeObj.class &&\r\n          typeof themeObj.class === 'string' &&\r\n          themeObj.buttons &&\r\n          typeof themeObj.buttons === 'string'\r\n        ) {\r\n          const themeObjClasses = themeObj.class.split(' ');\r\n          const themeObjButtons = themeObj.buttons.split(' ');\r\n\r\n          if (themeObjButtons.includes(button)) {\r\n            buttonClasses = [...buttonClasses, ...themeObjClasses];\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonTheme\". Please check the documentation.`, themeObj);\r\n        }\r\n      });\r\n    }\r\n\r\n    return buttonClasses;\r\n  }\r\n\r\n  /**\r\n   * Process buttonAttributes option\r\n   */\r\n  setDOMButtonAttributes(button: string, callback: any): void {\r\n    const buttonAttributes = this.options.buttonAttributes;\r\n\r\n    if (Array.isArray(buttonAttributes)) {\r\n      buttonAttributes.forEach((attrObj) => {\r\n        if (\r\n          attrObj.attribute &&\r\n          typeof attrObj.attribute === 'string' &&\r\n          attrObj.value &&\r\n          typeof attrObj.value === 'string' &&\r\n          attrObj.buttons &&\r\n          typeof attrObj.buttons === 'string'\r\n        ) {\r\n          const attrObjButtons = attrObj.buttons.split(' ');\r\n\r\n          if (attrObjButtons.includes(button)) {\r\n            callback(attrObj.attribute, attrObj.value);\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonAttributes\". Please check the documentation.`, attrObj);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onTouchDeviceDetected() {\r\n    /**\r\n     * Processing autoTouchEvents\r\n     */\r\n    this.processAutoTouchEvents();\r\n\r\n    /**\r\n     * Disabling contextual window on touch devices\r\n     */\r\n    this.disableContextualWindow();\r\n  }\r\n\r\n  /**\r\n   * Disabling contextual window for hg-button\r\n   */\r\n  /* istanbul ignore next */\r\n  disableContextualWindow() {\r\n    window.oncontextmenu = (event: KeyboardHandlerEvent) => {\r\n      if (event.target.classList.contains('hg-button')) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process autoTouchEvents option\r\n   */\r\n  processAutoTouchEvents() {\r\n    if (this.options.autoUseTouchEvents) {\r\n      this.options.useTouchEvents = true;\r\n\r\n      if (this.options.debug) {\r\n        console.log(`autoUseTouchEvents: Touch device detected, useTouchEvents enabled.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n   */\r\n  onInit() {\r\n    if (this.options.debug) {\r\n      console.log(`${this.keyboardDOMClass} Initialized`);\r\n    }\r\n\r\n    /**\r\n     * setEventListeners\r\n     */\r\n    this.setEventListeners();\r\n\r\n    if (typeof this.options.onInit === 'function') this.options.onInit(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeFirstRender() {\r\n    /**\r\n     * Performing actions when touch device detected\r\n     */\r\n    if (this.utilities.isTouchDevice()) {\r\n      this.onTouchDeviceDetected();\r\n    }\r\n\r\n    if (typeof this.options.beforeFirstRender === 'function') this.options.beforeFirstRender(this);\r\n\r\n    /**\r\n     * Notify about PointerEvents usage\r\n     */\r\n    if (\r\n      this.isFirstKeyboardInstance &&\r\n      this.utilities.pointerEventsSupported() &&\r\n      !this.options.useTouchEvents &&\r\n      !this.options.useMouseEvents\r\n    ) {\r\n      if (this.options.debug) {\r\n        console.log('Using PointerEvents as it is supported by this browser');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Notify about touch events usage\r\n     */\r\n    if (this.options.useTouchEvents) {\r\n      if (this.options.debug) {\r\n        console.log('useTouchEvents has been enabled. Only touch events will be used.');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeRender() {\r\n    if (typeof this.options.beforeRender === 'function') this.options.beforeRender(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n   */\r\n  onRender() {\r\n    if (typeof this.options.onRender === 'function') this.options.onRender(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once all modules have been loaded\r\n   */\r\n  onModulesLoaded() {\r\n    if (typeof this.options.onModulesLoaded === 'function') this.options.onModulesLoaded(this);\r\n  }\r\n\r\n  /**\r\n   * Register module\r\n   */\r\n  registerModule = (name: string, initCallback: any) => {\r\n    if (!this.modules[name]) this.modules[name] = {};\r\n\r\n    initCallback(this.modules[name]);\r\n  };\r\n\r\n  /**\r\n   * Load modules\r\n   */\r\n  loadModules() {\r\n    if (Array.isArray(this.options.modules)) {\r\n      this.options.modules.forEach((KeyboardModule) => {\r\n        const keyboardModule = this.utilities.isConstructor(KeyboardModule) ?\r\n          new KeyboardModule(this) : KeyboardModule(this);\r\n\r\n        keyboardModule.init && keyboardModule.init(this);\r\n      });\r\n\r\n      this.keyboardPluginClasses = 'modules-loaded';\r\n\r\n      this.render();\r\n      this.onModulesLoaded();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get module prop\r\n   */\r\n  getModuleProp(name: string, prop: string) {\r\n    if (!this.modules[name]) return false;\r\n\r\n    return this.modules[name][prop];\r\n  }\r\n\r\n  /**\r\n   * getModulesList\r\n   */\r\n  getModulesList() {\r\n    return Object.keys(this.modules);\r\n  }\r\n\r\n  /**\r\n   * Parse Row DOM containers\r\n   */\r\n  parseRowDOMContainers(\r\n    rowDOM: HTMLDivElement,\r\n    rowIndex: number,\r\n    containerStartIndexes: number[],\r\n    containerEndIndexes: number[]\r\n  ) {\r\n    const rowDOMArray = Array.from(rowDOM.children);\r\n    let removedElements = 0;\r\n\r\n    if (rowDOMArray.length) {\r\n      containerStartIndexes.forEach((startIndex, arrIndex) => {\r\n        const endIndex = containerEndIndexes[arrIndex];\r\n\r\n        /**\r\n         * If there exists a respective end index\r\n         * if end index comes after start index\r\n         */\r\n        if (!endIndex || !(endIndex > startIndex)) {\r\n          return false;\r\n        }\r\n\r\n        /**\r\n         * Updated startIndex, endIndex\r\n         * This is since the removal of buttons to place a single button container\r\n         * results in a modified array size\r\n         */\r\n        const updated_startIndex = startIndex - removedElements;\r\n        const updated_endIndex = endIndex - removedElements;\r\n\r\n        /**\r\n         * Create button container\r\n         */\r\n        const containerDOM = document.createElement('div');\r\n        containerDOM.className += 'hg-button-container';\r\n        const containerUID = `${this.options.layoutName}-r${rowIndex}c${arrIndex}`;\r\n        containerDOM.setAttribute('data-skUID', containerUID);\r\n\r\n        /**\r\n         * Taking elements due to be inserted into container\r\n         */\r\n        const containedElements = rowDOMArray.splice(updated_startIndex, updated_endIndex - updated_startIndex + 1);\r\n        removedElements += updated_endIndex - updated_startIndex;\r\n\r\n        /**\r\n         * Inserting elements to container\r\n         */\r\n        containedElements.forEach((element) => containerDOM.appendChild(element));\r\n\r\n        /**\r\n         * Adding container at correct position within rowDOMArray\r\n         */\r\n        rowDOMArray.splice(updated_startIndex, 0, containerDOM);\r\n\r\n        /**\r\n         * Clearing old rowDOM children structure\r\n         */\r\n        rowDOM.innerHTML = '';\r\n\r\n        /**\r\n         * Appending rowDOM new children list\r\n         */\r\n        rowDOMArray.forEach((element) => rowDOM.appendChild(element));\r\n\r\n        if (this.options.debug) {\r\n          console.log('rowDOMContainer', containedElements, updated_startIndex, updated_endIndex, removedElements + 1);\r\n        }\r\n      });\r\n    }\r\n\r\n    return rowDOM;\r\n  }\r\n\r\n  /**\r\n   * getKeyboardClassString\r\n   */\r\n  getKeyboardClassString = (...baseDOMClasses: any[]) => {\r\n    const keyboardClasses = [this.keyboardDOMClass, ...baseDOMClasses].filter((DOMClass) => !!DOMClass);\r\n\r\n    return keyboardClasses.join(' ');\r\n  };\r\n\r\n  /**\r\n   * Renders rows and buttons as per options\r\n   */\r\n  render() {\r\n    /**\r\n     * Clear keyboard\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Calling beforeFirstRender\r\n     */\r\n    if (!this.initialized) {\r\n      this.beforeFirstRender();\r\n    }\r\n\r\n    /**\r\n     * Calling beforeRender\r\n     */\r\n    this.beforeRender();\r\n\r\n    const layoutClass = `hg-layout-${this.options.layoutName}`;\r\n    const layout = this.options.layout || getDefaultLayout();\r\n    const useTouchEvents = this.options.useTouchEvents || false;\r\n    const useTouchEventsClass = useTouchEvents ? 'hg-touch-events' : '';\r\n    const useMouseEvents = this.options.useMouseEvents || false;\r\n    const disableRowButtonContainers = this.options.disableRowButtonContainers;\r\n\r\n    /**\r\n     * Adding themeClass, layoutClass to keyboardDOM\r\n     */\r\n    this.keyboardDOM.className = this.getKeyboardClassString(\r\n      this.options.theme,\r\n      layoutClass,\r\n      this.keyboardPluginClasses,\r\n      useTouchEventsClass\r\n    );\r\n\r\n    /**\r\n     * Adding keyboard identifier\r\n     */\r\n    this.keyboardDOM.setAttribute('data-skInstance', this.currentInstanceName);\r\n\r\n    /**\r\n     * Create row wrapper\r\n     */\r\n    this.keyboardRowsDOM = document.createElement('div');\r\n    this.keyboardRowsDOM.className = 'hg-rows';\r\n\r\n    /**\r\n     * Iterating through each row\r\n     */\r\n    layout[this.options.layoutName || this.defaultName].forEach((row: string, rIndex: number) => {\r\n      let rowArray = row.split(' ');\r\n\r\n      /**\r\n       * Enforce excludeFromLayout\r\n       */\r\n      if (\r\n        this.options.excludeFromLayout &&\r\n        this.options.excludeFromLayout[this.options.layoutName || this.defaultName]\r\n      ) {\r\n        rowArray = rowArray.filter(\r\n          (buttonName) =>\r\n            this.options.excludeFromLayout &&\r\n            !this.options.excludeFromLayout[this.options.layoutName || this.defaultName].includes(buttonName)\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Creating empty row\r\n       */\r\n      let rowDOM = document.createElement('div');\r\n      rowDOM.className += 'hg-row';\r\n\r\n      /**\r\n       * Tracking container indicators in rows\r\n       */\r\n      const containerStartIndexes: number[] = [];\r\n      const containerEndIndexes: number[] = [];\r\n\r\n      /**\r\n       * Iterating through each button in row\r\n       */\r\n      rowArray.forEach((button, bIndex) => {\r\n        /**\r\n         * Check if button has a container indicator\r\n         */\r\n        const buttonHasContainerStart =\r\n          !disableRowButtonContainers && typeof button === 'string' && button.length > 1 && button.indexOf('[') === 0;\r\n\r\n        const buttonHasContainerEnd =\r\n          !disableRowButtonContainers &&\r\n          typeof button === 'string' &&\r\n          button.length > 1 &&\r\n          button.indexOf(']') === button.length - 1;\r\n\r\n        /**\r\n         * Save container start index, if applicable\r\n         */\r\n        if (buttonHasContainerStart) {\r\n          containerStartIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\[/g, '');\r\n        }\r\n\r\n        if (buttonHasContainerEnd) {\r\n          containerEndIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\]/g, '');\r\n        }\r\n\r\n        /**\r\n         * Processing button options\r\n         */\r\n        const fctBtnClass = this.utilities.getButtonClass(button);\r\n        const buttonDisplayName = this.utilities.getButtonDisplayName(\r\n          button,\r\n          this.options.display,\r\n          this.options.mergeDisplay\r\n        );\r\n\r\n        /**\r\n         * Creating button\r\n         */\r\n        const buttonType = this.options.useButtonTag ? 'button' : 'div';\r\n        const buttonDOM = document.createElement(buttonType);\r\n        buttonDOM.className += `hg-button ${fctBtnClass}`;\r\n\r\n        /**\r\n         * Adding buttonTheme\r\n         */\r\n        buttonDOM.classList.add(...this.getButtonThemeClasses(button));\r\n\r\n        /**\r\n         * Adding buttonAttributes\r\n         */\r\n        this.setDOMButtonAttributes(button, (attribute: string, value: string) => {\r\n          buttonDOM.setAttribute(attribute, value);\r\n        });\r\n\r\n        this.activeButtonClass = 'hg-activeButton';\r\n\r\n        /**\r\n         * Handle button click event\r\n         */\r\n        /* istanbul ignore next */\r\n        if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n          /**\r\n           * Handle PointerEvents\r\n           */\r\n          buttonDOM.onpointerdown = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonClicked(button, e);\r\n            this.handleButtonMouseDown(button, e);\r\n          };\r\n          buttonDOM.onpointerup = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n          buttonDOM.onpointercancel = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n        } else {\r\n          /**\r\n           * Fallback for browsers not supporting PointerEvents\r\n           */\r\n          if (useTouchEvents) {\r\n            /**\r\n             * Handle touch events\r\n             */\r\n            buttonDOM.ontouchstart = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonClicked(button, e);\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.ontouchend = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n            buttonDOM.ontouchcancel = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          } else {\r\n            /**\r\n             * Handle mouse events\r\n             */\r\n            buttonDOM.onclick = (e: KeyboardHandlerEvent) => {\r\n              this.setMouseHold(false);\r\n              /**\r\n               * Fire button handler in onclick for compatibility reasons\r\n               * This fires handler before onKeyReleased, therefore when that option is set we will fire the handler\r\n               * in onmousedown instead\r\n               */\r\n              if (\r\n                typeof this.options.onKeyReleased !== 'function' &&\r\n                !(this.options.useMouseEvents && this.options.clickOnMouseDown)\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n            };\r\n            buttonDOM.onmousedown = (e: KeyboardHandlerEvent) => {\r\n              /**\r\n               * Fire button handler for onKeyReleased use-case\r\n               */\r\n              if (\r\n                (typeof this.options.onKeyReleased === 'function' ||\r\n                  (this.options.useMouseEvents && this.options.clickOnMouseDown)) &&\r\n                !this.isMouseHold\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.onmouseup = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          }\r\n        }\r\n\r\n        /**\r\n         * Adding identifier\r\n         */\r\n        buttonDOM.setAttribute('data-skBtn', button);\r\n\r\n        /**\r\n         * Adding unique id\r\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\r\n         */\r\n        const buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\r\n        buttonDOM.setAttribute('data-skBtnUID', buttonUID);\r\n\r\n        /**\r\n         * Adding button label to button\r\n         */\r\n        const buttonSpanDOM = document.createElement('span');\r\n        buttonSpanDOM.innerHTML = buttonDisplayName;\r\n        buttonDOM.appendChild(buttonSpanDOM);\r\n\r\n        /**\r\n         * Adding to buttonElements\r\n         */\r\n        if (!this.buttonElements[button]) this.buttonElements[button] = [];\r\n\r\n        this.buttonElements[button].push(buttonDOM);\r\n\r\n        /**\r\n         * Appending button to row\r\n         */\r\n        rowDOM.appendChild(buttonDOM);\r\n      });\r\n\r\n      /**\r\n       * Parse containers in row\r\n       */\r\n      rowDOM = this.parseRowDOMContainers(rowDOM, rIndex, containerStartIndexes, containerEndIndexes);\r\n\r\n      /**\r\n       * Appending row to hg-rows\r\n       */\r\n      this.keyboardRowsDOM.appendChild(rowDOM);\r\n    });\r\n\r\n    /**\r\n     * Appending row to keyboard\r\n     */\r\n    this.keyboardDOM.appendChild(this.keyboardRowsDOM);\r\n\r\n    /**\r\n     * Calling onRender\r\n     */\r\n    this.onRender();\r\n\r\n    if (!this.initialized) {\r\n      /**\r\n       * Ensures that onInit and beforeFirstRender are only called once per instantiation\r\n       */\r\n      this.initialized = true;\r\n\r\n      /**\r\n       * Handling parent events\r\n       */\r\n      /* istanbul ignore next */\r\n      if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n        document.onpointerup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onpointerdown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (useTouchEvents) {\r\n        /**\r\n         * Handling ontouchend, ontouchcancel\r\n         */\r\n        document.ontouchend = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        document.ontouchcancel = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n\r\n        this.keyboardDOM.ontouchstart = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (!useTouchEvents) {\r\n        /**\r\n         * Handling mouseup\r\n         */\r\n        document.onmouseup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onmousedown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      }\r\n\r\n      /**\r\n       * Calling onInit\r\n       */\r\n      this.onInit();\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboard;\r\n","import SimpleKeyboard from \"./components/Keyboard\";\r\nexport { SimpleKeyboard };\r\nexport default SimpleKeyboard;\r\n"],"names":["Utilities","_ref","getOptions","getCaretPosition","getCaretPositionEnd","dispatch","_classCallCheck","_defineProperty","button","length","this","bindMethods","key","value","includes","buttonTypeClass","getButtonType","buttonWithoutBraces","replace","buttonNormalized","concat","display","arguments","undefined","Object","assign","getDefaultDisplay","input","caretPos","caretPosEnd","moveCaret","options","commonParams","output","removeAt","apply","removeForwardsAt","addStringAt","tabCharOnTab","newLineOnEnter","Number","isInteger","debug","console","log","minus","newCaretPos","updateCaretPosAction","instance","setCaretPosition","caretPosition","source","str","position","positionEnd","slice","join","isMaxLengthReached","updateCaretPos","emojiMatchedReg","substring","match","substr","inputObj","updatedInput","maxLength","currentInput","inputName","condition","maxLengthReached","_typeof","Boolean","window","navigator","maxTouchPoints","PointerEvent","toLowerCase","trim","split","reduce","word","toUpperCase","arr","size","_toConsumableArray","Array","Math","ceil","map","_","i","index","newIndex","startMarkerIndex","indexOf","f","Reflect","construct","String","e","myClass","_step","_iterator","_createForOfIteratorHelper","getOwnPropertyNames","prototype","s","n","done","myMethod","bind","err","PhysicalKeyboard","_this","altKey","ctrlKey","shiftKey","code","keyCodeToKey","keyCode","layout","_this$getOptions","lastLayout","layoutJSON","mapLayoutToEventCodes","extractAndPadLayout","default","shift","shiftActive","capslockActive","buttonPressed","getSimpleKeyboardLayoutKey","buttonDOM","buttonName","standardButtonPressed","getButtonElement","functionButtonPressed","_buttonDOM$","_buttonDOM$$onpointer","_buttonDOM","_buttonDOM$onpointerd","applyButtonStyle","buttonElement","style","background","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","isArray","forEach","physicalKeyboardHighlightPress","physicalKeyboardHighlightPressUsePointerEvents","onpointerdown","call","physicalKeyboardHighlightPressUseClick","_buttonDOM$2","click","handleButtonClicked","_buttonDOM$3","_buttonDOM$3$onpointe","_buttonDOM$onpointeru","removeAttribute","onpointerup","_options$layout$defau","_options$layout","currentLayout","_options$layout2","ShiftLeft","ShiftRight","ControlLeft","ControlRight","AltLeft","AltRight","MetaLeft","MetaRight","Backspace","CapsLock","Enter","Tab","toString","normal","qwertyRowLengths","processedLayout","_i","_arr","type","rows","row","push","mappedLayout","qwertyRows","rowIndex","colIndex","_layout$default$rowIn","_layout$shift$rowInde","eventCode","normalKey","CandidateBox","utilities","pageSize","layoutCandidatesPageSize","candidateBoxElement","remove","pageIndex","_ref2","candidateValue","targetElement","onSelect","candidateListPages","chunkArray","renderPage","nbPages","onItemSelected","selectedCandidate","destroy","_ref3","_this$candidateBoxEle","_this2","document","createElement","className","candidateListULElement","candidateListItem","_this2$options$displa","candidateListLIElement","getMouseEvent","mouseEvent","useTouchEvents","TouchEvent","MouseEvent","defineProperty","innerHTML","ontouchstart","onclick","appendChild","isPrevBtnElementActive","prevBtnElement","classList","add","prevBtnElementClickAction","isNextBtnElementActive","nextBtnElement","nextBtnElementClickAction","prepend","SimpleKeyboard","selectorOrOptions","keyboardOptions","keyboardDOMClass","keyboardDOM","querySelector","HTMLDivElement","warn","Error","caretPositionEnd","name","initCallback","modules","_len","baseDOMClasses","_key","filter","DOMClass","_this$handleParams","handleParams","_this$handleParams$op","_objectSpread","layoutName","theme","preventMouseDownDefault","enableLayoutCandidates","excludeFromLayout","keyboardPluginClasses","_this$options$inputNa","defaultName","buttonElements","currentInstanceName","camelCase","allKeyboardInstances","keyboardInstanceNames","keys","isFirstKeyboardInstance","physicalKeyboard","candidateBox","render","loadModules","endPosition","_this$options","layoutCandidatesObj","layoutCandidates","layoutCandidatesCaseSensitiveMatch","layoutCandidate","inputSubstr","regexp","RegExp","escapeRegex","matchAll","candidateKey","sort","a","b","_this3","show","_this3$options","disableCandidateNormalization","enableLayoutCandidatesKeyPress","candidateStr","normalize","beforeInputUpdate","getInput","initialCaretPosition","newInputSubstr","newInput","caretPositionDiff","newCaretPosition","setInput","onKeyPress","onChange","onChangeAll","getAllInputs","_this$options2","_this$options2$inputN","getUpdatedInput","isStandardButton","activeInputElement","setSelectionRange","inputPattern","inputPatternIsValid","handleMaxLength","newInputValue","syncInstanceInputs","target","_this$candidateBox","_this$getInputCandida","getInputCandidates","showCandidatesBox","isMouseHold","_this4","preventDefault","stopMouseDownPropagation","stopPropagation","activeButtonClass","holdInteractionTimeout","clearTimeout","holdTimeout","setMouseHold","disableButtonHold","setTimeout","getMouseHold","handleButtonHold","_this5","preventMouseUpDefault","stopMouseUpPropagation","contains","recurseButtons","onKeyReleased","_this6","_this7","replaceInput","skipSync","rtl","_this8","changedOptions","onSetOptions","newOptions","_this9","optionName","JSON","stringify","keyboardRowsDOM","setAttribute","callback","buttons","_this0","classNameItem","buttonTheme","classNameFound","buttonThemeArray","class","_this1","_this1$options","_buttonTheme","_this1$options$button","filteredButtonArray","item","splice","buttonArr","inputVal","inputPatternRaw","didInputMatch","test","removeEventListener","handleKeyDownBound","handleKeyUpBound","handleMouseUpBound","handleTouchEndBound","handleSelectBound","updateCaretOnSelectionChange","handleSelectionChangeBound","listenersAdded","_this10","removeEventListeners","handleKeyDown","handleKeyUp","handleMouseUp","handleTouchEnd","handleSelect","handleSelectionChange","addEventListener","event","physicalKeyboardHighlightPreventDefault","caretEventHandler","physicalKeyboardHighlight","handleHighlightKeyUp","handleHighlightKeyDown","userAgent","targetTagName","_this11","tagName","isKeyboard","path","some","_item$hasAttribute","hasAttribute","disableCaretPositioning","selectionStart","selectionEnd","getRtlOffset","fn","_this12","ontouchend","ontouchcancel","onmouseup","onpointercancel","onmousedown","resetRows","initialized","buttonClasses","themeObj","themeObjClasses","buttonAttributes","attrObj","attribute","processAutoTouchEvents","disableContextualWindow","oncontextmenu","autoUseTouchEvents","setEventListeners","onInit","isTouchDevice","onTouchDeviceDetected","beforeFirstRender","pointerEventsSupported","useMouseEvents","beforeRender","onRender","onModulesLoaded","_this13","KeyboardModule","keyboardModule","isConstructor","init","prop","rowDOM","containerStartIndexes","containerEndIndexes","_this14","rowDOMArray","from","children","removedElements","startIndex","arrIndex","endIndex","updated_startIndex","updated_endIndex","containerDOM","containerUID","containedElements","element","_this15","layoutClass","useTouchEventsClass","disableRowButtonContainers","getKeyboardClassString","rIndex","rowArray","bIndex","_buttonDOM$classList","buttonHasContainerStart","buttonHasContainerEnd","fctBtnClass","getButtonClass","buttonDisplayName","getButtonDisplayName","mergeDisplay","buttonType","useButtonTag","getButtonThemeClasses","setDOMButtonAttributes","handleButtonMouseDown","handleButtonMouseUp","clickOnMouseDown","buttonUID","buttonSpanDOM","parseRowDOMContainers","handleKeyboardContainerMouseDown"],"sourceRoot":""}