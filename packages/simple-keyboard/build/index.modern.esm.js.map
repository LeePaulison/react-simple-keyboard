{"version":3,"file":"index.modern.esm.js","mappings":"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","sources":["webpack://simple-keyboard/webpack/bootstrap","webpack://simple-keyboard/webpack/runtime/define property getters","webpack://simple-keyboard/webpack/runtime/hasOwnProperty shorthand","webpack://simple-keyboard/./src/lib/services/Utilities.ts","webpack://simple-keyboard/./src/lib/services/PhysicalKeyboard.ts","webpack://simple-keyboard/./src/lib/services/KeyboardLayout.ts","webpack://simple-keyboard/./src/lib/components/CandidateBox.ts","webpack://simple-keyboard/./src/lib/components/Keyboard.ts","webpack://simple-keyboard/./src/lib/index.modern.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { KeyboardInput } from \"./../interfaces\";\r\nimport { KeyboardOptions, UtilitiesParams } from \"../interfaces\";\r\n\r\n/**\r\n * Utility Service\r\n */\r\nclass Utilities {\r\n  getOptions: () => KeyboardOptions;\r\n  getCaretPosition: () => number | null;\r\n  getCaretPositionEnd: () => number | null;\r\n  dispatch: any;\r\n  maxLengthReached!: boolean;\r\n\r\n  /**\r\n   * Creates an instance of the Utility service\r\n   */\r\n  constructor({ getOptions, getCaretPosition, getCaretPositionEnd, dispatch }: UtilitiesParams) {\r\n    this.getOptions = getOptions;\r\n    this.getCaretPosition = getCaretPosition;\r\n    this.getCaretPositionEnd = getCaretPositionEnd;\r\n    this.dispatch = dispatch;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(Utilities, this);\r\n  }\r\n\r\n  /**\r\n   * Retrieve button type\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The button type\r\n   */\r\n  getButtonType(button: string): string {\r\n    return button.includes(\"{\") && button.includes(\"}\") && button !== \"{//}\" ? \"functionBtn\" : \"standardBtn\";\r\n  }\r\n\r\n  /**\r\n   * Adds default classes to a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The classes to be added to the button\r\n   */\r\n  getButtonClass(button: string): string {\r\n    const buttonTypeClass = this.getButtonType(button);\r\n    const buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    let buttonNormalized = \"\";\r\n\r\n    if (buttonTypeClass !== \"standardBtn\") buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\r\n\r\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\r\n  }\r\n\r\n  /**\r\n   * Default button display labels\r\n   */\r\n  getDefaultDisplay() {\r\n    return {\r\n      \"{bksp}\": \"backspace\",\r\n      \"{backspace}\": \"backspace\",\r\n      \"{enter}\": \"< enter\",\r\n      \"{shift}\": \"shift\",\r\n      \"{shiftleft}\": \"shift\",\r\n      \"{shiftright}\": \"shift\",\r\n      \"{alt}\": \"alt\",\r\n      \"{s}\": \"shift\",\r\n      \"{tab}\": \"tab\",\r\n      \"{lock}\": \"caps\",\r\n      \"{capslock}\": \"caps\",\r\n      \"{accept}\": \"Submit\",\r\n      \"{space}\": \" \",\r\n      \"{//}\": \" \",\r\n      \"{esc}\": \"esc\",\r\n      \"{escape}\": \"esc\",\r\n      \"{f1}\": \"f1\",\r\n      \"{f2}\": \"f2\",\r\n      \"{f3}\": \"f3\",\r\n      \"{f4}\": \"f4\",\r\n      \"{f5}\": \"f5\",\r\n      \"{f6}\": \"f6\",\r\n      \"{f7}\": \"f7\",\r\n      \"{f8}\": \"f8\",\r\n      \"{f9}\": \"f9\",\r\n      \"{f10}\": \"f10\",\r\n      \"{f11}\": \"f11\",\r\n      \"{f12}\": \"f12\",\r\n      \"{numpaddivide}\": \"/\",\r\n      \"{numlock}\": \"lock\",\r\n      \"{arrowup}\": \"↑\",\r\n      \"{arrowleft}\": \"←\",\r\n      \"{arrowdown}\": \"↓\",\r\n      \"{arrowright}\": \"→\",\r\n      \"{prtscr}\": \"print\",\r\n      \"{scrolllock}\": \"scroll\",\r\n      \"{pause}\": \"pause\",\r\n      \"{insert}\": \"ins\",\r\n      \"{home}\": \"home\",\r\n      \"{pageup}\": \"up\",\r\n      \"{delete}\": \"del\",\r\n      \"{forwarddelete}\": \"del\",\r\n      \"{end}\": \"end\",\r\n      \"{pagedown}\": \"down\",\r\n      \"{numpadmultiply}\": \"*\",\r\n      \"{numpadsubtract}\": \"-\",\r\n      \"{numpadadd}\": \"+\",\r\n      \"{numpadenter}\": \"enter\",\r\n      \"{period}\": \".\",\r\n      \"{numpaddecimal}\": \".\",\r\n      \"{numpad0}\": \"0\",\r\n      \"{numpad1}\": \"1\",\r\n      \"{numpad2}\": \"2\",\r\n      \"{numpad3}\": \"3\",\r\n      \"{numpad4}\": \"4\",\r\n      \"{numpad5}\": \"5\",\r\n      \"{numpad6}\": \"6\",\r\n      \"{numpad7}\": \"7\",\r\n      \"{numpad8}\": \"8\",\r\n      \"{numpad9}\": \"9\",\r\n    };\r\n  }\r\n  /**\r\n   * Returns the display (label) name for a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {object} display The provided display option\r\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\r\n   */\r\n  getButtonDisplayName(button: string, display: KeyboardOptions[\"display\"], mergeDisplay = false) {\r\n    if (mergeDisplay) {\r\n      display = Object.assign({}, this.getDefaultDisplay(), display);\r\n    } else {\r\n      display = display || this.getDefaultDisplay();\r\n    }\r\n\r\n    return display[button] || button;\r\n  }\r\n\r\n  /**\r\n   * Returns the updated input resulting from clicking a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {string} input The input string\r\n   * @param  {number} caretPos The cursor's current position\r\n   * @param  {number} caretPosEnd The cursor's current end position\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  getUpdatedInput(button: string, input: string, caretPos: any, caretPosEnd = caretPos, moveCaret = false) {\r\n    const options = this.getOptions();\r\n    const commonParams: [number | undefined, number | undefined, boolean] = [caretPos, caretPosEnd, moveCaret];\r\n\r\n    let output = input;\r\n\r\n    if ((button === \"{bksp}\" || button === \"{backspace}\") && output.length > 0) {\r\n      output = this.removeAt(output, ...commonParams);\r\n    } else if ((button === \"{delete}\" || button === \"{forwarddelete}\") && output.length > 0) {\r\n      output = this.removeForwardsAt(output, ...commonParams);\r\n    } else if (button === \"{space}\") output = this.addStringAt(output, \" \", ...commonParams);\r\n    else if (button === \"{tab}\" && !(typeof options.tabCharOnTab === \"boolean\" && options.tabCharOnTab === false)) {\r\n      output = this.addStringAt(output, \"\\t\", ...commonParams);\r\n    } else if ((button === \"{enter}\" || button === \"{numpadenter}\") && options.newLineOnEnter)\r\n      output = this.addStringAt(output, \"\\n\", ...commonParams);\r\n    else if (button.includes(\"numpad\") && Number.isInteger(Number(button[button.length - 2]))) {\r\n      output = this.addStringAt(output, button[button.length - 2], ...commonParams);\r\n    } else if (button === \"{numpaddivide}\") output = this.addStringAt(output, \"/\", ...commonParams);\r\n    else if (button === \"{numpadmultiply}\") output = this.addStringAt(output, \"*\", ...commonParams);\r\n    else if (button === \"{numpadsubtract}\") output = this.addStringAt(output, \"-\", ...commonParams);\r\n    else if (button === \"{numpadadd}\") output = this.addStringAt(output, \"+\", ...commonParams);\r\n    else if (button === \"{numpaddecimal}\") output = this.addStringAt(output, \".\", ...commonParams);\r\n    else if (button === \"{\" || button === \"}\") output = this.addStringAt(output, button, ...commonParams);\r\n    else if (!button.includes(\"{\") && !button.includes(\"}\")) output = this.addStringAt(output, button, ...commonParams);\r\n\r\n    if (options.debug) {\r\n      console.log(\"Input will be: \" + output);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Moves the cursor position by a given amount\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPos(length: number, minus = false) {\r\n    const newCaretPos = this.updateCaretPosAction(length, minus);\r\n\r\n    this.dispatch((instance: any) => {\r\n      instance.setCaretPosition(newCaretPos);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Action method of updateCaretPos\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPosAction(length: number, minus = false) {\r\n    const options = this.getOptions();\r\n    let caretPosition = this.getCaretPosition();\r\n\r\n    if (caretPosition != null) {\r\n      if (minus) {\r\n        if (caretPosition > 0) caretPosition = caretPosition - length;\r\n      } else {\r\n        caretPosition = caretPosition + length;\r\n      }\r\n    }\r\n\r\n    if (options.debug) {\r\n      console.log(\"Caret at:\", caretPosition);\r\n    }\r\n\r\n    return caretPosition;\r\n  }\r\n\r\n  /**\r\n   * Adds a string to the input at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {string} str The string to add\r\n   * @param  {number} position The (cursor) position where the string should be added\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  addStringAt(source: string, str: string, position = source.length, positionEnd = source.length, moveCaret = false) {\r\n    let output;\r\n\r\n    if (!position && position !== 0) {\r\n      output = source + str;\r\n    } else {\r\n      output = [source.slice(0, position), str, source.slice(positionEnd)].join(\"\");\r\n\r\n      /**\r\n       * Avoid caret position change when maxLength is set\r\n       */\r\n      if (!this.isMaxLengthReached()) {\r\n        if (moveCaret) this.updateCaretPos(str.length);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Check whether the button is a standard button\r\n   */\r\n  isStandardButton = (button: string) => button && !(button[0] === \"{\" && button[button.length - 1] === \"}\");\r\n\r\n  /**\r\n   * Removes an amount of characters before a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  removeAt(source: string, position = source.length, positionEnd = source.length, moveCaret = false) {\r\n    if (position === 0 && positionEnd === 0) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      let prevTwoChars;\r\n      let emojiMatched;\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      if (position && position >= 0) {\r\n        prevTwoChars = source.substring(position - 2, position);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.substr(0, position - 2) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.substr(0, position - 1) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      } else {\r\n        prevTwoChars = source.slice(-2);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.slice(0, -2);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.slice(0, -1);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Removes an amount of characters after a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   */\r\n  removeForwardsAt(\r\n    source: string,\r\n    position: number = source.length,\r\n    positionEnd: number = source.length,\r\n    moveCaret = false\r\n  ) {\r\n    if (!source?.length || position === null) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      const nextTwoChars = source.substring(position, position + 2);\r\n      const emojiMatched = nextTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.substr(0, position) + source.substr(position + 2);\r\n      } else {\r\n        output = source.substr(0, position) + source.substr(position + 1);\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\r\n   *\r\n   * @param  {object} inputObj\r\n   * @param  {string} updatedInput\r\n   */\r\n  handleMaxLength(inputObj: KeyboardInput, updatedInput: string) {\r\n    const options = this.getOptions();\r\n    const maxLength = options.maxLength;\r\n    const currentInput = inputObj[options.inputName || \"default\"];\r\n    const condition = updatedInput.length - 1 >= maxLength;\r\n\r\n    if (\r\n      /**\r\n       * If pressing this button won't add more characters\r\n       * We exit out of this limiter function\r\n       */\r\n      updatedInput.length <= currentInput.length\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (Number.isInteger(maxLength)) {\r\n      if (options.debug) {\r\n        console.log(\"maxLength (num) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        /**\r\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\r\n         */\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (typeof maxLength === \"object\") {\r\n      const condition = updatedInput.length - 1 >= maxLength[options.inputName || \"default\"];\r\n\r\n      if (options.debug) {\r\n        console.log(\"maxLength (obj) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of maxLengthReached\r\n   */\r\n  isMaxLengthReached() {\r\n    return Boolean(this.maxLengthReached);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a touch device is being used\r\n   */\r\n  isTouchDevice() {\r\n    return \"ontouchstart\" in window || navigator.maxTouchPoints;\r\n  }\r\n\r\n  /**\r\n   * Determines whether pointer events are supported\r\n   */\r\n  pointerEventsSupported() {\r\n    return !!window.PointerEvent;\r\n  }\r\n\r\n  /**\r\n   * Bind all methods in a given class\r\n   */\r\n\r\n  static bindMethods(myClass: any, instance: any) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (const myMethod of Object.getOwnPropertyNames(myClass.prototype)) {\r\n      const excludeMethod = myMethod === \"constructor\" || myMethod === \"bindMethods\";\r\n      if (!excludeMethod) {\r\n        instance[myMethod] = instance[myMethod].bind(instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transforms an arbitrary string to camelCase\r\n   *\r\n   * @param  {string} str The string to transform.\r\n   */\r\n  camelCase(str: string): string {\r\n    if (!str) return \"\";\r\n\r\n    return str\r\n      .toLowerCase()\r\n      .trim()\r\n      .split(/[.\\-_\\s]/g)\r\n      .reduce((str, word) => (word.length ? str + word[0].toUpperCase() + word.slice(1) : str));\r\n  }\r\n\r\n  /**\r\n   * Split array into chunks\r\n   */\r\n  chunkArray<T>(arr: T[], size: number): T[][] {\r\n    return [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));\r\n  }\r\n\r\n  /**\r\n   * Escape regex input\r\n   */\r\n  escapeRegex(str: string) {\r\n    return str.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\r\n  }\r\n\r\n  /**\r\n   * Calculate caret position offset when using rtl option\r\n   */\r\n  getRtlOffset(index: number, input: string) {\r\n    let newIndex = index;\r\n    const startMarkerIndex = input.indexOf(\"\\u202B\");\r\n    const endMarkerIndex = input.indexOf(\"\\u202C\");\r\n\r\n    if (startMarkerIndex < index && startMarkerIndex != -1) {\r\n      newIndex--;\r\n    }\r\n    if (endMarkerIndex < index && startMarkerIndex != -1) {\r\n      newIndex--;\r\n    }\r\n\r\n    return newIndex < 0 ? 0 : newIndex;\r\n  }\r\n\r\n  /**\r\n   * Reusable empty function\r\n   */\r\n  static noop = () => {};\r\n\r\n  /**\r\n   * Check if a function is a constructor\r\n   */\r\n  isConstructor(f: any) {\r\n    try {\r\n      Reflect.construct(String, [], f);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default Utilities;\r\n","import { KeyboardOptions, PhysicalKeyboardParams } from '../interfaces';\r\nimport Utilities from '../services/Utilities';\r\nimport { getDefaultLayout } from '../services/KeyboardLayout';\r\n\r\n/**\r\n * Layout Key Mapping Interface\r\n */\r\ninterface LayoutKeyMapping {\r\n  normal: string | number;\r\n  shift: string | number;\r\n}\r\n\r\n/**\r\n * Physical Keyboard Service\r\n */\r\nclass PhysicalKeyboard {\r\n  getOptions: () => KeyboardOptions;\r\n  dispatch: any;\r\n  layoutJSON: Record<string, LayoutKeyMapping> | null = null;\r\n  lastLayout = '';\r\n  shiftActive = false;\r\n  capslockActive = false;\r\n\r\n  /**\r\n   * Creates an instance of the PhysicalKeyboard service\r\n   */\r\n  constructor({ dispatch, getOptions }: PhysicalKeyboardParams) {\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.dispatch = dispatch;\r\n    this.getOptions = getOptions;\r\n\r\n    if (this.getOptions() && this.getOptions().layout) {\r\n      this.lastLayout = this.getOptions()?.layout?.default?.[1] || '';\r\n      const layout = this.getOptions().layout;\r\n      if (layout) {\r\n        this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(layout));\r\n      }\r\n    } else {\r\n      this.lastLayout = getDefaultLayout().default[1];\r\n      this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(getDefaultLayout()));\r\n    }\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(PhysicalKeyboard, this);\r\n  }\r\n\r\n  handleHighlightKeyDown(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    // if (options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)) {\r\n    //   e.preventDefault();\r\n    //   e.stopImmediatePropagation();\r\n    // }\r\n\r\n    if ((e.code === 'ShiftLeft' || e.code === 'ShiftRight') && !this.shiftActive) {\r\n      this.shiftActive = !this.shiftActive;\r\n    }\r\n\r\n    if (e.code === 'CapsLock') {\r\n      this.capslockActive = !this.capslockActive;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const standardButtonPressed = instance.getButtonElement(buttonPressed);\r\n      const functionButtonPressed = instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      let buttonDOM;\r\n      let buttonName: string;\r\n\r\n      if (standardButtonPressed) {\r\n        buttonDOM = standardButtonPressed;\r\n        buttonName = buttonPressed;\r\n      } else if (functionButtonPressed) {\r\n        buttonDOM = functionButtonPressed;\r\n        buttonName = `{${buttonPressed}}`;\r\n      } else {\r\n        return;\r\n      }\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        buttonElement.style.background = options.physicalKeyboardHighlightBgColor || '#dadce4';\r\n        buttonElement.style.color = options.physicalKeyboardHighlightTextColor || 'black';\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM[0]?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM[0]?.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  handleHighlightKeyUp(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    // if (options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)) {\r\n    //   e.preventDefault();\r\n    //   e.stopImmediatePropagation();\r\n    // }\r\n\r\n    if (e.code === 'ShiftLeft' || e.code === 'ShiftRight') {\r\n      this.shiftActive = false;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const buttonDOM = instance.getButtonElement(buttonPressed) || instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        if (buttonElement.removeAttribute) {\r\n          buttonElement.removeAttribute('style');\r\n        }\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM[0]?.onpointerup?.(e);\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM?.onpointerup?.(e);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\r\n   * @param  {object} e The KeyboardEvent\r\n   * @returns {string} The simple-keyboard layout key\r\n   */\r\n  getSimpleKeyboardLayoutKey(e: KeyboardEvent): string {\r\n    let output = '';\r\n\r\n    const options = this.getOptions();\r\n    const currentLayout = options?.layout?.default?.[1] ?? getDefaultLayout().default[1];\r\n    if (this.lastLayout !== currentLayout) {\r\n      this.lastLayout = currentLayout || '';\r\n\r\n      const layout = options?.layout ?? getDefaultLayout();\r\n      this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(layout));\r\n    }\r\n\r\n    if (this.layoutJSON && this.layoutJSON[e.code]) {\r\n      // Determine whether to use normal or shift based on Shift & CapsLock state\r\n      output =\r\n        this.shiftActive || this.capslockActive\r\n          ? this.layoutJSON[e.code].shift.toString()\r\n          : this.layoutJSON[e.code].normal.toString();\r\n    } else {\r\n      // Only allow fallback for known safe keys\r\n      const fallbackKeys = ['Backspace', 'Enter', 'Tab', 'Escape'];\r\n      if (fallbackKeys.includes(e.key)) {\r\n        output = e.key.toLowerCase();\r\n      } else {\r\n        // Log unexpected fallbacks for analysis\r\n        console.warn('Unmapped key event (code fallback failed):', {\r\n          code: e.code,\r\n          key: e.key,\r\n          keyCode: e.keyCode,\r\n          layoutJSON: this.layoutJSON,\r\n        });\r\n\r\n        output = ''; // or optionally 'unmapped'\r\n      }\r\n    }\r\n\r\n    // Normalize left/right variations\r\n    const normalizeKeyMap: Record<string, string> = {\r\n      shiftleft: 'shift',\r\n      shiftright: 'shift',\r\n      controlleft: 'ctrl',\r\n      controlright: 'ctrl',\r\n      altleft: 'alt',\r\n      altright: 'alt',\r\n      metaleft: 'meta',\r\n      metaright: 'meta',\r\n      backspace: 'bksp',\r\n      capslock: 'lock',\r\n      enter: 'enter',\r\n      tab: 'tab',\r\n    };\r\n\r\n    return normalizeKeyMap[output.toLowerCase()] || (output.length > 1 ? output.toLowerCase() : output);\r\n  }\r\n\r\n  /**\r\n   * Retrieve key from keyCode\r\n   */\r\n  keyCodeToKey(keyCode: number): string {\r\n    return (\r\n      {\r\n        8: 'Backspace',\r\n        9: 'Tab',\r\n        13: 'Enter',\r\n        16: 'Shift',\r\n        17: 'Ctrl',\r\n        18: 'Alt',\r\n        19: 'Pause',\r\n        20: 'CapsLock',\r\n        27: 'Esc',\r\n        32: 'Space',\r\n        33: 'PageUp',\r\n        34: 'PageDown',\r\n        35: 'End',\r\n        36: 'Home',\r\n        37: 'ArrowLeft',\r\n        38: 'ArrowUp',\r\n        39: 'ArrowRight',\r\n        40: 'ArrowDown',\r\n        45: 'Insert',\r\n        46: 'Delete',\r\n        48: '0',\r\n        49: '1',\r\n        50: '2',\r\n        51: '3',\r\n        52: '4',\r\n        53: '5',\r\n        54: '6',\r\n        55: '7',\r\n        56: '8',\r\n        57: '9',\r\n        65: 'A',\r\n        66: 'B',\r\n        67: 'C',\r\n        68: 'D',\r\n        69: 'E',\r\n        70: 'F',\r\n        71: 'G',\r\n        72: 'H',\r\n        73: 'I',\r\n        74: 'J',\r\n        75: 'K',\r\n        76: 'L',\r\n        77: 'M',\r\n        78: 'N',\r\n        79: 'O',\r\n        80: 'P',\r\n        81: 'Q',\r\n        82: 'R',\r\n        83: 'S',\r\n        84: 'T',\r\n        85: 'U',\r\n        86: 'V',\r\n        87: 'W',\r\n        88: 'X',\r\n        89: 'Y',\r\n        90: 'Z',\r\n        91: 'Meta',\r\n        96: 'Numpad0',\r\n        97: 'Numpad1',\r\n        98: 'Numpad2',\r\n        99: 'Numpad3',\r\n        100: 'Numpad4',\r\n        101: 'Numpad5',\r\n        102: 'Numpad6',\r\n        103: 'Numpad7',\r\n        104: 'Numpad8',\r\n        105: 'Numpad9',\r\n        106: 'NumpadMultiply',\r\n        107: 'NumpadAdd',\r\n        109: 'NumpadSubtract',\r\n        110: 'NumpadDecimal',\r\n        111: 'NumpadDivide',\r\n        112: 'F1',\r\n        113: 'F2',\r\n        114: 'F3',\r\n        115: 'F4',\r\n        116: 'F5',\r\n        117: 'F6',\r\n        118: 'F7',\r\n        119: 'F8',\r\n        120: 'F9',\r\n        121: 'F10',\r\n        122: 'F11',\r\n        123: 'F12',\r\n        144: 'NumLock',\r\n        145: 'ScrollLock',\r\n        186: ';',\r\n        187: '=',\r\n        188: ',',\r\n        189: '-',\r\n        190: '.',\r\n        191: '/',\r\n        192: '`',\r\n        219: '[',\r\n        220: '\\\\',\r\n        221: ']',\r\n        222: \"'\",\r\n      }[keyCode] || ''\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Extracts and pads a layout object\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with padding\r\n   */\r\n  extractAndPadLayout(layout: Record<string, string[]>): Record<string, (string | number)[][]> {\r\n    const qwertyRowLengths = [14, 14, 13, 12, 3]; // Number of keys per QWERTY row\r\n\r\n    const processedLayout: Record<string, (string | number)[][]> = { default: [], shift: [] };\r\n\r\n    for (const type of ['default', 'shift']) {\r\n      if (!layout[type]) continue; // Skip if layout type is missing\r\n\r\n      const rows = layout[type].map((row) => row.split(' '));\r\n\r\n      for (let i = 0; i < qwertyRowLengths.length; i++) {\r\n        processedLayout[type][i] = rows[i] ? [...rows[i]] : [];\r\n        while (processedLayout[type][i].length < qwertyRowLengths[i]) {\r\n          processedLayout[type][i].push(-1); // Fill missing spots\r\n        }\r\n      }\r\n    }\r\n\r\n    return processedLayout;\r\n  }\r\n\r\n  /**\r\n   * Maps a layout object to event codes\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with event codes\r\n   */\r\n\r\n  mapLayoutToEventCodes(layout: Record<string, (string | number)[][]>): Record<string, LayoutKeyMapping> {\r\n    const mappedLayout: Record<string, LayoutKeyMapping> = {};\r\n\r\n    const qwertyRows = [\r\n      [\r\n        'Backquote',\r\n        'Digit1',\r\n        'Digit2',\r\n        'Digit3',\r\n        'Digit4',\r\n        'Digit5',\r\n        'Digit6',\r\n        'Digit7',\r\n        'Digit8',\r\n        'Digit9',\r\n        'Digit0',\r\n        'Minus',\r\n        'Equal',\r\n        'Backspace',\r\n      ],\r\n      [\r\n        'Tab',\r\n        'KeyQ',\r\n        'KeyW',\r\n        'KeyE',\r\n        'KeyR',\r\n        'KeyT',\r\n        'KeyY',\r\n        'KeyU',\r\n        'KeyI',\r\n        'KeyO',\r\n        'KeyP',\r\n        'BracketLeft',\r\n        'BracketRight',\r\n        'Backslash',\r\n      ],\r\n      [\r\n        'CapsLock',\r\n        'KeyA',\r\n        'KeyS',\r\n        'KeyD',\r\n        'KeyF',\r\n        'KeyG',\r\n        'KeyH',\r\n        'KeyJ',\r\n        'KeyK',\r\n        'KeyL',\r\n        'Semicolon',\r\n        'Quote',\r\n        'Enter',\r\n      ],\r\n      ['ShiftLeft', 'KeyZ', 'KeyX', 'KeyC', 'KeyV', 'KeyB', 'KeyN', 'KeyM', 'Comma', 'Period', 'Slash', 'ShiftRight'],\r\n      ['ControlLeft', 'AltLeft', 'Space'],\r\n    ];\r\n\r\n    for (let rowIndex = 0; rowIndex < qwertyRows.length; rowIndex++) {\r\n      for (let colIndex = 0; colIndex < qwertyRows[rowIndex].length; colIndex++) {\r\n        const eventCode = qwertyRows[rowIndex][colIndex];\r\n        const normalKey = layout.default[rowIndex][colIndex] ?? '';\r\n        const shiftKey = layout.shift[rowIndex][colIndex] ?? '';\r\n\r\n        mappedLayout[eventCode] = {\r\n          normal: normalKey !== -1 ? normalKey : '',\r\n          shift: shiftKey !== -1 ? shiftKey : '',\r\n        };\r\n      }\r\n    }\r\n\r\n    return mappedLayout;\r\n  }\r\n\r\n  isModifierKey = (e: KeyboardEvent): boolean => {\r\n    return (\r\n      e.altKey ||\r\n      e.ctrlKey ||\r\n      e.shiftKey ||\r\n      ['Tab', 'CapsLock', 'Esc', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(\r\n        e.code || e.key || this.keyCodeToKey(e?.keyCode)\r\n      )\r\n    );\r\n  };\r\n}\r\n\r\nexport default PhysicalKeyboard;\r\n","import { KeyboardLayoutObject } from \"../interfaces\";\r\n\r\nexport const getDefaultLayout = (): KeyboardLayoutObject => {\r\n  return {\r\n    default: [\r\n      \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\r\n      \"{tab} q w e r t y u i o p [ ] \\\\\",\r\n      \"{lock} a s d f g h j k l ; ' {enter}\",\r\n      \"{shift} z x c v b n m , . / {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n    shift: [\r\n      \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\r\n      \"{tab} Q W E R T Y U I O P { } |\",\r\n      '{lock} A S D F G H J K L : \" {enter}',\r\n      \"{shift} Z X C V B N M < > ? {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n  };\r\n};\r\n","import \"./css/CandidateBox.css\";\r\n\r\nimport Utilities from \"../services/Utilities\";\r\nimport {\r\n  CandidateBoxParams,\r\n  CandidateBoxRenderParams,\r\n  CandidateBoxShowParams,\r\n  KeyboardOptions,\r\n} from \"./../interfaces\";\r\n\r\nclass CandidateBox {\r\n  utilities: Utilities;\r\n  options: KeyboardOptions;\r\n  candidateBoxElement!: HTMLDivElement;\r\n  pageIndex = 0;\r\n  pageSize: number;\r\n\r\n  constructor({ utilities, options }: CandidateBoxParams) {\r\n    this.utilities = utilities;\r\n    this.options = options;\r\n    Utilities.bindMethods(CandidateBox, this);\r\n    this.pageSize = this.utilities.getOptions().layoutCandidatesPageSize || 5;\r\n  }\r\n\r\n  destroy() {\r\n    if (this.candidateBoxElement) {\r\n      this.candidateBoxElement.remove();\r\n      this.pageIndex = 0;\r\n    }\r\n  }\r\n\r\n  show({\r\n    candidateValue,\r\n    targetElement,\r\n    onSelect,\r\n  }: CandidateBoxShowParams): void {\r\n    if (!candidateValue || !candidateValue.length) {\r\n      return;\r\n    }\r\n\r\n    const candidateListPages = this.utilities.chunkArray(\r\n      candidateValue.split(\" \"),\r\n      this.pageSize\r\n    );\r\n\r\n    this.renderPage({\r\n      candidateListPages,\r\n      targetElement,\r\n      pageIndex: this.pageIndex,\r\n      nbPages: candidateListPages.length,\r\n      onItemSelected: (selectedCandidate: string, e: MouseEvent) => {\r\n        onSelect(selectedCandidate, e);\r\n        this.destroy();\r\n      },\r\n    });\r\n  }\r\n\r\n  renderPage({\r\n    candidateListPages,\r\n    targetElement,\r\n    pageIndex,\r\n    nbPages,\r\n    onItemSelected,\r\n  }: CandidateBoxRenderParams) {\r\n    // Remove current candidate box, if any\r\n    this.candidateBoxElement?.remove();\r\n\r\n    // Create candidate box element\r\n    this.candidateBoxElement = document.createElement(\"div\");\r\n    this.candidateBoxElement.className = \"hg-candidate-box\";\r\n\r\n    // Candidate box list\r\n    const candidateListULElement = document.createElement(\"ul\");\r\n    candidateListULElement.className = \"hg-candidate-box-list\";\r\n\r\n    // Create Candidate box list items\r\n    candidateListPages[pageIndex].forEach((candidateListItem) => {\r\n      const candidateListLIElement = document.createElement(\"li\");\r\n      const getMouseEvent = () => {\r\n        const mouseEvent = new (this.options.useTouchEvents ? TouchEvent : MouseEvent)(\"click\");\r\n        Object.defineProperty(mouseEvent, \"target\", {\r\n          value: candidateListLIElement,\r\n        });\r\n        return mouseEvent;\r\n      };\r\n\r\n      candidateListLIElement.className = \"hg-candidate-box-list-item\";\r\n      candidateListLIElement.innerHTML = this.options.display?.[candidateListItem] || candidateListItem;\r\n\r\n      if(this.options.useTouchEvents) {\r\n        candidateListLIElement.ontouchstart = (e: any) =>\r\n          onItemSelected(candidateListItem, e || getMouseEvent());\r\n      } else {\r\n        candidateListLIElement.onclick = (e = getMouseEvent() as MouseEvent) =>\r\n          onItemSelected(candidateListItem, e);\r\n      }\r\n\r\n      // Append list item to ul\r\n      candidateListULElement.appendChild(candidateListLIElement);\r\n    });\r\n\r\n    // Add previous button\r\n    const isPrevBtnElementActive = pageIndex > 0;\r\n    const prevBtnElement = document.createElement(\"div\");\r\n    prevBtnElement.classList.add(\"hg-candidate-box-prev\");\r\n    isPrevBtnElementActive &&\r\n      prevBtnElement.classList.add(\"hg-candidate-box-btn-active\");\r\n\r\n    const prevBtnElementClickAction = () => {\r\n      if (!isPrevBtnElementActive) return;\r\n      this.renderPage({\r\n        candidateListPages,\r\n        targetElement,\r\n        pageIndex: pageIndex - 1,\r\n        nbPages,\r\n        onItemSelected,\r\n      });\r\n    };\r\n\r\n    if(this.options.useTouchEvents) {\r\n      prevBtnElement.ontouchstart = prevBtnElementClickAction;\r\n    } else {\r\n      prevBtnElement.onclick = prevBtnElementClickAction;\r\n    }\r\n    \r\n    this.candidateBoxElement.appendChild(prevBtnElement);\r\n\r\n    // Add elements to container\r\n    this.candidateBoxElement.appendChild(candidateListULElement);\r\n\r\n    // Add next button\r\n    const isNextBtnElementActive = pageIndex < nbPages - 1;\r\n    const nextBtnElement = document.createElement(\"div\");\r\n    nextBtnElement.classList.add(\"hg-candidate-box-next\");\r\n    isNextBtnElementActive &&\r\n      nextBtnElement.classList.add(\"hg-candidate-box-btn-active\");\r\n\r\n    const nextBtnElementClickAction = () => {\r\n      if (!isNextBtnElementActive) return;\r\n      this.renderPage({\r\n        candidateListPages,\r\n        targetElement,\r\n        pageIndex: pageIndex + 1,\r\n        nbPages,\r\n        onItemSelected,\r\n      });\r\n    };\r\n\r\n    if(this.options.useTouchEvents) {\r\n      nextBtnElement.ontouchstart = nextBtnElementClickAction;\r\n    } else {\r\n      nextBtnElement.onclick = nextBtnElementClickAction;\r\n    }\r\n\r\n    this.candidateBoxElement.appendChild(nextBtnElement);\r\n\r\n    // Append candidate box to target element\r\n    targetElement.prepend(this.candidateBoxElement);\r\n  }\r\n}\r\n\r\nexport default CandidateBox;\r\n","import './css/Keyboard.css';\r\n\r\nimport { getDefaultLayout } from '../services/KeyboardLayout';\r\nimport PhysicalKeyboard from '../services/PhysicalKeyboard';\r\nimport Utilities from '../services/Utilities';\r\nimport {\r\n  KeyboardOptions,\r\n  KeyboardInput,\r\n  KeyboardButtonElements,\r\n  KeyboardHandlerEvent,\r\n  KeyboardElement,\r\n  SKWindow,\r\n} from '../interfaces';\r\nimport CandidateBox from './CandidateBox';\r\n\r\n/**\r\n * Root class for simple-keyboard.\r\n * This class:\r\n * - Parses the options\r\n * - Renders the rows and buttons\r\n * - Handles button functionality\r\n */\r\nclass SimpleKeyboard {\r\n  input!: KeyboardInput;\r\n  options!: KeyboardOptions;\r\n  utilities!: Utilities;\r\n  caretPosition!: number | null;\r\n  caretPositionEnd!: number | null;\r\n  keyboardDOM!: KeyboardElement;\r\n  keyboardPluginClasses!: string;\r\n  keyboardDOMClass!: string;\r\n  buttonElements!: KeyboardButtonElements;\r\n  currentInstanceName!: string;\r\n  allKeyboardInstances!: { [key: string]: SimpleKeyboard };\r\n  keyboardInstanceNames!: string[];\r\n  isFirstKeyboardInstance!: boolean;\r\n  physicalKeyboard!: PhysicalKeyboard;\r\n  modules!: { [key: string]: any };\r\n  activeButtonClass!: string;\r\n  holdInteractionTimeout!: number;\r\n  holdTimeout!: number;\r\n  isMouseHold!: boolean;\r\n  initialized!: boolean;\r\n  candidateBox!: CandidateBox | null;\r\n  keyboardRowsDOM!: KeyboardElement;\r\n  defaultName = 'default';\r\n  activeInputElement: HTMLInputElement | HTMLTextAreaElement | null = null;\r\n  listenersAdded = false;\r\n\r\n  /**\r\n   * Creates an instance of SimpleKeyboard\r\n   * @param {Array} selectorOrOptions If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\r\n   */\r\n  constructor(selectorOrOptions?: string | HTMLDivElement | KeyboardOptions, keyboardOptions?: KeyboardOptions) {\r\n    if (typeof window === 'undefined') return;\r\n\r\n    const { keyboardDOMClass, keyboardDOM, options = {} } = this.handleParams(selectorOrOptions, keyboardOptions);\r\n\r\n    /**\r\n     * Initializing Utilities\r\n     */\r\n    this.utilities = new Utilities({\r\n      getOptions: this.getOptions,\r\n      getCaretPosition: this.getCaretPosition,\r\n      getCaretPositionEnd: this.getCaretPositionEnd,\r\n      dispatch: this.dispatch,\r\n    });\r\n\r\n    /**\r\n     * Caret position\r\n     */\r\n    this.caretPosition = null;\r\n\r\n    /**\r\n     * Caret position end\r\n     */\r\n    this.caretPositionEnd = null;\r\n\r\n    /**\r\n     * Processing options\r\n     */\r\n    this.keyboardDOM = keyboardDOM;\r\n\r\n    /**\r\n     * @type {object}\r\n     * @property {object} layout Modify the keyboard layout.\r\n     * @property {string} layoutName Specifies which layout should be used.\r\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\r\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\r\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\r\n     * @property {array} buttonTheme A prop to add your own css classes to one or several buttons.\r\n     * @property {array} buttonAttributes A prop to add your own attributes to one or several buttons.\r\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\r\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\r\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\r\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\r\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\r\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\r\n     * @property {boolean} physicalKeyboardHighlightPress Presses keys highlighted by physicalKeyboardHighlight\r\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\r\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\r\n     * @property {boolean} physicalKeyboardHighlightPressUseClick Whether physicalKeyboardHighlightPress should use clicks to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPressUsePointerEvents Whether physicalKeyboardHighlightPress should use pointer events to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPreventDefault Whether physicalKeyboardHighlight should use preventDefault to disable default browser actions.\r\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\r\n     * @property {boolean} preventMouseUpDefault Calling preventDefault for the mouseup events.\r\n     * @property {boolean} stopMouseDownPropagation Stops pointer down events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {boolean} stopMouseUpPropagation Stops pointer up events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\r\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\r\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n     * @property {function(keyboard: Keyboard):void} beforeInputUpdate Perform an action before any input change\r\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\r\n     * @property {boolean} useButtonTag Render buttons as a button element instead of a div element.\r\n     * @property {boolean} disableCaretPositioning A prop to ensure characters are always be added/removed at the end of the string.\r\n     * @property {object} inputPattern Restrains input(s) change to the defined regular expression pattern.\r\n     * @property {boolean} useTouchEvents Instructs simple-keyboard to use touch events instead of click events.\r\n     * @property {boolean} autoUseTouchEvents Enable useTouchEvents automatically when touch device is detected.\r\n     * @property {boolean} useMouseEvents Opt out of PointerEvents handling, falling back to the prior mouse event logic.\r\n     * @property {function} destroy Clears keyboard listeners and DOM elements.\r\n     * @property {boolean} disableButtonHold Disable button hold action.\r\n     * @property {boolean} rtl Adds unicode right-to-left control characters to input return values.\r\n     * @property {function} onKeyReleased Executes the callback function on key release.\r\n     * @property {array} modules Module classes to be loaded by simple-keyboard.\r\n     * @property {boolean} enableLayoutCandidates Enable input method editor candidate list support.\r\n     * @property {object} excludeFromLayout Buttons to exclude from layout\r\n     * @property {number} layoutCandidatesPageSize Determines size of layout candidate list\r\n     * @property {boolean} layoutCandidatesCaseSensitiveMatch Determines whether layout candidate match should be case sensitive.\r\n     * @property {boolean} disableCandidateNormalization Disables the automatic normalization for selected layout candidates\r\n     * @property {boolean} enableLayoutCandidatesKeyPress Enables onKeyPress triggering for layoutCandidate items\r\n     * @property {boolean} updateCaretOnSelectionChange Updates caret when selectionchange event is fired\r\n     * @property {boolean} clickOnMouseDown When useMouseEvents is enabled, this option allows you to trigger a button click event on mousedown\r\n     */\r\n    this.options = {\r\n      layoutName: 'default',\r\n      theme: 'hg-theme-default',\r\n      inputName: 'default',\r\n      preventMouseDownDefault: false,\r\n      enableLayoutCandidates: true,\r\n      excludeFromLayout: {},\r\n      ...options,\r\n    };\r\n\r\n    /**\r\n     * @type {object} Classes identifying loaded plugins\r\n     */\r\n    this.keyboardPluginClasses = '';\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(SimpleKeyboard, this);\r\n\r\n    /**\r\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\r\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\r\n     * @example\r\n     * // To get entered input\r\n     * const input = keyboard.getInput();\r\n     *\r\n     * // To clear entered input.\r\n     * keyboard.clearInput();\r\n     *\r\n     * @type {object}\r\n     * @property {object} default Default SimpleKeyboard internal input.\r\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\r\n     */\r\n    const { inputName = this.defaultName } = this.options;\r\n    this.input = {};\r\n    this.input[inputName] = '';\r\n\r\n    /**\r\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\r\n     */\r\n    this.keyboardDOMClass = keyboardDOMClass;\r\n\r\n    /**\r\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\r\n     */\r\n    this.buttonElements = {};\r\n\r\n    /**\r\n     * Simple-keyboard Instances\r\n     * This enables multiple simple-keyboard support with easier management\r\n     */\r\n    if (!(window as SKWindow)['SimpleKeyboardInstances']) (window as SKWindow)['SimpleKeyboardInstances'] = {};\r\n\r\n    this.currentInstanceName = this.utilities.camelCase(this.keyboardDOMClass);\r\n    (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName] = this;\r\n\r\n    /**\r\n     * Instance vars\r\n     */\r\n    this.allKeyboardInstances = (window as SKWindow)['SimpleKeyboardInstances'];\r\n    this.keyboardInstanceNames = Object.keys((window as SKWindow)['SimpleKeyboardInstances']);\r\n    this.isFirstKeyboardInstance = this.keyboardInstanceNames[0] === this.currentInstanceName;\r\n\r\n    /**\r\n     * Physical Keyboard support\r\n     */\r\n    this.physicalKeyboard = new PhysicalKeyboard({\r\n      dispatch: this.dispatch,\r\n      getOptions: this.getOptions,\r\n    });\r\n\r\n    /**\r\n     * Initializing CandidateBox\r\n     */\r\n    this.candidateBox = this.options.enableLayoutCandidates\r\n      ? new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        })\r\n      : null;\r\n\r\n    /**\r\n     * Rendering keyboard\r\n     */\r\n    if (this.keyboardDOM) this.render();\r\n    else {\r\n      console.warn(`\".${keyboardDOMClass}\" was not found in the DOM.`);\r\n      throw new Error('KEYBOARD_DOM_ERROR');\r\n    }\r\n\r\n    /**\r\n     * Modules\r\n     */\r\n    this.modules = {};\r\n    this.loadModules();\r\n  }\r\n\r\n  /**\r\n   * parseParams\r\n   */\r\n  handleParams = (\r\n    selectorOrOptions?: string | HTMLDivElement | KeyboardOptions,\r\n    keyboardOptions?: KeyboardOptions\r\n  ): {\r\n    keyboardDOMClass: string;\r\n    keyboardDOM: KeyboardElement;\r\n    options: Partial<KeyboardOptions | undefined>;\r\n  } => {\r\n    let keyboardDOMClass;\r\n    let keyboardDOM;\r\n    let options;\r\n\r\n    /**\r\n     * If first parameter is a string:\r\n     * Consider it as an element's class\r\n     */\r\n    if (typeof selectorOrOptions === 'string') {\r\n      keyboardDOMClass = selectorOrOptions.split('.').join('');\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * If first parameter is an KeyboardElement\r\n       * Consider it as the keyboard DOM element\r\n       */\r\n    } else if (selectorOrOptions instanceof HTMLDivElement) {\r\n      /**\r\n       * This element must have a class, otherwise throw\r\n       */\r\n      if (!selectorOrOptions.className) {\r\n        console.warn('Any DOM element passed as parameter must have a class.');\r\n        throw new Error('KEYBOARD_DOM_CLASS_ERROR');\r\n      }\r\n\r\n      keyboardDOMClass = selectorOrOptions.className.split(' ')[0];\r\n      keyboardDOM = selectorOrOptions;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * Otherwise, search for .simple-keyboard DOM element\r\n       */\r\n    } else {\r\n      keyboardDOMClass = 'simple-keyboard';\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = selectorOrOptions;\r\n    }\r\n\r\n    return {\r\n      keyboardDOMClass,\r\n      keyboardDOM,\r\n      options,\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Getters\r\n   */\r\n  getOptions = (): KeyboardOptions => this.options;\r\n  getCaretPosition = (): number | null => this.caretPosition;\r\n  getCaretPositionEnd = (): number | null => this.caretPositionEnd;\r\n\r\n  /**\r\n   * Changes the internal caret position\r\n   * @param {number} position The caret's start position\r\n   * @param {number} positionEnd The caret's end position\r\n   */\r\n  setCaretPosition(position: number | null, endPosition = position): void {\r\n    this.caretPosition = position;\r\n    this.caretPositionEnd = endPosition;\r\n  }\r\n\r\n  /**\r\n   * Retrieve the candidates for a given input\r\n   * @param input The input string to check\r\n   */\r\n  getInputCandidates(input: string): { candidateKey: string; candidateValue: string } | Record<string, never> {\r\n    const { layoutCandidates: layoutCandidatesObj, layoutCandidatesCaseSensitiveMatch } = this.options;\r\n\r\n    if (!layoutCandidatesObj || typeof layoutCandidatesObj !== 'object') {\r\n      return {};\r\n    }\r\n\r\n    const layoutCandidates = Object.keys(layoutCandidatesObj).filter((layoutCandidate: string) => {\r\n      const inputSubstr = input.substring(0, this.getCaretPositionEnd() || 0) || input;\r\n      const regexp = new RegExp(\r\n        `${this.utilities.escapeRegex(layoutCandidate)}$`,\r\n        layoutCandidatesCaseSensitiveMatch ? 'g' : 'gi'\r\n      );\r\n      const matches = [...inputSubstr.matchAll(regexp)];\r\n      return !!matches.length;\r\n    });\r\n\r\n    if (layoutCandidates.length > 1) {\r\n      const candidateKey = layoutCandidates.sort((a, b) => b.length - a.length)[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else if (layoutCandidates.length) {\r\n      const candidateKey = layoutCandidates[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows a suggestion box with a list of candidate words\r\n   * @param candidates The chosen candidates string as defined in the layoutCandidates option\r\n   * @param targetElement The element next to which the candidates box will be shown\r\n   */\r\n  showCandidatesBox(candidateKey: string, candidateValue: string, targetElement: KeyboardElement): void {\r\n    if (this.candidateBox) {\r\n      this.candidateBox.show({\r\n        candidateValue,\r\n        targetElement,\r\n        onSelect: (selectedCandidate: string, e: MouseEvent) => {\r\n          const { layoutCandidatesCaseSensitiveMatch, disableCandidateNormalization, enableLayoutCandidatesKeyPress } =\r\n            this.options;\r\n\r\n          let candidateStr = selectedCandidate;\r\n\r\n          if (!disableCandidateNormalization) {\r\n            /**\r\n             * Making sure that our suggestions are not composed characters\r\n             */\r\n            candidateStr = selectedCandidate.normalize('NFD');\r\n          }\r\n\r\n          /**\r\n           * Perform an action before any input change\r\n           */\r\n          if (typeof this.options.beforeInputUpdate === 'function') {\r\n            this.options.beforeInputUpdate(this);\r\n          }\r\n\r\n          const currentInput = this.getInput(this.options.inputName, true);\r\n          const initialCaretPosition = this.getCaretPositionEnd() || 0;\r\n          const inputSubstr = currentInput.substring(0, initialCaretPosition || 0) || currentInput;\r\n\r\n          const regexp = new RegExp(\r\n            `${this.utilities.escapeRegex(candidateKey)}$`,\r\n            layoutCandidatesCaseSensitiveMatch ? 'g' : 'gi'\r\n          );\r\n          const newInputSubstr = inputSubstr.replace(regexp, candidateStr);\r\n          const newInput = currentInput.replace(inputSubstr, newInputSubstr);\r\n\r\n          const caretPositionDiff = newInputSubstr.length - inputSubstr.length;\r\n          let newCaretPosition = (initialCaretPosition || currentInput.length) + caretPositionDiff;\r\n\r\n          if (newCaretPosition < 0) newCaretPosition = 0;\r\n\r\n          this.setInput(newInput, this.options.inputName, true);\r\n          this.setCaretPosition(newCaretPosition);\r\n\r\n          /**\r\n           * Calling onKeyPress\r\n           * We pass in the composed candidate instead of the decomposed one\r\n           * To prevent confusion for users\r\n           */\r\n          if (enableLayoutCandidatesKeyPress && typeof this.options.onKeyPress === 'function') {\r\n            this.options.onKeyPress(selectedCandidate, e);\r\n          }\r\n\r\n          if (typeof this.options.onChange === 'function') {\r\n            this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n          }\r\n\r\n          /**\r\n           * Calling onChangeAll\r\n           */\r\n          if (typeof this.options.onChangeAll === 'function') this.options.onChangeAll(this.getAllInputs(), e);\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles clicks made to keyboard buttons\r\n   * @param  {string} button The button's layout name.\r\n   */\r\n  handleButtonClicked(button: string, e?: KeyboardHandlerEvent): void {\r\n    const { inputName = this.defaultName, debug } = this.options;\r\n    /**\r\n     * Ignoring placeholder buttons\r\n     */\r\n    if (button === '{//}') return;\r\n\r\n    /**\r\n     * Creating inputName if it doesn't exist\r\n     */\r\n    if (!this.input[inputName]) this.input[inputName] = '';\r\n\r\n    /**\r\n     * Perform an action before any input change\r\n     */\r\n    if (typeof this.options.beforeInputUpdate === 'function') {\r\n      this.options.beforeInputUpdate(this);\r\n    }\r\n\r\n    /**\r\n     * Calculating new input\r\n     */\r\n    const updatedInput = this.utilities.getUpdatedInput(\r\n      button,\r\n      this.input[inputName],\r\n      this.caretPosition,\r\n      this.caretPositionEnd\r\n    );\r\n\r\n    /**\r\n     * EDGE CASE: Check for whole input selection changes that will yield same updatedInput\r\n     */\r\n    if (this.utilities.isStandardButton(button) && this.activeInputElement) {\r\n      const isEntireInputSelection =\r\n        this.input[inputName] &&\r\n        this.input[inputName] === updatedInput &&\r\n        this.caretPosition === 0 &&\r\n        this.caretPositionEnd === updatedInput.length;\r\n\r\n      if (isEntireInputSelection) {\r\n        this.setInput('', this.options.inputName, true);\r\n        this.setCaretPosition(0);\r\n        this.activeInputElement.value = '';\r\n        this.activeInputElement.setSelectionRange(0, 0);\r\n        this.handleButtonClicked(button, e);\r\n        return;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Calling onKeyPress\r\n     */\r\n    if (typeof this.options.onKeyPress === 'function') this.options.onKeyPress(button, e);\r\n\r\n    if (\r\n      // If input will change as a result of this button press\r\n      this.input[inputName] !== updatedInput &&\r\n      // This pertains to the \"inputPattern\" option:\r\n      // If inputPattern isn't set\r\n      (!this.options.inputPattern ||\r\n        // Or, if it is set and if the pattern is valid - we proceed.\r\n        (this.options.inputPattern && this.inputPatternIsValid(updatedInput)))\r\n    ) {\r\n      /**\r\n       * If maxLength and handleMaxLength yield true, halting\r\n       */\r\n      if (this.options.maxLength && this.utilities.handleMaxLength(this.input, updatedInput)) {\r\n        return;\r\n      }\r\n\r\n      /**\r\n       * Updating input\r\n       */\r\n      const newInputValue = this.utilities.getUpdatedInput(\r\n        button,\r\n        this.input[inputName],\r\n        this.caretPosition,\r\n        this.caretPositionEnd,\r\n        true\r\n      );\r\n\r\n      this.setInput(newInputValue, this.options.inputName, true);\r\n\r\n      if (debug) console.log('Input changed:', this.getAllInputs());\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          'Caret at: ',\r\n          this.getCaretPosition(),\r\n          this.getCaretPositionEnd(),\r\n          `(${this.keyboardDOMClass})`,\r\n          e?.type\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Enforce syncInstanceInputs, if set\r\n       */\r\n      if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n\r\n      /**\r\n       * Calling onChange\r\n       */\r\n      if (typeof this.options.onChange === 'function')\r\n        this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n\r\n      /**\r\n       * Calling onChangeAll\r\n       */\r\n      if (typeof this.options.onChangeAll === 'function') this.options.onChangeAll(this.getAllInputs(), e);\r\n\r\n      /**\r\n       * Check if this new input has candidates (suggested words)\r\n       */\r\n      if (e?.target && this.options.enableLayoutCandidates) {\r\n        const { candidateKey, candidateValue } = this.getInputCandidates(updatedInput);\r\n\r\n        if (candidateKey && candidateValue) {\r\n          this.showCandidatesBox(candidateKey, candidateValue, this.keyboardDOM);\r\n        } else {\r\n          this.candidateBox?.destroy();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * After a button is clicked the selection (if any) will disappear\r\n     * we should reflect this in our state, as applicable\r\n     */\r\n    if (this.caretPositionEnd && this.caretPosition !== this.caretPositionEnd) {\r\n      this.setCaretPosition(this.caretPositionEnd, this.caretPositionEnd);\r\n\r\n      if (this.activeInputElement) {\r\n        this.activeInputElement.setSelectionRange(this.caretPositionEnd, this.caretPositionEnd);\r\n      }\r\n\r\n      if (this.options.debug) {\r\n        console.log('Caret position aligned', this.caretPosition);\r\n      }\r\n    }\r\n\r\n    if (debug) {\r\n      console.log('Key pressed:', button);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get mouse hold state\r\n   */\r\n  getMouseHold() {\r\n    return this.isMouseHold;\r\n  }\r\n\r\n  /**\r\n   * Mark mouse hold state as set\r\n   */\r\n  setMouseHold(value: boolean) {\r\n    if (this.options.syncInstanceInputs) {\r\n      this.dispatch((instance: SimpleKeyboard) => {\r\n        instance.isMouseHold = value;\r\n      });\r\n    } else {\r\n      this.isMouseHold = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mousedown\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonMouseDown(button: string, e: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseDownDefault) e.preventDefault();\r\n      if (this.options.stopMouseDownPropagation) e.stopPropagation();\r\n\r\n      /**\r\n       * Add active class\r\n       */\r\n      e.target.classList.add(this.activeButtonClass);\r\n    }\r\n\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n    if (this.holdTimeout) clearTimeout(this.holdTimeout);\r\n\r\n    /**\r\n     * @type {boolean} Whether the mouse is being held onKeyPress\r\n     */\r\n    this.setMouseHold(true);\r\n\r\n    /**\r\n     * @type {object} Time to wait until a key hold is detected\r\n     */\r\n    if (!this.options.disableButtonHold) {\r\n      this.holdTimeout = window.setTimeout(() => {\r\n        if (\r\n          (this.getMouseHold() &&\r\n            // TODO: This needs to be configurable through options\r\n            ((!button.includes('{') && !button.includes('}')) ||\r\n              button === '{delete}' ||\r\n              button === '{backspace}' ||\r\n              button === '{bksp}' ||\r\n              button === '{space}' ||\r\n              button === '{tab}')) ||\r\n          button === '{arrowright}' ||\r\n          button === '{arrowleft}' ||\r\n          button === '{arrowup}' ||\r\n          button === '{arrowdown}'\r\n        ) {\r\n          if (this.options.debug) console.log('Button held:', button);\r\n\r\n          this.handleButtonHold(button);\r\n        }\r\n        clearTimeout(this.holdTimeout);\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mouseup\r\n   */\r\n  handleButtonMouseUp(button?: string, e?: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseUpDefault && e.preventDefault) e.preventDefault();\r\n      if (this.options.stopMouseUpPropagation && e.stopPropagation) e.stopPropagation();\r\n\r\n      /* istanbul ignore next */\r\n      const isKeyboard =\r\n        e.target === this.keyboardDOM ||\r\n        (e.target && this.keyboardDOM.contains(e.target)) ||\r\n        (this.candidateBox &&\r\n          this.candidateBox.candidateBoxElement &&\r\n          (e.target === this.candidateBox.candidateBoxElement ||\r\n            (e.target && this.candidateBox.candidateBoxElement.contains(e.target))));\r\n\r\n      /**\r\n       * On click outside, remove candidateBox\r\n       */\r\n      if (!isKeyboard && this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Remove active class\r\n     */\r\n    this.recurseButtons((buttonElement: Element) => {\r\n      buttonElement.classList.remove(this.activeButtonClass);\r\n    });\r\n\r\n    this.setMouseHold(false);\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * Calling onKeyReleased\r\n     */\r\n    if (button && typeof this.options.onKeyReleased === 'function') this.options.onKeyReleased(button, e);\r\n  }\r\n\r\n  /**\r\n   * Handles container mousedown\r\n   */\r\n  handleKeyboardContainerMouseDown(e: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Handle event options\r\n     */\r\n    if (this.options.preventMouseDownDefault) e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Handles button hold\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonHold(button: string): void {\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * @type {object} Timeout dictating the speed of key hold iterations\r\n     */\r\n    this.holdInteractionTimeout = window.setTimeout(() => {\r\n      if (this.getMouseHold()) {\r\n        this.handleButtonClicked(button);\r\n        this.handleButtonHold(button);\r\n      } else {\r\n        clearTimeout(this.holdInteractionTimeout);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances (if you have several instances).\r\n   */\r\n  syncInstanceInputs(): void {\r\n    this.dispatch((instance: SimpleKeyboard) => {\r\n      instance.replaceInput(this.input);\r\n      instance.setCaretPosition(this.caretPosition, this.caretPositionEnd);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the keyboard’s input.\r\n   * @param {string} [inputName] optional - the internal input to select\r\n   */\r\n  clearInput(inputName: string = this.options.inputName || this.defaultName): void {\r\n    this.input[inputName] = '';\r\n\r\n    /**\r\n     * Reset caretPosition\r\n     */\r\n    this.setCaretPosition(0);\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Get the keyboard’s input (You can also get it from the onChange prop).\r\n   * @param  {string} [inputName] optional - the internal input to select\r\n   */\r\n  getInput(inputName: string = this.options.inputName || this.defaultName, skipSync = false): string {\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs && !skipSync) this.syncInstanceInputs();\r\n\r\n    if (this.options.rtl) {\r\n      // Remove existing control chars\r\n      const inputWithoutRTLControl = this.input[inputName].replace('\\u202B', '').replace('\\u202C', '');\r\n\r\n      return '\\u202B' + inputWithoutRTLControl + '\\u202C';\r\n    } else {\r\n      return this.input[inputName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all simple-keyboard inputs\r\n   */\r\n  getAllInputs(): KeyboardInput {\r\n    const output = {} as KeyboardInput;\r\n    const inputNames = Object.keys(this.input);\r\n\r\n    inputNames.forEach((inputName) => {\r\n      output[inputName] = this.getInput(inputName, true);\r\n    });\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Set the keyboard’s input.\r\n   * @param  {string} input the input value\r\n   * @param  {string} inputName optional - the internal input to select\r\n   */\r\n  setInput(input: string, inputName: string = this.options.inputName || this.defaultName, skipSync?: boolean): void {\r\n    this.input[inputName] = input;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (!skipSync && this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Replace the input object (`keyboard.input`)\r\n   * @param  {object} inputObj The input object\r\n   */\r\n  replaceInput(inputObj: KeyboardInput): void {\r\n    this.input = inputObj;\r\n  }\r\n\r\n  /**\r\n   * Set new option or modify existing ones after initialization.\r\n   * @param  {object} options The options to set\r\n   */\r\n  setOptions(options = {}): void {\r\n    const changedOptions = this.changedOptions(options);\r\n    this.options = Object.assign(this.options, options);\r\n\r\n    if (changedOptions.length) {\r\n      if (this.options.debug) {\r\n        console.log('changedOptions', changedOptions);\r\n      }\r\n\r\n      /**\r\n       * Some option changes require adjustments before re-render\r\n       */\r\n      this.onSetOptions(changedOptions);\r\n\r\n      /**\r\n       * Rendering\r\n       */\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detecting changes to non-function options\r\n   * This allows us to ascertain whether a button re-render is needed\r\n   */\r\n  changedOptions(newOptions: Partial<KeyboardOptions>): string[] {\r\n    return Object.keys(newOptions).filter(\r\n      (optionName) => JSON.stringify(newOptions[optionName]) !== JSON.stringify(this.options[optionName])\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Executing actions depending on changed options\r\n   * @param  {object} options The options to set\r\n   */\r\n  onSetOptions(changedOptions: string[] = []): void {\r\n    /**\r\n     * Changed: layoutName\r\n     */\r\n    if (changedOptions.includes('layoutName')) {\r\n      /**\r\n       * Reset candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Changed: layoutCandidatesPageSize, layoutCandidates\r\n     */\r\n    if (changedOptions.includes('layoutCandidatesPageSize') || changedOptions.includes('layoutCandidates')) {\r\n      /**\r\n       * Reset and recreate candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n        this.candidateBox = new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all keyboard rows and reset keyboard values.\r\n   * Used internally between re-renders.\r\n   */\r\n  resetRows(): void {\r\n    if (this.keyboardRowsDOM) {\r\n      this.keyboardRowsDOM.remove();\r\n    }\r\n\r\n    this.keyboardDOM.className = this.keyboardDOMClass;\r\n    this.keyboardDOM.setAttribute('data-skInstance', this.currentInstanceName);\r\n    this.buttonElements = {};\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\r\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\r\n   */\r\n  // eslint-disable-next-line no-unused-vars\r\n  dispatch(callback: (instance: SimpleKeyboard, key?: string) => void): void {\r\n    if (!(window as SKWindow)['SimpleKeyboardInstances']) {\r\n      console.warn(`SimpleKeyboardInstances is not defined. Dispatch cannot be called.`);\r\n      throw new Error('INSTANCES_VAR_ERROR');\r\n    }\r\n\r\n    return Object.keys((window as SKWindow)['SimpleKeyboardInstances']).forEach((key) => {\r\n      callback((window as SKWindow)['SimpleKeyboardInstances'][key], key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  addButtonTheme(buttons: string, className: string): void {\r\n    if (!className || !buttons) return;\r\n\r\n    buttons.split(' ').forEach((button) => {\r\n      className.split(' ').forEach((classNameItem) => {\r\n        if (!this.options.buttonTheme) this.options.buttonTheme = [];\r\n\r\n        let classNameFound = false;\r\n\r\n        /**\r\n         * If class is already defined, we add button to class definition\r\n         */\r\n        this.options.buttonTheme.map((buttonTheme) => {\r\n          if (buttonTheme?.class.split(' ').includes(classNameItem)) {\r\n            classNameFound = true;\r\n\r\n            const buttonThemeArray = buttonTheme.buttons.split(' ');\r\n            if (!buttonThemeArray.includes(button)) {\r\n              classNameFound = true;\r\n              buttonThemeArray.push(button);\r\n              buttonTheme.buttons = buttonThemeArray.join(' ');\r\n            }\r\n          }\r\n          return buttonTheme;\r\n        });\r\n\r\n        /**\r\n         * If class is not defined, we create a new entry\r\n         */\r\n        if (!classNameFound) {\r\n          this.options.buttonTheme.push({\r\n            class: classNameItem,\r\n            buttons: buttons,\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  removeButtonTheme(buttons: string, className: string): void {\r\n    /**\r\n     * When called with empty parameters, remove all button themes\r\n     */\r\n    if (!buttons && !className) {\r\n      this.options.buttonTheme = [];\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * If buttons are passed and buttonTheme has items\r\n     */\r\n    if (buttons && Array.isArray(this.options.buttonTheme) && this.options.buttonTheme.length) {\r\n      const buttonArray = buttons.split(' ');\r\n      buttonArray.forEach((button) => {\r\n        this.options?.buttonTheme?.map((buttonTheme, index) => {\r\n          /**\r\n           * If className is set, we affect the buttons only for that class\r\n           * Otherwise, we afect all classes\r\n           */\r\n          if ((buttonTheme && className && className.includes(buttonTheme.class)) || !className) {\r\n            const filteredButtonArray = buttonTheme?.buttons.split(' ').filter((item) => item !== button);\r\n\r\n            /**\r\n             * If buttons left, return them, otherwise, remove button Theme\r\n             */\r\n            if (buttonTheme && filteredButtonArray?.length) {\r\n              buttonTheme.buttons = filteredButtonArray.join(' ');\r\n            } else {\r\n              this.options.buttonTheme?.splice(index, 1);\r\n              buttonTheme = null;\r\n            }\r\n          }\r\n\r\n          return buttonTheme;\r\n        });\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\r\n   * @param  {string} button The button layout name to select\r\n   */\r\n  getButtonElement(button: string): KeyboardElement | KeyboardElement[] | undefined {\r\n    let output;\r\n\r\n    const buttonArr = this.buttonElements[button];\r\n    if (buttonArr) {\r\n      if (buttonArr.length > 1) {\r\n        output = buttonArr;\r\n      } else {\r\n        output = buttonArr[0];\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * This handles the \"inputPattern\" option\r\n   * by checking if the provided inputPattern passes\r\n   */\r\n  inputPatternIsValid(inputVal: string): boolean {\r\n    const inputPatternRaw = this.options.inputPattern;\r\n    let inputPattern;\r\n\r\n    /**\r\n     * Check if input pattern is global or targeted to individual inputs\r\n     */\r\n    if (inputPatternRaw instanceof RegExp) {\r\n      inputPattern = inputPatternRaw;\r\n    } else {\r\n      inputPattern = inputPatternRaw[this.options.inputName || this.defaultName];\r\n    }\r\n\r\n    if (inputPattern && inputVal) {\r\n      const didInputMatch = inputPattern.test(inputVal);\r\n\r\n      if (this.options.debug) {\r\n        console.log(`inputPattern (\"${inputPattern}\"): ${didInputMatch ? 'passed' : 'did not pass!'}`);\r\n      }\r\n\r\n      return didInputMatch;\r\n    } else {\r\n      /**\r\n       * inputPattern doesn't seem to be set for the current input, or input is empty. Pass.\r\n       */\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the removal of event listers before initializing new ones\r\n   * This is useful when changing options that require a fresh set of event listeners\r\n   */\r\n  handleKeyDownBound!: (event: KeyboardEvent) => void;\r\n  handleKeyUpBound!: (event: KeyboardEvent) => void;\r\n  handleMouseDownBound!: (event: MouseEvent) => void;\r\n  handleMouseUpBound!: (event: MouseEvent) => void;\r\n  handleTouchEndBound!: (event: TouchEvent) => void;\r\n  handleSelectBound!: (event: Event) => void;\r\n  handleSelectionChangeBound!: (event: Event) => void;\r\n\r\n  removeEventListeners(): void {\r\n    console.log('Removing event listeners...');\r\n\r\n    document.removeEventListener('keydown', this.handleKeyDownBound);\r\n    document.removeEventListener('keyup', this.handleKeyUpBound);\r\n    document.removeEventListener('mouseup', this.handleMouseUpBound);\r\n    document.removeEventListener('touchend', this.handleTouchEndBound);\r\n    document.removeEventListener('select', this.handleSelectBound);\r\n\r\n    if (this.options.updateCaretOnSelectionChange) {\r\n      document.removeEventListener('selectionchange', this.handleSelectionChangeBound);\r\n    }\r\n\r\n    this.listenersAdded = false; // Allow re-adding if necessary\r\n  }\r\n  /**\r\n   * Handles simple-keyboard event listeners\r\n   */\r\n  setEventListeners(): void {\r\n    /**\r\n     * Only first instance should set the event listeners\r\n     */\r\n    if (this.isFirstKeyboardInstance || !this.allKeyboardInstances) {\r\n      if (this.options.debug) {\r\n        console.log(`Caret handling started (${this.keyboardDOMClass})`);\r\n      }\r\n\r\n      // LPJr: Prevent duplicate listeners\r\n      if (this.listenersAdded) {\r\n        console.log('Event listeners already set. Skipping...');\r\n        return;\r\n      }\r\n\r\n      // Ensure existing listeners are removed before adding new ones\r\n      this.removeEventListeners();\r\n\r\n      // LPJr: added named event handlers instead of anonymous functions\r\n      this.handleKeyDownBound = this.handleKeyDown.bind(this);\r\n      this.handleKeyUpBound = this.handleKeyUp.bind(this);\r\n      this.handleMouseUpBound = this.handleMouseUp.bind(this);\r\n      this.handleTouchEndBound = () => this.handleTouchEnd(this);\r\n      this.handleSelectBound = () => this.handleSelect(this);\r\n      this.handleSelectionChangeBound = this.handleSelectionChange.bind(this);\r\n\r\n      document.addEventListener('keydown', this.handleKeyDownBound);\r\n      document.addEventListener('keyup', this.handleKeyUpBound);\r\n      document.addEventListener('mouseup', this.handleMouseUpBound);\r\n      document.addEventListener('touchend', this.handleTouchEndBound);\r\n\r\n      if (this.options.updateCaretOnSelectionChange) {\r\n        document.addEventListener('selectionchange', this.handleSelectionChangeBound);\r\n      }\r\n\r\n      document.addEventListener('select', this.handleSelectBound);\r\n\r\n      // Mark listeners as added to prevent duplicates\r\n      this.listenersAdded = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyUp\r\n   */\r\n  handleKeyUp(event: KeyboardHandlerEvent): void {\r\n    if (this.options.physicalKeyboardHighlightPreventDefault) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    this.caretEventHandler(event);\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyUp(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyDown\r\n   */\r\n  handleKeyDown(event: KeyboardHandlerEvent): void {\r\n    if (this.options.physicalKeyboardHighlightPreventDefault) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyDown(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: MouseUp\r\n   */\r\n  handleMouseUp(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: TouchEnd\r\n   */\r\n  /* istanbul ignore next */\r\n  handleTouchEnd(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: Select\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelect(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: SelectionChange\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelectionChange(event: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Firefox is not reporting the correct caret position through this event\r\n     * https://github.com/hodgef/simple-keyboard/issues/1839\r\n     */\r\n    if (navigator.userAgent.includes('Firefox')) {\r\n      return;\r\n    }\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Called by {@link setEventListeners} when an event that warrants a cursor position update is triggered\r\n   */\r\n  caretEventHandler(event: KeyboardHandlerEvent): void {\r\n    let targetTagName: string;\r\n    if (event.target.tagName) {\r\n      targetTagName = event.target.tagName.toLowerCase();\r\n    }\r\n\r\n    this.dispatch((instance) => {\r\n      let isKeyboard =\r\n        event.target === instance.keyboardDOM || (event.target && instance.keyboardDOM.contains(event.target));\r\n\r\n      /**\r\n       * If syncInstanceInputs option is enabled, make isKeyboard match any instance\r\n       * not just the current one\r\n       */\r\n      if (this.options.syncInstanceInputs && Array.isArray(event.path)) {\r\n        isKeyboard = event.path.some((item: HTMLElement) => item?.hasAttribute?.('data-skInstance'));\r\n      }\r\n\r\n      if (\r\n        (targetTagName === 'textarea' ||\r\n          (targetTagName === 'input' && ['text', 'search', 'url', 'tel', 'password'].includes(event.target.type))) &&\r\n        !instance.options.disableCaretPositioning\r\n      ) {\r\n        /**\r\n         * Tracks current cursor position\r\n         * As keys are pressed, text will be added/removed at that position within the input.\r\n         */\r\n        let selectionStart = event.target.selectionStart;\r\n        let selectionEnd = event.target.selectionEnd;\r\n\r\n        if (instance.options.rtl) {\r\n          selectionStart = instance.utilities.getRtlOffset(selectionStart, instance.getInput());\r\n          selectionEnd = instance.utilities.getRtlOffset(selectionEnd, instance.getInput());\r\n        }\r\n\r\n        instance.setCaretPosition(selectionStart, selectionEnd);\r\n\r\n        /**\r\n         * Tracking current input in order to handle caret positioning edge cases\r\n         */\r\n        instance.activeInputElement = event.target;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(\r\n            'Caret at: ',\r\n            instance.getCaretPosition(),\r\n            instance.getCaretPositionEnd(),\r\n            event && event.target.tagName.toLowerCase(),\r\n            `(${instance.keyboardDOMClass})`,\r\n            event?.type\r\n          );\r\n        }\r\n      } else if ((instance.options.disableCaretPositioning || !isKeyboard) && event?.type !== 'selectionchange') {\r\n        /**\r\n         * If we toggled off disableCaretPositioning, we must ensure caretPosition doesn't persist once reactivated.\r\n         */\r\n        instance.setCaretPosition(null);\r\n\r\n        /**\r\n         * Resetting activeInputElement\r\n         */\r\n        instance.activeInputElement = null;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(`Caret position reset due to \"${event?.type}\" event`, event);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute an operation on each button\r\n   */\r\n  recurseButtons(fn: any): void {\r\n    if (!fn) return;\r\n\r\n    Object.keys(this.buttonElements).forEach((buttonName) => this.buttonElements[buttonName].forEach(fn));\r\n  }\r\n\r\n  /**\r\n   * Destroy keyboard listeners and DOM elements\r\n   */\r\n  destroy(): void {\r\n    if (this.options.debug) console.log(`Destroying simple-keyboard instance: ${this.currentInstanceName}`);\r\n\r\n    const { physicalKeyboardHighlightPreventDefault = false } = this.options;\r\n\r\n    /**\r\n     * Remove document listeners\r\n     */\r\n    document.removeEventListener('keyup', this.handleKeyUpBound);\r\n    document.removeEventListener('keydown', this.handleKeyDownBound);\r\n    document.removeEventListener('mouseup', this.handleMouseUpBound);\r\n    document.removeEventListener('touchend', this.handleTouchEndBound);\r\n    document.removeEventListener('select', this.handleSelectBound);\r\n\r\n    // selectionchange is causing caret update issues on Chrome\r\n    // https://github.com/hodgef/simple-keyboard/issues/2346\r\n    if (this.options.updateCaretOnSelectionChange) {\r\n      document.removeEventListener('selectionchange', this.handleSelectionChangeBound);\r\n    }\r\n\r\n    document.onpointerup = null;\r\n    document.ontouchend = null;\r\n    document.ontouchcancel = null;\r\n    document.onmouseup = null;\r\n\r\n    /**\r\n     * Remove buttons\r\n     */\r\n    const deleteButton = (buttonElement: KeyboardElement | null) => {\r\n      if (buttonElement) {\r\n        buttonElement.onpointerdown = null;\r\n        buttonElement.onpointerup = null;\r\n        buttonElement.onpointercancel = null;\r\n        buttonElement.ontouchstart = null;\r\n        buttonElement.ontouchend = null;\r\n        buttonElement.ontouchcancel = null;\r\n        buttonElement.onclick = null;\r\n        buttonElement.onmousedown = null;\r\n        buttonElement.onmouseup = null;\r\n\r\n        buttonElement.remove();\r\n        buttonElement = null;\r\n      }\r\n    };\r\n\r\n    this.recurseButtons(deleteButton);\r\n\r\n    /**\r\n     * Remove wrapper events\r\n     */\r\n    this.keyboardDOM.onpointerdown = null;\r\n    this.keyboardDOM.ontouchstart = null;\r\n    this.keyboardDOM.onmousedown = null;\r\n\r\n    /**\r\n     * Clearing keyboard rows\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Candidate box\r\n     */\r\n    if (this.candidateBox) {\r\n      this.candidateBox.destroy();\r\n      this.candidateBox = null;\r\n    }\r\n\r\n    /**\r\n     * Clearing activeInputElement\r\n     */\r\n    this.activeInputElement = null;\r\n\r\n    /**\r\n     * Removing instance attribute\r\n     */\r\n    this.keyboardDOM.removeAttribute('data-skInstance');\r\n\r\n    /**\r\n     * Clearing keyboardDOM\r\n     */\r\n    this.keyboardDOM.innerHTML = '';\r\n\r\n    /**\r\n     * Remove instance\r\n     */\r\n    (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName] = null;\r\n    delete (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName];\r\n\r\n    /**\r\n     * Reset initialized flag\r\n     */\r\n    this.initialized = false;\r\n  }\r\n\r\n  /**\r\n   * Process buttonTheme option\r\n   */\r\n  getButtonThemeClasses(button: string): string[] {\r\n    const buttonTheme = this.options.buttonTheme;\r\n    let buttonClasses: string[] = [];\r\n\r\n    if (Array.isArray(buttonTheme)) {\r\n      buttonTheme.forEach((themeObj) => {\r\n        if (\r\n          themeObj &&\r\n          themeObj.class &&\r\n          typeof themeObj.class === 'string' &&\r\n          themeObj.buttons &&\r\n          typeof themeObj.buttons === 'string'\r\n        ) {\r\n          const themeObjClasses = themeObj.class.split(' ');\r\n          const themeObjButtons = themeObj.buttons.split(' ');\r\n\r\n          if (themeObjButtons.includes(button)) {\r\n            buttonClasses = [...buttonClasses, ...themeObjClasses];\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonTheme\". Please check the documentation.`, themeObj);\r\n        }\r\n      });\r\n    }\r\n\r\n    return buttonClasses;\r\n  }\r\n\r\n  /**\r\n   * Process buttonAttributes option\r\n   */\r\n  setDOMButtonAttributes(button: string, callback: any): void {\r\n    const buttonAttributes = this.options.buttonAttributes;\r\n\r\n    if (Array.isArray(buttonAttributes)) {\r\n      buttonAttributes.forEach((attrObj) => {\r\n        if (\r\n          attrObj.attribute &&\r\n          typeof attrObj.attribute === 'string' &&\r\n          attrObj.value &&\r\n          typeof attrObj.value === 'string' &&\r\n          attrObj.buttons &&\r\n          typeof attrObj.buttons === 'string'\r\n        ) {\r\n          const attrObjButtons = attrObj.buttons.split(' ');\r\n\r\n          if (attrObjButtons.includes(button)) {\r\n            callback(attrObj.attribute, attrObj.value);\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonAttributes\". Please check the documentation.`, attrObj);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onTouchDeviceDetected() {\r\n    /**\r\n     * Processing autoTouchEvents\r\n     */\r\n    this.processAutoTouchEvents();\r\n\r\n    /**\r\n     * Disabling contextual window on touch devices\r\n     */\r\n    this.disableContextualWindow();\r\n  }\r\n\r\n  /**\r\n   * Disabling contextual window for hg-button\r\n   */\r\n  /* istanbul ignore next */\r\n  disableContextualWindow() {\r\n    window.oncontextmenu = (event: KeyboardHandlerEvent) => {\r\n      if (event.target.classList.contains('hg-button')) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process autoTouchEvents option\r\n   */\r\n  processAutoTouchEvents() {\r\n    if (this.options.autoUseTouchEvents) {\r\n      this.options.useTouchEvents = true;\r\n\r\n      if (this.options.debug) {\r\n        console.log(`autoUseTouchEvents: Touch device detected, useTouchEvents enabled.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n   */\r\n  onInit() {\r\n    if (this.options.debug) {\r\n      console.log(`${this.keyboardDOMClass} Initialized`);\r\n    }\r\n\r\n    /**\r\n     * setEventListeners\r\n     */\r\n    this.setEventListeners();\r\n\r\n    if (typeof this.options.onInit === 'function') this.options.onInit(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeFirstRender() {\r\n    /**\r\n     * Performing actions when touch device detected\r\n     */\r\n    if (this.utilities.isTouchDevice()) {\r\n      this.onTouchDeviceDetected();\r\n    }\r\n\r\n    if (typeof this.options.beforeFirstRender === 'function') this.options.beforeFirstRender(this);\r\n\r\n    /**\r\n     * Notify about PointerEvents usage\r\n     */\r\n    if (\r\n      this.isFirstKeyboardInstance &&\r\n      this.utilities.pointerEventsSupported() &&\r\n      !this.options.useTouchEvents &&\r\n      !this.options.useMouseEvents\r\n    ) {\r\n      if (this.options.debug) {\r\n        console.log('Using PointerEvents as it is supported by this browser');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Notify about touch events usage\r\n     */\r\n    if (this.options.useTouchEvents) {\r\n      if (this.options.debug) {\r\n        console.log('useTouchEvents has been enabled. Only touch events will be used.');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeRender() {\r\n    if (typeof this.options.beforeRender === 'function') this.options.beforeRender(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n   */\r\n  onRender() {\r\n    if (typeof this.options.onRender === 'function') this.options.onRender(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once all modules have been loaded\r\n   */\r\n  onModulesLoaded() {\r\n    if (typeof this.options.onModulesLoaded === 'function') this.options.onModulesLoaded(this);\r\n  }\r\n\r\n  /**\r\n   * Register module\r\n   */\r\n  registerModule = (name: string, initCallback: any) => {\r\n    if (!this.modules[name]) this.modules[name] = {};\r\n\r\n    initCallback(this.modules[name]);\r\n  };\r\n\r\n  /**\r\n   * Load modules\r\n   */\r\n  loadModules() {\r\n    if (Array.isArray(this.options.modules)) {\r\n      this.options.modules.forEach((KeyboardModule) => {\r\n        const keyboardModule = this.utilities.isConstructor(KeyboardModule) ?\r\n          new KeyboardModule(this) : KeyboardModule(this);\r\n\r\n        keyboardModule.init && keyboardModule.init(this);\r\n      });\r\n\r\n      this.keyboardPluginClasses = 'modules-loaded';\r\n\r\n      this.render();\r\n      this.onModulesLoaded();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get module prop\r\n   */\r\n  getModuleProp(name: string, prop: string) {\r\n    if (!this.modules[name]) return false;\r\n\r\n    return this.modules[name][prop];\r\n  }\r\n\r\n  /**\r\n   * getModulesList\r\n   */\r\n  getModulesList() {\r\n    return Object.keys(this.modules);\r\n  }\r\n\r\n  /**\r\n   * Parse Row DOM containers\r\n   */\r\n  parseRowDOMContainers(\r\n    rowDOM: HTMLDivElement,\r\n    rowIndex: number,\r\n    containerStartIndexes: number[],\r\n    containerEndIndexes: number[]\r\n  ) {\r\n    const rowDOMArray = Array.from(rowDOM.children);\r\n    let removedElements = 0;\r\n\r\n    if (rowDOMArray.length) {\r\n      containerStartIndexes.forEach((startIndex, arrIndex) => {\r\n        const endIndex = containerEndIndexes[arrIndex];\r\n\r\n        /**\r\n         * If there exists a respective end index\r\n         * if end index comes after start index\r\n         */\r\n        if (!endIndex || !(endIndex > startIndex)) {\r\n          return false;\r\n        }\r\n\r\n        /**\r\n         * Updated startIndex, endIndex\r\n         * This is since the removal of buttons to place a single button container\r\n         * results in a modified array size\r\n         */\r\n        const updated_startIndex = startIndex - removedElements;\r\n        const updated_endIndex = endIndex - removedElements;\r\n\r\n        /**\r\n         * Create button container\r\n         */\r\n        const containerDOM = document.createElement('div');\r\n        containerDOM.className += 'hg-button-container';\r\n        const containerUID = `${this.options.layoutName}-r${rowIndex}c${arrIndex}`;\r\n        containerDOM.setAttribute('data-skUID', containerUID);\r\n\r\n        /**\r\n         * Taking elements due to be inserted into container\r\n         */\r\n        const containedElements = rowDOMArray.splice(updated_startIndex, updated_endIndex - updated_startIndex + 1);\r\n        removedElements += updated_endIndex - updated_startIndex;\r\n\r\n        /**\r\n         * Inserting elements to container\r\n         */\r\n        containedElements.forEach((element) => containerDOM.appendChild(element));\r\n\r\n        /**\r\n         * Adding container at correct position within rowDOMArray\r\n         */\r\n        rowDOMArray.splice(updated_startIndex, 0, containerDOM);\r\n\r\n        /**\r\n         * Clearing old rowDOM children structure\r\n         */\r\n        rowDOM.innerHTML = '';\r\n\r\n        /**\r\n         * Appending rowDOM new children list\r\n         */\r\n        rowDOMArray.forEach((element) => rowDOM.appendChild(element));\r\n\r\n        if (this.options.debug) {\r\n          console.log('rowDOMContainer', containedElements, updated_startIndex, updated_endIndex, removedElements + 1);\r\n        }\r\n      });\r\n    }\r\n\r\n    return rowDOM;\r\n  }\r\n\r\n  /**\r\n   * getKeyboardClassString\r\n   */\r\n  getKeyboardClassString = (...baseDOMClasses: any[]) => {\r\n    const keyboardClasses = [this.keyboardDOMClass, ...baseDOMClasses].filter((DOMClass) => !!DOMClass);\r\n\r\n    return keyboardClasses.join(' ');\r\n  };\r\n\r\n  /**\r\n   * Renders rows and buttons as per options\r\n   */\r\n  render() {\r\n    /**\r\n     * Clear keyboard\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Calling beforeFirstRender\r\n     */\r\n    if (!this.initialized) {\r\n      this.beforeFirstRender();\r\n    }\r\n\r\n    /**\r\n     * Calling beforeRender\r\n     */\r\n    this.beforeRender();\r\n\r\n    const layoutClass = `hg-layout-${this.options.layoutName}`;\r\n    const layout = this.options.layout || getDefaultLayout();\r\n    const useTouchEvents = this.options.useTouchEvents || false;\r\n    const useTouchEventsClass = useTouchEvents ? 'hg-touch-events' : '';\r\n    const useMouseEvents = this.options.useMouseEvents || false;\r\n    const disableRowButtonContainers = this.options.disableRowButtonContainers;\r\n\r\n    /**\r\n     * Adding themeClass, layoutClass to keyboardDOM\r\n     */\r\n    this.keyboardDOM.className = this.getKeyboardClassString(\r\n      this.options.theme,\r\n      layoutClass,\r\n      this.keyboardPluginClasses,\r\n      useTouchEventsClass\r\n    );\r\n\r\n    /**\r\n     * Adding keyboard identifier\r\n     */\r\n    this.keyboardDOM.setAttribute('data-skInstance', this.currentInstanceName);\r\n\r\n    /**\r\n     * Create row wrapper\r\n     */\r\n    this.keyboardRowsDOM = document.createElement('div');\r\n    this.keyboardRowsDOM.className = 'hg-rows';\r\n\r\n    /**\r\n     * Iterating through each row\r\n     */\r\n    layout[this.options.layoutName || this.defaultName].forEach((row: string, rIndex: number) => {\r\n      let rowArray = row.split(' ');\r\n\r\n      /**\r\n       * Enforce excludeFromLayout\r\n       */\r\n      if (\r\n        this.options.excludeFromLayout &&\r\n        this.options.excludeFromLayout[this.options.layoutName || this.defaultName]\r\n      ) {\r\n        rowArray = rowArray.filter(\r\n          (buttonName) =>\r\n            this.options.excludeFromLayout &&\r\n            !this.options.excludeFromLayout[this.options.layoutName || this.defaultName].includes(buttonName)\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Creating empty row\r\n       */\r\n      let rowDOM = document.createElement('div');\r\n      rowDOM.className += 'hg-row';\r\n\r\n      /**\r\n       * Tracking container indicators in rows\r\n       */\r\n      const containerStartIndexes: number[] = [];\r\n      const containerEndIndexes: number[] = [];\r\n\r\n      /**\r\n       * Iterating through each button in row\r\n       */\r\n      rowArray.forEach((button, bIndex) => {\r\n        /**\r\n         * Check if button has a container indicator\r\n         */\r\n        const buttonHasContainerStart =\r\n          !disableRowButtonContainers && typeof button === 'string' && button.length > 1 && button.indexOf('[') === 0;\r\n\r\n        const buttonHasContainerEnd =\r\n          !disableRowButtonContainers &&\r\n          typeof button === 'string' &&\r\n          button.length > 1 &&\r\n          button.indexOf(']') === button.length - 1;\r\n\r\n        /**\r\n         * Save container start index, if applicable\r\n         */\r\n        if (buttonHasContainerStart) {\r\n          containerStartIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\[/g, '');\r\n        }\r\n\r\n        if (buttonHasContainerEnd) {\r\n          containerEndIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\]/g, '');\r\n        }\r\n\r\n        /**\r\n         * Processing button options\r\n         */\r\n        const fctBtnClass = this.utilities.getButtonClass(button);\r\n        const buttonDisplayName = this.utilities.getButtonDisplayName(\r\n          button,\r\n          this.options.display,\r\n          this.options.mergeDisplay\r\n        );\r\n\r\n        /**\r\n         * Creating button\r\n         */\r\n        const buttonType = this.options.useButtonTag ? 'button' : 'div';\r\n        const buttonDOM = document.createElement(buttonType);\r\n        buttonDOM.className += `hg-button ${fctBtnClass}`;\r\n\r\n        /**\r\n         * Adding buttonTheme\r\n         */\r\n        buttonDOM.classList.add(...this.getButtonThemeClasses(button));\r\n\r\n        /**\r\n         * Adding buttonAttributes\r\n         */\r\n        this.setDOMButtonAttributes(button, (attribute: string, value: string) => {\r\n          buttonDOM.setAttribute(attribute, value);\r\n        });\r\n\r\n        this.activeButtonClass = 'hg-activeButton';\r\n\r\n        /**\r\n         * Handle button click event\r\n         */\r\n        /* istanbul ignore next */\r\n        if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n          /**\r\n           * Handle PointerEvents\r\n           */\r\n          buttonDOM.onpointerdown = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonClicked(button, e);\r\n            this.handleButtonMouseDown(button, e);\r\n          };\r\n          buttonDOM.onpointerup = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n          buttonDOM.onpointercancel = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n        } else {\r\n          /**\r\n           * Fallback for browsers not supporting PointerEvents\r\n           */\r\n          if (useTouchEvents) {\r\n            /**\r\n             * Handle touch events\r\n             */\r\n            buttonDOM.ontouchstart = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonClicked(button, e);\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.ontouchend = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n            buttonDOM.ontouchcancel = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          } else {\r\n            /**\r\n             * Handle mouse events\r\n             */\r\n            buttonDOM.onclick = (e: KeyboardHandlerEvent) => {\r\n              this.setMouseHold(false);\r\n              /**\r\n               * Fire button handler in onclick for compatibility reasons\r\n               * This fires handler before onKeyReleased, therefore when that option is set we will fire the handler\r\n               * in onmousedown instead\r\n               */\r\n              if (\r\n                typeof this.options.onKeyReleased !== 'function' &&\r\n                !(this.options.useMouseEvents && this.options.clickOnMouseDown)\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n            };\r\n            buttonDOM.onmousedown = (e: KeyboardHandlerEvent) => {\r\n              /**\r\n               * Fire button handler for onKeyReleased use-case\r\n               */\r\n              if (\r\n                (typeof this.options.onKeyReleased === 'function' ||\r\n                  (this.options.useMouseEvents && this.options.clickOnMouseDown)) &&\r\n                !this.isMouseHold\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.onmouseup = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          }\r\n        }\r\n\r\n        /**\r\n         * Adding identifier\r\n         */\r\n        buttonDOM.setAttribute('data-skBtn', button);\r\n\r\n        /**\r\n         * Adding unique id\r\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\r\n         */\r\n        const buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\r\n        buttonDOM.setAttribute('data-skBtnUID', buttonUID);\r\n\r\n        /**\r\n         * Adding button label to button\r\n         */\r\n        const buttonSpanDOM = document.createElement('span');\r\n        buttonSpanDOM.innerHTML = buttonDisplayName;\r\n        buttonDOM.appendChild(buttonSpanDOM);\r\n\r\n        /**\r\n         * Adding to buttonElements\r\n         */\r\n        if (!this.buttonElements[button]) this.buttonElements[button] = [];\r\n\r\n        this.buttonElements[button].push(buttonDOM);\r\n\r\n        /**\r\n         * Appending button to row\r\n         */\r\n        rowDOM.appendChild(buttonDOM);\r\n      });\r\n\r\n      /**\r\n       * Parse containers in row\r\n       */\r\n      rowDOM = this.parseRowDOMContainers(rowDOM, rIndex, containerStartIndexes, containerEndIndexes);\r\n\r\n      /**\r\n       * Appending row to hg-rows\r\n       */\r\n      this.keyboardRowsDOM.appendChild(rowDOM);\r\n    });\r\n\r\n    /**\r\n     * Appending row to keyboard\r\n     */\r\n    this.keyboardDOM.appendChild(this.keyboardRowsDOM);\r\n\r\n    /**\r\n     * Calling onRender\r\n     */\r\n    this.onRender();\r\n\r\n    if (!this.initialized) {\r\n      /**\r\n       * Ensures that onInit and beforeFirstRender are only called once per instantiation\r\n       */\r\n      this.initialized = true;\r\n\r\n      /**\r\n       * Handling parent events\r\n       */\r\n      /* istanbul ignore next */\r\n      if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n        document.onpointerup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onpointerdown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (useTouchEvents) {\r\n        /**\r\n         * Handling ontouchend, ontouchcancel\r\n         */\r\n        document.ontouchend = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        document.ontouchcancel = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n\r\n        this.keyboardDOM.ontouchstart = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (!useTouchEvents) {\r\n        /**\r\n         * Handling mouseup\r\n         */\r\n        document.onmouseup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onmousedown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      }\r\n\r\n      /**\r\n       * Calling onInit\r\n       */\r\n      this.onInit();\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboard;\r\n","import SimpleKeyboard from \"./components/Keyboard\";\r\nexport { SimpleKeyboard };\r\nexport default SimpleKeyboard;\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Utilities","_ref","getOptions","getCaretPosition","getCaretPositionEnd","dispatch","_classCallCheck","_defineProperty","button","length","this","bindMethods","value","includes","buttonTypeClass","getButtonType","buttonWithoutBraces","replace","buttonNormalized","concat","display","arguments","undefined","assign","getDefaultDisplay","input","caretPos","caretPosEnd","moveCaret","options","commonParams","output","removeAt","apply","removeForwardsAt","addStringAt","tabCharOnTab","newLineOnEnter","Number","isInteger","debug","console","log","minus","newCaretPos","updateCaretPosAction","instance","setCaretPosition","caretPosition","source","str","position","positionEnd","slice","join","isMaxLengthReached","updateCaretPos","emojiMatchedReg","substring","match","substr","inputObj","updatedInput","maxLength","currentInput","inputName","condition","maxLengthReached","_typeof","Boolean","window","navigator","maxTouchPoints","PointerEvent","toLowerCase","trim","split","reduce","word","toUpperCase","arr","size","_toConsumableArray","Array","Math","ceil","map","_","i","index","newIndex","startMarkerIndex","indexOf","f","Reflect","construct","String","e","myClass","_step","_iterator","_createForOfIteratorHelper","getOwnPropertyNames","s","n","done","myMethod","bind","err","PhysicalKeyboard","_this","altKey","ctrlKey","shiftKey","code","keyCodeToKey","keyCode","layout","_this$getOptions","lastLayout","layoutJSON","mapLayoutToEventCodes","extractAndPadLayout","default","shift","shiftActive","capslockActive","buttonPressed","getSimpleKeyboardLayoutKey","buttonDOM","buttonName","standardButtonPressed","getButtonElement","functionButtonPressed","_buttonDOM$","_buttonDOM$$onpointer","_buttonDOM","_buttonDOM$onpointerd","applyButtonStyle","buttonElement","style","background","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","isArray","forEach","physicalKeyboardHighlightPress","physicalKeyboardHighlightPressUsePointerEvents","onpointerdown","physicalKeyboardHighlightPressUseClick","_buttonDOM$2","click","handleButtonClicked","_buttonDOM$3","_buttonDOM$3$onpointe","_buttonDOM$onpointeru","removeAttribute","onpointerup","_options$layout$defau","_options$layout","currentLayout","_options$layout2","toString","normal","warn","shiftleft","shiftright","controlleft","controlright","altleft","altright","metaleft","metaright","backspace","capslock","enter","tab","qwertyRowLengths","processedLayout","_i","_arr","type","rows","row","push","mappedLayout","qwertyRows","rowIndex","colIndex","_layout$default$rowIn","_layout$shift$rowInde","eventCode","normalKey","CandidateBox","utilities","pageSize","layoutCandidatesPageSize","candidateBoxElement","remove","pageIndex","_ref2","candidateValue","targetElement","onSelect","candidateListPages","chunkArray","renderPage","nbPages","onItemSelected","selectedCandidate","destroy","_ref3","_this$candidateBoxEle","_this2","document","createElement","className","candidateListULElement","candidateListItem","_this2$options$displa","candidateListLIElement","getMouseEvent","mouseEvent","useTouchEvents","TouchEvent","MouseEvent","innerHTML","ontouchstart","onclick","appendChild","isPrevBtnElementActive","prevBtnElement","classList","add","prevBtnElementClickAction","isNextBtnElementActive","nextBtnElement","nextBtnElementClickAction","prepend","SimpleKeyboard","selectorOrOptions","keyboardOptions","keyboardDOMClass","keyboardDOM","querySelector","HTMLDivElement","Error","caretPositionEnd","name","initCallback","modules","_len","baseDOMClasses","_key","filter","DOMClass","_this$handleParams","handleParams","_this$handleParams$op","_objectSpread","layoutName","theme","preventMouseDownDefault","enableLayoutCandidates","excludeFromLayout","keyboardPluginClasses","_this$options$inputNa","defaultName","buttonElements","currentInstanceName","camelCase","allKeyboardInstances","keyboardInstanceNames","keys","isFirstKeyboardInstance","physicalKeyboard","candidateBox","render","loadModules","endPosition","_this$options","layoutCandidatesObj","layoutCandidates","layoutCandidatesCaseSensitiveMatch","layoutCandidate","inputSubstr","regexp","RegExp","escapeRegex","matchAll","candidateKey","sort","a","b","_this3","show","_this3$options","disableCandidateNormalization","enableLayoutCandidatesKeyPress","candidateStr","normalize","beforeInputUpdate","getInput","initialCaretPosition","newInputSubstr","newInput","caretPositionDiff","newCaretPosition","setInput","onKeyPress","onChange","onChangeAll","getAllInputs","_this$options2","_this$options2$inputN","getUpdatedInput","isStandardButton","activeInputElement","setSelectionRange","inputPattern","inputPatternIsValid","handleMaxLength","newInputValue","syncInstanceInputs","target","_this$candidateBox","_this$getInputCandida","getInputCandidates","showCandidatesBox","isMouseHold","_this4","preventDefault","stopMouseDownPropagation","stopPropagation","activeButtonClass","holdInteractionTimeout","clearTimeout","holdTimeout","setMouseHold","disableButtonHold","setTimeout","getMouseHold","handleButtonHold","_this5","preventMouseUpDefault","stopMouseUpPropagation","contains","recurseButtons","onKeyReleased","_this6","_this7","replaceInput","skipSync","rtl","_this8","changedOptions","onSetOptions","newOptions","_this9","optionName","JSON","stringify","keyboardRowsDOM","setAttribute","callback","buttons","_this10","classNameItem","buttonTheme","classNameFound","buttonThemeArray","class","_this11","_this11$options","_buttonTheme","_this11$options$butto","filteredButtonArray","item","splice","buttonArr","inputVal","inputPatternRaw","didInputMatch","test","removeEventListener","handleKeyDownBound","handleKeyUpBound","handleMouseUpBound","handleTouchEndBound","handleSelectBound","updateCaretOnSelectionChange","handleSelectionChangeBound","listenersAdded","_this12","removeEventListeners","handleKeyDown","handleKeyUp","handleMouseUp","handleTouchEnd","handleSelect","handleSelectionChange","addEventListener","event","physicalKeyboardHighlightPreventDefault","caretEventHandler","physicalKeyboardHighlight","handleHighlightKeyUp","handleHighlightKeyDown","userAgent","targetTagName","_this13","tagName","isKeyboard","path","some","_item$hasAttribute","hasAttribute","disableCaretPositioning","selectionStart","selectionEnd","getRtlOffset","fn","_this14","ontouchend","ontouchcancel","onmouseup","onpointercancel","onmousedown","resetRows","initialized","buttonClasses","themeObj","themeObjClasses","buttonAttributes","attrObj","attribute","processAutoTouchEvents","disableContextualWindow","oncontextmenu","autoUseTouchEvents","setEventListeners","onInit","isTouchDevice","onTouchDeviceDetected","beforeFirstRender","pointerEventsSupported","useMouseEvents","beforeRender","onRender","onModulesLoaded","_this15","KeyboardModule","keyboardModule","isConstructor","init","rowDOM","containerStartIndexes","containerEndIndexes","_this16","rowDOMArray","from","children","removedElements","startIndex","arrIndex","endIndex","updated_startIndex","updated_endIndex","containerDOM","containerUID","containedElements","element","_this17","layoutClass","useTouchEventsClass","disableRowButtonContainers","getKeyboardClassString","rIndex","rowArray","bIndex","_buttonDOM$classList","buttonHasContainerStart","buttonHasContainerEnd","fctBtnClass","getButtonClass","buttonDisplayName","getButtonDisplayName","mergeDisplay","buttonType","useButtonTag","getButtonThemeClasses","setDOMButtonAttributes","handleButtonMouseDown","handleButtonMouseUp","clickOnMouseDown","buttonUID","buttonSpanDOM","parseRowDOMContainers","handleKeyboardContainerMouseDown"],"sourceRoot":""}